
P1_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007acc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f40  08007c5c  08007c5c  00017c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b9c  08008b9c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008b9c  08008b9c  00018b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ba4  08008ba4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ba4  08008ba4  00018ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ba8  08008ba8  00018ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          0000026c  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002e8  200002e8  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015ae1  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d64  00000000  00000000  00035b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  000388f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001180  00000000  00000000  00039bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000226d0  00000000  00000000  0003ad40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000161c3  00000000  00000000  0005d410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2ea6  00000000  00000000  000735d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00146479  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000544c  00000000  00000000  001464cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c44 	.word	0x08007c44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08007c44 	.word	0x08007c44

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <spi1_communication>:
function :	SPI1 send data
parameter:
send_char:	sned data
******************************************************************************/
uint8_t spi1_communication(uint8_t send_char)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
	uint8_t chRetry = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	73fb      	strb	r3, [r7, #15]
	uint8_t chTemp = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	73bb      	strb	r3, [r7, #14]

	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_TX) {
 8000d72:	e007      	b.n	8000d84 <spi1_communication+0x24>
		if (++ chRetry > 200) {
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	3301      	adds	r3, #1
 8000d78:	73fb      	strb	r3, [r7, #15]
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
 8000d7c:	2bc8      	cmp	r3, #200	; 0xc8
 8000d7e:	d901      	bls.n	8000d84 <spi1_communication+0x24>
			return 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	e02d      	b.n	8000de0 <spi1_communication+0x80>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_TX) {
 8000d84:	4818      	ldr	r0, [pc, #96]	; (8000de8 <spi1_communication+0x88>)
 8000d86:	f004 fcd5 	bl	8005734 <HAL_SPI_GetState>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	d0f1      	beq.n	8000d74 <spi1_communication+0x14>
		}
	}

	HAL_SPI_Transmit(&hspi1, &send_char, 1, 1000);
 8000d90:	1df9      	adds	r1, r7, #7
 8000d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d96:	2201      	movs	r2, #1
 8000d98:	4813      	ldr	r0, [pc, #76]	; (8000de8 <spi1_communication+0x88>)
 8000d9a:	f003 ffd2 	bl	8004d42 <HAL_SPI_Transmit>

	chRetry=0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	73fb      	strb	r3, [r7, #15]
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_RX) {
 8000da2:	e007      	b.n	8000db4 <spi1_communication+0x54>
		if (++ chRetry > 200) {
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	3301      	adds	r3, #1
 8000da8:	73fb      	strb	r3, [r7, #15]
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	2bc8      	cmp	r3, #200	; 0xc8
 8000dae:	d901      	bls.n	8000db4 <spi1_communication+0x54>
			return 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	e015      	b.n	8000de0 <spi1_communication+0x80>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_RX) {
 8000db4:	480c      	ldr	r0, [pc, #48]	; (8000de8 <spi1_communication+0x88>)
 8000db6:	f004 fcbd 	bl	8005734 <HAL_SPI_GetState>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b04      	cmp	r3, #4
 8000dbe:	d0f1      	beq.n	8000da4 <spi1_communication+0x44>
		}
	}

	HAL_SPI_Receive(&hspi1, &chTemp, 1, 1000);
 8000dc0:	f107 010e 	add.w	r1, r7, #14
 8000dc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4807      	ldr	r0, [pc, #28]	; (8000de8 <spi1_communication+0x88>)
 8000dcc:	f004 f8f5 	bl	8004fba <HAL_SPI_Receive>

	/* Wait until the BSY flag is set */
	while(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY) {
 8000dd0:	bf00      	nop
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <spi1_communication+0x88>)
 8000dd4:	f004 fcae 	bl	8005734 <HAL_SPI_GetState>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d0f9      	beq.n	8000dd2 <spi1_communication+0x72>

	}

	return chTemp;
 8000dde:	7bbb      	ldrb	r3, [r7, #14]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	200000ac 	.word	0x200000ac

08000dec <lcd_write_byte>:
parameter:
  chByte : send data
  chCmd  : command or data
******************************************************************************/
void lcd_write_byte(uint8_t chByte, uint8_t chCmd)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	460a      	mov	r2, r1
 8000df6:	71fb      	strb	r3, [r7, #7]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	71bb      	strb	r3, [r7, #6]
    if (chCmd) {
 8000dfc:	79bb      	ldrb	r3, [r7, #6]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d006      	beq.n	8000e10 <lcd_write_byte+0x24>
        LCD_DC_H();
 8000e02:	2201      	movs	r2, #1
 8000e04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e08:	480d      	ldr	r0, [pc, #52]	; (8000e40 <lcd_write_byte+0x54>)
 8000e0a:	f003 fa45 	bl	8004298 <HAL_GPIO_WritePin>
 8000e0e:	e005      	b.n	8000e1c <lcd_write_byte+0x30>
    } else {
        LCD_DC_L();
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e16:	480a      	ldr	r0, [pc, #40]	; (8000e40 <lcd_write_byte+0x54>)
 8000e18:	f003 fa3e 	bl	8004298 <HAL_GPIO_WritePin>
    }

    LCD_CS_L();
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2180      	movs	r1, #128	; 0x80
 8000e20:	4807      	ldr	r0, [pc, #28]	; (8000e40 <lcd_write_byte+0x54>)
 8000e22:	f003 fa39 	bl	8004298 <HAL_GPIO_WritePin>
    spi1_communication(chByte);
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff99 	bl	8000d60 <spi1_communication>
    LCD_CS_H();
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2180      	movs	r1, #128	; 0x80
 8000e32:	4803      	ldr	r0, [pc, #12]	; (8000e40 <lcd_write_byte+0x54>)
 8000e34:	f003 fa30 	bl	8004298 <HAL_GPIO_WritePin>
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40020400 	.word	0x40020400

08000e44 <lcd_write_command>:
parameter:
     chByte : send data
		 chCmd  : command or data
******************************************************************************/
void lcd_write_command(uint8_t chRegister, uint8_t chValue)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	460a      	mov	r2, r1
 8000e4e:	71fb      	strb	r3, [r7, #7]
 8000e50:	4613      	mov	r3, r2
 8000e52:	71bb      	strb	r3, [r7, #6]
	lcd_write_byte(chRegister, LCD_CMD);
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ffc7 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8000e5e:	79bb      	ldrb	r3, [r7, #6]
 8000e60:	2101      	movs	r1, #1
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ffc2 	bl	8000dec <lcd_write_byte>
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <delay_ms>:
/******************************************************************************
Function Name  : delay
			parameter: ms
******************************************************************************/
void delay_ms(uint32_t ms)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	uint32_t j=5000;
 8000e78:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e7c:	60fb      	str	r3, [r7, #12]
	for(;ms>2;ms--)
 8000e7e:	e008      	b.n	8000e92 <delay_ms+0x22>
		for(;j>2;j--){
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d8f9      	bhi.n	8000e80 <delay_ms+0x10>
	for(;ms>2;ms--)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d8f6      	bhi.n	8000e86 <delay_ms+0x16>

		}
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <lcd_init>:
/******************************************************************************
Function Name  : initials lcd control pin
			parameter:
******************************************************************************/
void lcd_init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	LCD_RST_H();
 8000eac:	2201      	movs	r2, #1
 8000eae:	2104      	movs	r1, #4
 8000eb0:	4881      	ldr	r0, [pc, #516]	; (80010b8 <lcd_init+0x210>)
 8000eb2:	f003 f9f1 	bl	8004298 <HAL_GPIO_WritePin>
	LCD_CS_H();
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2180      	movs	r1, #128	; 0x80
 8000eba:	487f      	ldr	r0, [pc, #508]	; (80010b8 <lcd_init+0x210>)
 8000ebc:	f003 f9ec 	bl	8004298 <HAL_GPIO_WritePin>
	LCD_BKL_H();
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2140      	movs	r1, #64	; 0x40
 8000ec4:	487c      	ldr	r0, [pc, #496]	; (80010b8 <lcd_init+0x210>)
 8000ec6:	f003 f9e7 	bl	8004298 <HAL_GPIO_WritePin>
#ifdef 	ST7789_DEVICE
	LCD_RST_H();
 8000eca:	2201      	movs	r2, #1
 8000ecc:	2104      	movs	r1, #4
 8000ece:	487a      	ldr	r0, [pc, #488]	; (80010b8 <lcd_init+0x210>)
 8000ed0:	f003 f9e2 	bl	8004298 <HAL_GPIO_WritePin>
	delay_ms(5);
 8000ed4:	2005      	movs	r0, #5
 8000ed6:	f7ff ffcb 	bl	8000e70 <delay_ms>
	LCD_RST_L();
 8000eda:	2200      	movs	r2, #0
 8000edc:	2104      	movs	r1, #4
 8000ede:	4876      	ldr	r0, [pc, #472]	; (80010b8 <lcd_init+0x210>)
 8000ee0:	f003 f9da 	bl	8004298 <HAL_GPIO_WritePin>
	delay_ms(5);
 8000ee4:	2005      	movs	r0, #5
 8000ee6:	f7ff ffc3 	bl	8000e70 <delay_ms>
	LCD_RST_H();
 8000eea:	2201      	movs	r2, #1
 8000eec:	2104      	movs	r1, #4
 8000eee:	4872      	ldr	r0, [pc, #456]	; (80010b8 <lcd_init+0x210>)
 8000ef0:	f003 f9d2 	bl	8004298 <HAL_GPIO_WritePin>
	delay_ms(5);
 8000ef4:	2005      	movs	r0, #5
 8000ef6:	f7ff ffbb 	bl	8000e70 <delay_ms>
	LCD_CS_H();
 8000efa:	2201      	movs	r2, #1
 8000efc:	2180      	movs	r1, #128	; 0x80
 8000efe:	486e      	ldr	r0, [pc, #440]	; (80010b8 <lcd_init+0x210>)
 8000f00:	f003 f9ca 	bl	8004298 <HAL_GPIO_WritePin>
	lcd_write_command(0x07,0x00);
	lcd_write_command(0x08,0x01);
	lcd_write_command(0x09,0x3F);

#elif defined ST7789_DEVICE
	lcd_write_byte(0x11,LCD_CMD);
 8000f04:	2100      	movs	r1, #0
 8000f06:	2011      	movs	r0, #17
 8000f08:	f7ff ff70 	bl	8000dec <lcd_write_byte>
	delay_ms(10);
 8000f0c:	200a      	movs	r0, #10
 8000f0e:	f7ff ffaf 	bl	8000e70 <delay_ms>
	lcd_write_command(0x36,0x00);
 8000f12:	2100      	movs	r1, #0
 8000f14:	2036      	movs	r0, #54	; 0x36
 8000f16:	f7ff ff95 	bl	8000e44 <lcd_write_command>
	lcd_write_command(0x3a,0x05);
 8000f1a:	2105      	movs	r1, #5
 8000f1c:	203a      	movs	r0, #58	; 0x3a
 8000f1e:	f7ff ff91 	bl	8000e44 <lcd_write_command>
	lcd_write_byte(0xb2,LCD_CMD);
 8000f22:	2100      	movs	r1, #0
 8000f24:	20b2      	movs	r0, #178	; 0xb2
 8000f26:	f7ff ff61 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x0c,LCD_DATA);
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	200c      	movs	r0, #12
 8000f2e:	f7ff ff5d 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x0c,LCD_DATA);
 8000f32:	2101      	movs	r1, #1
 8000f34:	200c      	movs	r0, #12
 8000f36:	f7ff ff59 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f7ff ff55 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x33,LCD_DATA);
 8000f42:	2101      	movs	r1, #1
 8000f44:	2033      	movs	r0, #51	; 0x33
 8000f46:	f7ff ff51 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x33,LCD_DATA);
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	2033      	movs	r0, #51	; 0x33
 8000f4e:	f7ff ff4d 	bl	8000dec <lcd_write_byte>
	lcd_write_command(0xb7,0x35);
 8000f52:	2135      	movs	r1, #53	; 0x35
 8000f54:	20b7      	movs	r0, #183	; 0xb7
 8000f56:	f7ff ff75 	bl	8000e44 <lcd_write_command>
	lcd_write_command(0xbb,0x28);
 8000f5a:	2128      	movs	r1, #40	; 0x28
 8000f5c:	20bb      	movs	r0, #187	; 0xbb
 8000f5e:	f7ff ff71 	bl	8000e44 <lcd_write_command>
	lcd_write_command(0xc0,0x3c);
 8000f62:	213c      	movs	r1, #60	; 0x3c
 8000f64:	20c0      	movs	r0, #192	; 0xc0
 8000f66:	f7ff ff6d 	bl	8000e44 <lcd_write_command>
	lcd_write_command(0xc2,0x01);
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	20c2      	movs	r0, #194	; 0xc2
 8000f6e:	f7ff ff69 	bl	8000e44 <lcd_write_command>
	lcd_write_command(0xc3,0x0b);
 8000f72:	210b      	movs	r1, #11
 8000f74:	20c3      	movs	r0, #195	; 0xc3
 8000f76:	f7ff ff65 	bl	8000e44 <lcd_write_command>
	lcd_write_command(0xc4,0x20);
 8000f7a:	2120      	movs	r1, #32
 8000f7c:	20c4      	movs	r0, #196	; 0xc4
 8000f7e:	f7ff ff61 	bl	8000e44 <lcd_write_command>
	lcd_write_command(0xc6,0x0f);
 8000f82:	210f      	movs	r1, #15
 8000f84:	20c6      	movs	r0, #198	; 0xc6
 8000f86:	f7ff ff5d 	bl	8000e44 <lcd_write_command>
	lcd_write_byte(0xD0,LCD_CMD);
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	20d0      	movs	r0, #208	; 0xd0
 8000f8e:	f7ff ff2d 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0xa4,LCD_DATA);
 8000f92:	2101      	movs	r1, #1
 8000f94:	20a4      	movs	r0, #164	; 0xa4
 8000f96:	f7ff ff29 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0xa1,LCD_DATA);
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	20a1      	movs	r0, #161	; 0xa1
 8000f9e:	f7ff ff25 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0xe0,LCD_CMD);
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	20e0      	movs	r0, #224	; 0xe0
 8000fa6:	f7ff ff21 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0xd0,LCD_DATA);
 8000faa:	2101      	movs	r1, #1
 8000fac:	20d0      	movs	r0, #208	; 0xd0
 8000fae:	f7ff ff1d 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x01,LCD_DATA);
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f7ff ff19 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x08,LCD_DATA);
 8000fba:	2101      	movs	r1, #1
 8000fbc:	2008      	movs	r0, #8
 8000fbe:	f7ff ff15 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x0f,LCD_DATA);
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	200f      	movs	r0, #15
 8000fc6:	f7ff ff11 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x11,LCD_DATA);
 8000fca:	2101      	movs	r1, #1
 8000fcc:	2011      	movs	r0, #17
 8000fce:	f7ff ff0d 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x2a,LCD_DATA);
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	202a      	movs	r0, #42	; 0x2a
 8000fd6:	f7ff ff09 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x36,LCD_DATA);
 8000fda:	2101      	movs	r1, #1
 8000fdc:	2036      	movs	r0, #54	; 0x36
 8000fde:	f7ff ff05 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x55,LCD_DATA);
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	2055      	movs	r0, #85	; 0x55
 8000fe6:	f7ff ff01 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x44,LCD_DATA);
 8000fea:	2101      	movs	r1, #1
 8000fec:	2044      	movs	r0, #68	; 0x44
 8000fee:	f7ff fefd 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x3a,LCD_DATA);
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	203a      	movs	r0, #58	; 0x3a
 8000ff6:	f7ff fef9 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x0b,LCD_DATA);
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	200b      	movs	r0, #11
 8000ffe:	f7ff fef5 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x06,LCD_DATA);
 8001002:	2101      	movs	r1, #1
 8001004:	2006      	movs	r0, #6
 8001006:	f7ff fef1 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x11,LCD_DATA);
 800100a:	2101      	movs	r1, #1
 800100c:	2011      	movs	r0, #17
 800100e:	f7ff feed 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x20,LCD_DATA);
 8001012:	2101      	movs	r1, #1
 8001014:	2020      	movs	r0, #32
 8001016:	f7ff fee9 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0xe1,LCD_CMD);
 800101a:	2100      	movs	r1, #0
 800101c:	20e1      	movs	r0, #225	; 0xe1
 800101e:	f7ff fee5 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0xd0,LCD_DATA);
 8001022:	2101      	movs	r1, #1
 8001024:	20d0      	movs	r0, #208	; 0xd0
 8001026:	f7ff fee1 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x02,LCD_DATA);
 800102a:	2101      	movs	r1, #1
 800102c:	2002      	movs	r0, #2
 800102e:	f7ff fedd 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x07,LCD_DATA);
 8001032:	2101      	movs	r1, #1
 8001034:	2007      	movs	r0, #7
 8001036:	f7ff fed9 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x0a,LCD_DATA);
 800103a:	2101      	movs	r1, #1
 800103c:	200a      	movs	r0, #10
 800103e:	f7ff fed5 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x0b,LCD_DATA);
 8001042:	2101      	movs	r1, #1
 8001044:	200b      	movs	r0, #11
 8001046:	f7ff fed1 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x18,LCD_DATA);
 800104a:	2101      	movs	r1, #1
 800104c:	2018      	movs	r0, #24
 800104e:	f7ff fecd 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x34,LCD_DATA);
 8001052:	2101      	movs	r1, #1
 8001054:	2034      	movs	r0, #52	; 0x34
 8001056:	f7ff fec9 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x43,LCD_DATA);
 800105a:	2101      	movs	r1, #1
 800105c:	2043      	movs	r0, #67	; 0x43
 800105e:	f7ff fec5 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x4a,LCD_DATA);
 8001062:	2101      	movs	r1, #1
 8001064:	204a      	movs	r0, #74	; 0x4a
 8001066:	f7ff fec1 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x2b,LCD_DATA);
 800106a:	2101      	movs	r1, #1
 800106c:	202b      	movs	r0, #43	; 0x2b
 800106e:	f7ff febd 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x1b,LCD_DATA);
 8001072:	2101      	movs	r1, #1
 8001074:	201b      	movs	r0, #27
 8001076:	f7ff feb9 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x1c,LCD_DATA);
 800107a:	2101      	movs	r1, #1
 800107c:	201c      	movs	r0, #28
 800107e:	f7ff feb5 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x22,LCD_DATA);
 8001082:	2101      	movs	r1, #1
 8001084:	2022      	movs	r0, #34	; 0x22
 8001086:	f7ff feb1 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x1f,LCD_DATA);
 800108a:	2101      	movs	r1, #1
 800108c:	201f      	movs	r0, #31
 800108e:	f7ff fead 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x29,LCD_CMD);
 8001092:	2100      	movs	r1, #0
 8001094:	2029      	movs	r0, #41	; 0x29
 8001096:	f7ff fea9 	bl	8000dec <lcd_write_byte>
	lcd_write_command(0x51,0xff);
 800109a:	21ff      	movs	r1, #255	; 0xff
 800109c:	2051      	movs	r0, #81	; 0x51
 800109e:	f7ff fed1 	bl	8000e44 <lcd_write_command>
	lcd_write_command(0x55,0xB0);
 80010a2:	21b0      	movs	r1, #176	; 0xb0
 80010a4:	2055      	movs	r0, #85	; 0x55
 80010a6:	f7ff fecd 	bl	8000e44 <lcd_write_command>
#endif

	lcd_clear_screen(WHITE);
 80010aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80010ae:	f000 f805 	bl	80010bc <lcd_clear_screen>
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40020400 	.word	0x40020400

080010bc <lcd_clear_screen>:
Function Name  : clear lcd screen
			parameter:
				hwColor: background color
******************************************************************************/
void lcd_clear_screen(uint16_t hwColor)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	80fb      	strh	r3, [r7, #6]
	uint32_t i, wCount = LCD_WIDTH;
 80010c6:	23f0      	movs	r3, #240	; 0xf0
 80010c8:	60bb      	str	r3, [r7, #8]
	wCount *= LCD_HEIGHT;
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	019b      	lsls	r3, r3, #6
 80010d4:	60bb      	str	r3, [r7, #8]

#ifdef HX8347D_DEVICE
	lcd_set_cursor(0, 0);
	lcd_write_byte(0x22, LCD_CMD);
#elif defined ST7789_DEVICE
	lcd_write_byte(0x2A,LCD_CMD);
 80010d6:	2100      	movs	r1, #0
 80010d8:	202a      	movs	r0, #42	; 0x2a
 80010da:	f7ff fe87 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80010de:	2101      	movs	r1, #1
 80010e0:	2000      	movs	r0, #0
 80010e2:	f7ff fe83 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80010e6:	2101      	movs	r1, #1
 80010e8:	2000      	movs	r0, #0
 80010ea:	f7ff fe7f 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80010ee:	2101      	movs	r1, #1
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff fe7b 	bl	8000dec <lcd_write_byte>
	lcd_write_byte((LCD_WIDTH-1)&0xff,LCD_DATA);
 80010f6:	2101      	movs	r1, #1
 80010f8:	20ef      	movs	r0, #239	; 0xef
 80010fa:	f7ff fe77 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x2B,LCD_CMD);
 80010fe:	2100      	movs	r1, #0
 8001100:	202b      	movs	r0, #43	; 0x2b
 8001102:	f7ff fe73 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 8001106:	2101      	movs	r1, #1
 8001108:	2000      	movs	r0, #0
 800110a:	f7ff fe6f 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 800110e:	2101      	movs	r1, #1
 8001110:	2000      	movs	r0, #0
 8001112:	f7ff fe6b 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(((LCD_HEIGHT-1)>>8)&0xff,LCD_DATA);
 8001116:	2101      	movs	r1, #1
 8001118:	2001      	movs	r0, #1
 800111a:	f7ff fe67 	bl	8000dec <lcd_write_byte>
	lcd_write_byte((LCD_HEIGHT-1)&0xff,LCD_DATA);
 800111e:	2101      	movs	r1, #1
 8001120:	203f      	movs	r0, #63	; 0x3f
 8001122:	f7ff fe63 	bl	8000dec <lcd_write_byte>
	lcd_write_byte(0x2C,LCD_CMD);
 8001126:	2100      	movs	r1, #0
 8001128:	202c      	movs	r0, #44	; 0x2c
 800112a:	f7ff fe5f 	bl	8000dec <lcd_write_byte>
#endif
	LCD_CS_L();
 800112e:	2200      	movs	r2, #0
 8001130:	2180      	movs	r1, #128	; 0x80
 8001132:	4814      	ldr	r0, [pc, #80]	; (8001184 <lcd_clear_screen+0xc8>)
 8001134:	f003 f8b0 	bl	8004298 <HAL_GPIO_WritePin>
	LCD_DC_H();
 8001138:	2201      	movs	r2, #1
 800113a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800113e:	4811      	ldr	r0, [pc, #68]	; (8001184 <lcd_clear_screen+0xc8>)
 8001140:	f003 f8aa 	bl	8004298 <HAL_GPIO_WritePin>
	for(i=0;i<wCount;i++){
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	e00e      	b.n	8001168 <lcd_clear_screen+0xac>
//		spi1_communication(hwColor>>8);

		spi1_communication(hwColor>>8);
		spi1_communication((uint8_t)(hwColor&0xff));
#elif defined ST7789_DEVICE
		spi1_communication(hwColor>>8);
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	0a1b      	lsrs	r3, r3, #8
 800114e:	b29b      	uxth	r3, r3
 8001150:	b2db      	uxtb	r3, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fe04 	bl	8000d60 <spi1_communication>
		spi1_communication((uint8_t)(hwColor&0xff));
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fdff 	bl	8000d60 <spi1_communication>
	for(i=0;i<wCount;i++){
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	3301      	adds	r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fa      	ldr	r2, [r7, #12]
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	429a      	cmp	r2, r3
 800116e:	d3ec      	bcc.n	800114a <lcd_clear_screen+0x8e>
#endif
	}
	LCD_CS_H();
 8001170:	2201      	movs	r2, #1
 8001172:	2180      	movs	r1, #128	; 0x80
 8001174:	4803      	ldr	r0, [pc, #12]	; (8001184 <lcd_clear_screen+0xc8>)
 8001176:	f003 f88f 	bl	8004298 <HAL_GPIO_WritePin>
}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40020400 	.word	0x40020400

08001188 <check_button_flag>:
static	GPIO_PinState debounceButtonBuffer3[NO_OF_BUTTONS];
static	uint8_t flagForButtonPress1s[NO_OF_BUTTONS];
static	uint16_t counterForButtonPress1s[NO_OF_BUTTONS];
int button_flag[NO_OF_BUTTONS];

int check_button_flag(int i) {
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	if (button_flag[i] == 1) {
 8001190:	4a09      	ldr	r2, [pc, #36]	; (80011b8 <check_button_flag+0x30>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d106      	bne.n	80011aa <check_button_flag+0x22>
		button_flag[i] = 0;
 800119c:	4a06      	ldr	r2, [pc, #24]	; (80011b8 <check_button_flag+0x30>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2100      	movs	r1, #0
 80011a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <check_button_flag+0x24>
	}
	return 0;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	20000138 	.word	0x20000138

080011bc <button_reading>:

void button_reading(void) {
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
	for (char i=0; i<NO_OF_BUTTONS; i++) {
 80011c2:	2300      	movs	r3, #0
 80011c4:	71fb      	strb	r3, [r7, #7]
 80011c6:	e0ab      	b.n	8001320 <button_reading+0x164>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 80011c8:	79fa      	ldrb	r2, [r7, #7]
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	4959      	ldr	r1, [pc, #356]	; (8001334 <button_reading+0x178>)
 80011ce:	5c89      	ldrb	r1, [r1, r2]
 80011d0:	4a59      	ldr	r2, [pc, #356]	; (8001338 <button_reading+0x17c>)
 80011d2:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80011d4:	79fa      	ldrb	r2, [r7, #7]
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	4958      	ldr	r1, [pc, #352]	; (800133c <button_reading+0x180>)
 80011da:	5c89      	ldrb	r1, [r1, r2]
 80011dc:	4a55      	ldr	r2, [pc, #340]	; (8001334 <button_reading+0x178>)
 80011de:	54d1      	strb	r1, [r2, r3]
		switch (i) {
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	2b05      	cmp	r3, #5
 80011e4:	d84b      	bhi.n	800127e <button_reading+0xc2>
 80011e6:	a201      	add	r2, pc, #4	; (adr r2, 80011ec <button_reading+0x30>)
 80011e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ec:	08001205 	.word	0x08001205
 80011f0:	08001219 	.word	0x08001219
 80011f4:	0800122d 	.word	0x0800122d
 80011f8:	08001241 	.word	0x08001241
 80011fc:	08001255 	.word	0x08001255
 8001200:	0800126b 	.word	0x0800126b
			case 0:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(A_GPIO_Port, A_Pin);
 8001204:	79fc      	ldrb	r4, [r7, #7]
 8001206:	2110      	movs	r1, #16
 8001208:	484d      	ldr	r0, [pc, #308]	; (8001340 <button_reading+0x184>)
 800120a:	f003 f82d 	bl	8004268 <HAL_GPIO_ReadPin>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	4b4a      	ldr	r3, [pc, #296]	; (800133c <button_reading+0x180>)
 8001214:	551a      	strb	r2, [r3, r4]
				break;
 8001216:	e033      	b.n	8001280 <button_reading+0xc4>
			case 1:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(B_GPIO_Port, B_Pin);
 8001218:	79fc      	ldrb	r4, [r7, #7]
 800121a:	2120      	movs	r1, #32
 800121c:	4848      	ldr	r0, [pc, #288]	; (8001340 <button_reading+0x184>)
 800121e:	f003 f823 	bl	8004268 <HAL_GPIO_ReadPin>
 8001222:	4603      	mov	r3, r0
 8001224:	461a      	mov	r2, r3
 8001226:	4b45      	ldr	r3, [pc, #276]	; (800133c <button_reading+0x180>)
 8001228:	551a      	strb	r2, [r3, r4]
				break;
 800122a:	e029      	b.n	8001280 <button_reading+0xc4>
			case 2:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(C_GPIO_Port, C_Pin);
 800122c:	79fc      	ldrb	r4, [r7, #7]
 800122e:	2140      	movs	r1, #64	; 0x40
 8001230:	4843      	ldr	r0, [pc, #268]	; (8001340 <button_reading+0x184>)
 8001232:	f003 f819 	bl	8004268 <HAL_GPIO_ReadPin>
 8001236:	4603      	mov	r3, r0
 8001238:	461a      	mov	r2, r3
 800123a:	4b40      	ldr	r3, [pc, #256]	; (800133c <button_reading+0x180>)
 800123c:	551a      	strb	r2, [r3, r4]
				break;
 800123e:	e01f      	b.n	8001280 <button_reading+0xc4>
			case 3:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(D_GPIO_Port, D_Pin);
 8001240:	79fc      	ldrb	r4, [r7, #7]
 8001242:	2180      	movs	r1, #128	; 0x80
 8001244:	483e      	ldr	r0, [pc, #248]	; (8001340 <button_reading+0x184>)
 8001246:	f003 f80f 	bl	8004268 <HAL_GPIO_ReadPin>
 800124a:	4603      	mov	r3, r0
 800124c:	461a      	mov	r2, r3
 800124e:	4b3b      	ldr	r3, [pc, #236]	; (800133c <button_reading+0x180>)
 8001250:	551a      	strb	r2, [r3, r4]
				break;
 8001252:	e015      	b.n	8001280 <button_reading+0xc4>
			case 4:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(CTR_GPIO_Port, CTR_Pin);
 8001254:	79fc      	ldrb	r4, [r7, #7]
 8001256:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800125a:	4839      	ldr	r0, [pc, #228]	; (8001340 <button_reading+0x184>)
 800125c:	f003 f804 	bl	8004268 <HAL_GPIO_ReadPin>
 8001260:	4603      	mov	r3, r0
 8001262:	461a      	mov	r2, r3
 8001264:	4b35      	ldr	r3, [pc, #212]	; (800133c <button_reading+0x180>)
 8001266:	551a      	strb	r2, [r3, r4]
				break;
 8001268:	e00a      	b.n	8001280 <button_reading+0xc4>
			case 5:
				debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 800126a:	79fc      	ldrb	r4, [r7, #7]
 800126c:	2102      	movs	r1, #2
 800126e:	4835      	ldr	r0, [pc, #212]	; (8001344 <button_reading+0x188>)
 8001270:	f002 fffa 	bl	8004268 <HAL_GPIO_ReadPin>
 8001274:	4603      	mov	r3, r0
 8001276:	461a      	mov	r2, r3
 8001278:	4b30      	ldr	r3, [pc, #192]	; (800133c <button_reading+0x180>)
 800127a:	551a      	strb	r2, [r3, r4]
				break;
 800127c:	e000      	b.n	8001280 <button_reading+0xc4>
			default:
				break;
 800127e:	bf00      	nop
		}
		if ((debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) && (debounceButtonBuffer1[i] == debounceButtonBuffer3[i])) {
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	4a2e      	ldr	r2, [pc, #184]	; (800133c <button_reading+0x180>)
 8001284:	5cd2      	ldrb	r2, [r2, r3]
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	492a      	ldr	r1, [pc, #168]	; (8001334 <button_reading+0x178>)
 800128a:	5ccb      	ldrb	r3, [r1, r3]
 800128c:	429a      	cmp	r2, r3
 800128e:	d11c      	bne.n	80012ca <button_reading+0x10e>
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	4a2a      	ldr	r2, [pc, #168]	; (800133c <button_reading+0x180>)
 8001294:	5cd2      	ldrb	r2, [r2, r3]
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	4927      	ldr	r1, [pc, #156]	; (8001338 <button_reading+0x17c>)
 800129a:	5ccb      	ldrb	r3, [r1, r3]
 800129c:	429a      	cmp	r2, r3
 800129e:	d114      	bne.n	80012ca <button_reading+0x10e>
			if (buttonBuffer[i] == BUTTON_IS_RELEASED && debounceButtonBuffer1[i] == BUTTON_IS_PRESSED) {
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	4a29      	ldr	r2, [pc, #164]	; (8001348 <button_reading+0x18c>)
 80012a4:	5cd3      	ldrb	r3, [r2, r3]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d109      	bne.n	80012be <button_reading+0x102>
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	4a23      	ldr	r2, [pc, #140]	; (800133c <button_reading+0x180>)
 80012ae:	5cd3      	ldrb	r3, [r2, r3]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d104      	bne.n	80012be <button_reading+0x102>
				button_flag[i] = 1;
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	4a25      	ldr	r2, [pc, #148]	; (800134c <button_reading+0x190>)
 80012b8:	2101      	movs	r1, #1
 80012ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			buttonBuffer[i] = debounceButtonBuffer1[i];
 80012be:	79fa      	ldrb	r2, [r7, #7]
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	491e      	ldr	r1, [pc, #120]	; (800133c <button_reading+0x180>)
 80012c4:	5c89      	ldrb	r1, [r1, r2]
 80012c6:	4a20      	ldr	r2, [pc, #128]	; (8001348 <button_reading+0x18c>)
 80012c8:	54d1      	strb	r1, [r2, r3]
		}
		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	4a1e      	ldr	r2, [pc, #120]	; (8001348 <button_reading+0x18c>)
 80012ce:	5cd3      	ldrb	r3, [r2, r3]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d114      	bne.n	80012fe <button_reading+0x142>
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	4a1e      	ldr	r2, [pc, #120]	; (8001350 <button_reading+0x194>)
 80012d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012dc:	2b63      	cmp	r3, #99	; 0x63
 80012de:	d809      	bhi.n	80012f4 <button_reading+0x138>
				counterForButtonPress1s[i]++;
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	4a1b      	ldr	r2, [pc, #108]	; (8001350 <button_reading+0x194>)
 80012e4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80012e8:	3201      	adds	r2, #1
 80012ea:	b291      	uxth	r1, r2
 80012ec:	4a18      	ldr	r2, [pc, #96]	; (8001350 <button_reading+0x194>)
 80012ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80012f2:	e012      	b.n	800131a <button_reading+0x15e>
			} else {
				flagForButtonPress1s[i] = 1;
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	4a17      	ldr	r2, [pc, #92]	; (8001354 <button_reading+0x198>)
 80012f8:	2101      	movs	r1, #1
 80012fa:	54d1      	strb	r1, [r2, r3]
 80012fc:	e00d      	b.n	800131a <button_reading+0x15e>
			}
		} else {
			button_flag[i] = 0;
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	4a12      	ldr	r2, [pc, #72]	; (800134c <button_reading+0x190>)
 8001302:	2100      	movs	r1, #0
 8001304:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterForButtonPress1s[i] = 0;
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	4a11      	ldr	r2, [pc, #68]	; (8001350 <button_reading+0x194>)
 800130c:	2100      	movs	r1, #0
 800130e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <button_reading+0x198>)
 8001316:	2100      	movs	r1, #0
 8001318:	54d1      	strb	r1, [r2, r3]
	for (char i=0; i<NO_OF_BUTTONS; i++) {
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	3301      	adds	r3, #1
 800131e:	71fb      	strb	r3, [r7, #7]
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	2b05      	cmp	r3, #5
 8001324:	f67f af50 	bls.w	80011c8 <button_reading+0xc>
		}
	}
}
 8001328:	bf00      	nop
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	bd90      	pop	{r4, r7, pc}
 8001332:	bf00      	nop
 8001334:	20000114 	.word	0x20000114
 8001338:	2000011c 	.word	0x2000011c
 800133c:	2000010c 	.word	0x2000010c
 8001340:	40020800 	.word	0x40020800
 8001344:	40020000 	.word	0x40020000
 8001348:	20000104 	.word	0x20000104
 800134c:	20000138 	.word	0x20000138
 8001350:	2000012c 	.word	0x2000012c
 8001354:	20000124 	.word	0x20000124

08001358 <HAL_CAN_RxFifo0MsgPendingCallback>:
int service_27_state = 0;
int cur_button = 0;
char lcd_str[10];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader1 ,RxData1);
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001362:	4a09      	ldr	r2, [pc, #36]	; (8001388 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001364:	2100      	movs	r1, #0
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f002 f8d7 	bl	800351a <HAL_CAN_GetRxMessage>
	datacheck1 = 1;
 800136c:	4b07      	ldr	r3, [pc, #28]	; (800138c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800136e:	2201      	movs	r2, #1
 8001370:	601a      	str	r2, [r3, #0]
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001372:	2102      	movs	r1, #2
 8001374:	4806      	ldr	r0, [pc, #24]	; (8001390 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001376:	f002 ffa8 	bl	80042ca <HAL_GPIO_TogglePin>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000288 	.word	0x20000288
 8001388:	20000264 	.word	0x20000264
 800138c:	20000294 	.word	0x20000294
 8001390:	40020400 	.word	0x40020400

08001394 <do_service_22>:

void do_service_22() {
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af04      	add	r7, sp, #16
	  if (datacheck1) {
 800139a:	4b32      	ldr	r3, [pc, #200]	; (8001464 <do_service_22+0xd0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d039      	beq.n	8001416 <do_service_22+0x82>
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2101      	movs	r1, #1
 80013a6:	4830      	ldr	r0, [pc, #192]	; (8001468 <do_service_22+0xd4>)
 80013a8:	f002 ff76 	bl	8004298 <HAL_GPIO_WritePin>
		  datacheck1 = 0;
 80013ac:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <do_service_22+0xd0>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
		  uint16_t result = (RxData1[3] << 8) | (RxData1[4] << 0);
 80013b2:	4b2e      	ldr	r3, [pc, #184]	; (800146c <do_service_22+0xd8>)
 80013b4:	78db      	ldrb	r3, [r3, #3]
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	b21a      	sxth	r2, r3
 80013ba:	4b2c      	ldr	r3, [pc, #176]	; (800146c <do_service_22+0xd8>)
 80013bc:	791b      	ldrb	r3, [r3, #4]
 80013be:	b21b      	sxth	r3, r3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	80fb      	strh	r3, [r7, #6]
		  HAL_UART_Transmit(&huart1, (void *)str , sprintf(str, "%d\r\n", result), 1000);
 80013c6:	88fb      	ldrh	r3, [r7, #6]
 80013c8:	461a      	mov	r2, r3
 80013ca:	4929      	ldr	r1, [pc, #164]	; (8001470 <do_service_22+0xdc>)
 80013cc:	4829      	ldr	r0, [pc, #164]	; (8001474 <do_service_22+0xe0>)
 80013ce:	f005 ffcb 	bl	8007368 <siprintf>
 80013d2:	4603      	mov	r3, r0
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013da:	4926      	ldr	r1, [pc, #152]	; (8001474 <do_service_22+0xe0>)
 80013dc:	4826      	ldr	r0, [pc, #152]	; (8001478 <do_service_22+0xe4>)
 80013de:	f004 ffca 	bl	8006376 <HAL_UART_Transmit>

	      sprintf(lcd_str, "ADC received: %d", result);
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4925      	ldr	r1, [pc, #148]	; (800147c <do_service_22+0xe8>)
 80013e8:	4825      	ldr	r0, [pc, #148]	; (8001480 <do_service_22+0xec>)
 80013ea:	f005 ffbd 	bl	8007368 <siprintf>

	      ST7789_Fill_Color(WHITE);
 80013ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80013f2:	f000 ff37 	bl	8002264 <ST7789_Fill_Color>
	      ST7789_WriteString(10, 20, lcd_str, Font_11x18, RED, WHITE);
 80013f6:	4b23      	ldr	r3, [pc, #140]	; (8001484 <do_service_22+0xf0>)
 80013f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013fc:	9202      	str	r2, [sp, #8]
 80013fe:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001402:	9201      	str	r2, [sp, #4]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	9200      	str	r2, [sp, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a1d      	ldr	r2, [pc, #116]	; (8001480 <do_service_22+0xec>)
 800140c:	2114      	movs	r1, #20
 800140e:	200a      	movs	r0, #10
 8001410:	f000 ffe6 	bl	80023e0 <ST7789_WriteString>
      TxData1[2] = 0x01;
		  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1, &TxMailbox) == HAL_OK){
			  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
		  }
	  }
}
 8001414:	e022      	b.n	800145c <do_service_22+0xc8>
      TxHeader1.DLC   = 3;
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <do_service_22+0xf4>)
 8001418:	2203      	movs	r2, #3
 800141a:	611a      	str	r2, [r3, #16]
      TxHeader1.IDE   = CAN_ID_STD;
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <do_service_22+0xf4>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
      TxHeader1.RTR   = CAN_RTR_DATA;
 8001422:	4b19      	ldr	r3, [pc, #100]	; (8001488 <do_service_22+0xf4>)
 8001424:	2200      	movs	r2, #0
 8001426:	60da      	str	r2, [r3, #12]
      TxHeader1.StdId = 0x012;
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <do_service_22+0xf4>)
 800142a:	2212      	movs	r2, #18
 800142c:	601a      	str	r2, [r3, #0]
      TxData1[0] = 0x22;
 800142e:	4b17      	ldr	r3, [pc, #92]	; (800148c <do_service_22+0xf8>)
 8001430:	2222      	movs	r2, #34	; 0x22
 8001432:	701a      	strb	r2, [r3, #0]
      TxData1[1] = 0xF0;
 8001434:	4b15      	ldr	r3, [pc, #84]	; (800148c <do_service_22+0xf8>)
 8001436:	22f0      	movs	r2, #240	; 0xf0
 8001438:	705a      	strb	r2, [r3, #1]
      TxData1[2] = 0x01;
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <do_service_22+0xf8>)
 800143c:	2201      	movs	r2, #1
 800143e:	709a      	strb	r2, [r3, #2]
		  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1, &TxMailbox) == HAL_OK){
 8001440:	4b13      	ldr	r3, [pc, #76]	; (8001490 <do_service_22+0xfc>)
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <do_service_22+0xf8>)
 8001444:	4910      	ldr	r1, [pc, #64]	; (8001488 <do_service_22+0xf4>)
 8001446:	4813      	ldr	r0, [pc, #76]	; (8001494 <do_service_22+0x100>)
 8001448:	f001 ff8c 	bl	8003364 <HAL_CAN_AddTxMessage>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d104      	bne.n	800145c <do_service_22+0xc8>
			  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8001452:	2201      	movs	r2, #1
 8001454:	2101      	movs	r1, #1
 8001456:	4804      	ldr	r0, [pc, #16]	; (8001468 <do_service_22+0xd4>)
 8001458:	f002 ff1e 	bl	8004298 <HAL_GPIO_WritePin>
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000294 	.word	0x20000294
 8001468:	40020400 	.word	0x40020400
 800146c:	20000288 	.word	0x20000288
 8001470:	08007c5c 	.word	0x08007c5c
 8001474:	20000098 	.word	0x20000098
 8001478:	20000208 	.word	0x20000208
 800147c:	08007c64 	.word	0x08007c64
 8001480:	200002a4 	.word	0x200002a4
 8001484:	20000000 	.word	0x20000000
 8001488:	2000024c 	.word	0x2000024c
 800148c:	20000280 	.word	0x20000280
 8001490:	20000290 	.word	0x20000290
 8001494:	20000198 	.word	0x20000198

08001498 <do_service_2E>:

void do_service_2E() {
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  switch (service_2E_state) {
 800149c:	4b77      	ldr	r3, [pc, #476]	; (800167c <do_service_2E+0x1e4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	f200 80e9 	bhi.w	8001678 <do_service_2E+0x1e0>
 80014a6:	a201      	add	r2, pc, #4	; (adr r2, 80014ac <do_service_2E+0x14>)
 80014a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ac:	080014bd 	.word	0x080014bd
 80014b0:	080014ef 	.word	0x080014ef
 80014b4:	080015b9 	.word	0x080015b9
 80014b8:	0800162d 	.word	0x0800162d
    case 0:
      for (cur_button=0; cur_button<5; cur_button++) {
 80014bc:	4b70      	ldr	r3, [pc, #448]	; (8001680 <do_service_2E+0x1e8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	e00f      	b.n	80014e4 <do_service_2E+0x4c>
        if (check_button_flag(cur_button)) {
 80014c4:	4b6e      	ldr	r3, [pc, #440]	; (8001680 <do_service_2E+0x1e8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fe5d 	bl	8001188 <check_button_flag>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d002      	beq.n	80014da <do_service_2E+0x42>
          service_2E_state = 1;
 80014d4:	4b69      	ldr	r3, [pc, #420]	; (800167c <do_service_2E+0x1e4>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	601a      	str	r2, [r3, #0]
      for (cur_button=0; cur_button<5; cur_button++) {
 80014da:	4b69      	ldr	r3, [pc, #420]	; (8001680 <do_service_2E+0x1e8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	4a67      	ldr	r2, [pc, #412]	; (8001680 <do_service_2E+0x1e8>)
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	4b66      	ldr	r3, [pc, #408]	; (8001680 <do_service_2E+0x1e8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	ddeb      	ble.n	80014c4 <do_service_2E+0x2c>
        }
      }
      break;
 80014ec:	e0c4      	b.n	8001678 <do_service_2E+0x1e0>
    case 1:
      if (datacheck1) {
 80014ee:	4b65      	ldr	r3, [pc, #404]	; (8001684 <do_service_2E+0x1ec>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d020      	beq.n	8001538 <do_service_2E+0xa0>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2101      	movs	r1, #1
 80014fa:	4863      	ldr	r0, [pc, #396]	; (8001688 <do_service_2E+0x1f0>)
 80014fc:	f002 fecc 	bl	8004298 <HAL_GPIO_WritePin>
        datacheck1 = 0;
 8001500:	4b60      	ldr	r3, [pc, #384]	; (8001684 <do_service_2E+0x1ec>)
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
        if (((RxData1[0] >> 4) & 0X0F) == 0x03 && RxData1[1] == (0x2E + 0x40)) {
 8001506:	4b61      	ldr	r3, [pc, #388]	; (800168c <do_service_2E+0x1f4>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	091b      	lsrs	r3, r3, #4
 800150c:	b2db      	uxtb	r3, r3
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	2b03      	cmp	r3, #3
 8001514:	f040 80af 	bne.w	8001676 <do_service_2E+0x1de>
 8001518:	4b5c      	ldr	r3, [pc, #368]	; (800168c <do_service_2E+0x1f4>)
 800151a:	785b      	ldrb	r3, [r3, #1]
 800151c:	2b6e      	cmp	r3, #110	; 0x6e
 800151e:	f040 80aa 	bne.w	8001676 <do_service_2E+0x1de>
        	HAL_UART_Transmit(&huart1, "service 2E: Received FC\r\n" , 30, 1000);
 8001522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001526:	221e      	movs	r2, #30
 8001528:	4959      	ldr	r1, [pc, #356]	; (8001690 <do_service_2E+0x1f8>)
 800152a:	485a      	ldr	r0, [pc, #360]	; (8001694 <do_service_2E+0x1fc>)
 800152c:	f004 ff23 	bl	8006376 <HAL_UART_Transmit>
        	service_2E_state = 2;
 8001530:	4b52      	ldr	r3, [pc, #328]	; (800167c <do_service_2E+0x1e4>)
 8001532:	2202      	movs	r2, #2
 8001534:	601a      	str	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, "Service 2E: Sending FF\r\n" , 30, 1000);
        if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1, &TxMailbox) == HAL_OK){
          HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
        }
      }
      break;
 8001536:	e09e      	b.n	8001676 <do_service_2E+0x1de>
        TxHeader1.DLC   = 8;
 8001538:	4b57      	ldr	r3, [pc, #348]	; (8001698 <do_service_2E+0x200>)
 800153a:	2208      	movs	r2, #8
 800153c:	611a      	str	r2, [r3, #16]
        TxHeader1.IDE   = CAN_ID_STD;
 800153e:	4b56      	ldr	r3, [pc, #344]	; (8001698 <do_service_2E+0x200>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
        TxHeader1.RTR   = CAN_RTR_DATA;
 8001544:	4b54      	ldr	r3, [pc, #336]	; (8001698 <do_service_2E+0x200>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
        TxHeader1.StdId = 0x012;
 800154a:	4b53      	ldr	r3, [pc, #332]	; (8001698 <do_service_2E+0x200>)
 800154c:	2212      	movs	r2, #18
 800154e:	601a      	str	r2, [r3, #0]
        TxData1[0] = 0x10;
 8001550:	4b52      	ldr	r3, [pc, #328]	; (800169c <do_service_2E+0x204>)
 8001552:	2210      	movs	r2, #16
 8001554:	701a      	strb	r2, [r3, #0]
        TxData1[1] = 0x06;
 8001556:	4b51      	ldr	r3, [pc, #324]	; (800169c <do_service_2E+0x204>)
 8001558:	2206      	movs	r2, #6
 800155a:	705a      	strb	r2, [r3, #1]
        TxData1[2] = 0x2E;
 800155c:	4b4f      	ldr	r3, [pc, #316]	; (800169c <do_service_2E+0x204>)
 800155e:	222e      	movs	r2, #46	; 0x2e
 8001560:	709a      	strb	r2, [r3, #2]
        TxData1[3] = 0xF0;
 8001562:	4b4e      	ldr	r3, [pc, #312]	; (800169c <do_service_2E+0x204>)
 8001564:	22f0      	movs	r2, #240	; 0xf0
 8001566:	70da      	strb	r2, [r3, #3]
        TxData1[4] = 0x02;
 8001568:	4b4c      	ldr	r3, [pc, #304]	; (800169c <do_service_2E+0x204>)
 800156a:	2202      	movs	r2, #2
 800156c:	711a      	strb	r2, [r3, #4]
        TxData1[5] = (uint8_t) cur_button;
 800156e:	4b44      	ldr	r3, [pc, #272]	; (8001680 <do_service_2E+0x1e8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	b2da      	uxtb	r2, r3
 8001574:	4b49      	ldr	r3, [pc, #292]	; (800169c <do_service_2E+0x204>)
 8001576:	715a      	strb	r2, [r3, #5]
        TxData1[6] = (uint8_t) cur_button;
 8001578:	4b41      	ldr	r3, [pc, #260]	; (8001680 <do_service_2E+0x1e8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4b47      	ldr	r3, [pc, #284]	; (800169c <do_service_2E+0x204>)
 8001580:	719a      	strb	r2, [r3, #6]
        TxData1[7] = (uint8_t) cur_button;
 8001582:	4b3f      	ldr	r3, [pc, #252]	; (8001680 <do_service_2E+0x1e8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	b2da      	uxtb	r2, r3
 8001588:	4b44      	ldr	r3, [pc, #272]	; (800169c <do_service_2E+0x204>)
 800158a:	71da      	strb	r2, [r3, #7]
        HAL_UART_Transmit(&huart1, "Service 2E: Sending FF\r\n" , 30, 1000);
 800158c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001590:	221e      	movs	r2, #30
 8001592:	4943      	ldr	r1, [pc, #268]	; (80016a0 <do_service_2E+0x208>)
 8001594:	483f      	ldr	r0, [pc, #252]	; (8001694 <do_service_2E+0x1fc>)
 8001596:	f004 feee 	bl	8006376 <HAL_UART_Transmit>
        if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1, &TxMailbox) == HAL_OK){
 800159a:	4b42      	ldr	r3, [pc, #264]	; (80016a4 <do_service_2E+0x20c>)
 800159c:	4a3f      	ldr	r2, [pc, #252]	; (800169c <do_service_2E+0x204>)
 800159e:	493e      	ldr	r1, [pc, #248]	; (8001698 <do_service_2E+0x200>)
 80015a0:	4841      	ldr	r0, [pc, #260]	; (80016a8 <do_service_2E+0x210>)
 80015a2:	f001 fedf 	bl	8003364 <HAL_CAN_AddTxMessage>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d164      	bne.n	8001676 <do_service_2E+0x1de>
          HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80015ac:	2201      	movs	r2, #1
 80015ae:	2101      	movs	r1, #1
 80015b0:	4835      	ldr	r0, [pc, #212]	; (8001688 <do_service_2E+0x1f0>)
 80015b2:	f002 fe71 	bl	8004298 <HAL_GPIO_WritePin>
      break;
 80015b6:	e05e      	b.n	8001676 <do_service_2E+0x1de>
    case 2:
    	TxHeader1.DLC   = 4;
 80015b8:	4b37      	ldr	r3, [pc, #220]	; (8001698 <do_service_2E+0x200>)
 80015ba:	2204      	movs	r2, #4
 80015bc:	611a      	str	r2, [r3, #16]
    	TxHeader1.IDE   = CAN_ID_STD;
 80015be:	4b36      	ldr	r3, [pc, #216]	; (8001698 <do_service_2E+0x200>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
    	TxHeader1.RTR   = CAN_RTR_DATA;
 80015c4:	4b34      	ldr	r3, [pc, #208]	; (8001698 <do_service_2E+0x200>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
    	TxHeader1.StdId = 0x012;
 80015ca:	4b33      	ldr	r3, [pc, #204]	; (8001698 <do_service_2E+0x200>)
 80015cc:	2212      	movs	r2, #18
 80015ce:	601a      	str	r2, [r3, #0]

    	//PCI
    	TxData1[0] = ((0x02 << 4) & 0xFF) | 0x01;
 80015d0:	4b32      	ldr	r3, [pc, #200]	; (800169c <do_service_2E+0x204>)
 80015d2:	2221      	movs	r2, #33	; 0x21
 80015d4:	701a      	strb	r2, [r3, #0]
    	//DATA
    	TxData1[1] = (uint8_t) cur_button;
 80015d6:	4b2a      	ldr	r3, [pc, #168]	; (8001680 <do_service_2E+0x1e8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	4b2f      	ldr	r3, [pc, #188]	; (800169c <do_service_2E+0x204>)
 80015de:	705a      	strb	r2, [r3, #1]
    	TxData1[2] = (uint8_t) cur_button;
 80015e0:	4b27      	ldr	r3, [pc, #156]	; (8001680 <do_service_2E+0x1e8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4b2d      	ldr	r3, [pc, #180]	; (800169c <do_service_2E+0x204>)
 80015e8:	709a      	strb	r2, [r3, #2]
    	TxData1[3] = (uint8_t) cur_button;
 80015ea:	4b25      	ldr	r3, [pc, #148]	; (8001680 <do_service_2E+0x1e8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	4b2a      	ldr	r3, [pc, #168]	; (800169c <do_service_2E+0x204>)
 80015f2:	70da      	strb	r2, [r3, #3]

    	HAL_UART_Transmit(&huart1, "Service 2E: Sending CF\r\n" , 30, 1000);
 80015f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f8:	221e      	movs	r2, #30
 80015fa:	492c      	ldr	r1, [pc, #176]	; (80016ac <do_service_2E+0x214>)
 80015fc:	4825      	ldr	r0, [pc, #148]	; (8001694 <do_service_2E+0x1fc>)
 80015fe:	f004 feba 	bl	8006376 <HAL_UART_Transmit>
    	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1, &TxMailbox) == HAL_OK){
 8001602:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <do_service_2E+0x20c>)
 8001604:	4a25      	ldr	r2, [pc, #148]	; (800169c <do_service_2E+0x204>)
 8001606:	4924      	ldr	r1, [pc, #144]	; (8001698 <do_service_2E+0x200>)
 8001608:	4827      	ldr	r0, [pc, #156]	; (80016a8 <do_service_2E+0x210>)
 800160a:	f001 feab 	bl	8003364 <HAL_CAN_AddTxMessage>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d107      	bne.n	8001624 <do_service_2E+0x18c>
    		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8001614:	2201      	movs	r2, #1
 8001616:	2101      	movs	r1, #1
 8001618:	481b      	ldr	r0, [pc, #108]	; (8001688 <do_service_2E+0x1f0>)
 800161a:	f002 fe3d 	bl	8004298 <HAL_GPIO_WritePin>
    		service_2E_state = 3;
 800161e:	4b17      	ldr	r3, [pc, #92]	; (800167c <do_service_2E+0x1e4>)
 8001620:	2203      	movs	r2, #3
 8001622:	601a      	str	r2, [r3, #0]
    	}
    	HAL_Delay(50);
 8001624:	2032      	movs	r0, #50	; 0x32
 8001626:	f001 f9f7 	bl	8002a18 <HAL_Delay>
    	break;
 800162a:	e025      	b.n	8001678 <do_service_2E+0x1e0>
    case 3:
    	if (datacheck1) {
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <do_service_2E+0x1ec>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d021      	beq.n	8001678 <do_service_2E+0x1e0>
            if (((RxData1[0] >> 4) & 0X0F) == 0x03 && RxData1[1] == (0x2E + 0x40)) {
 8001634:	4b15      	ldr	r3, [pc, #84]	; (800168c <do_service_2E+0x1f4>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	091b      	lsrs	r3, r3, #4
 800163a:	b2db      	uxtb	r3, r3
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	2b03      	cmp	r3, #3
 8001642:	d10d      	bne.n	8001660 <do_service_2E+0x1c8>
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <do_service_2E+0x1f4>)
 8001646:	785b      	ldrb	r3, [r3, #1]
 8001648:	2b6e      	cmp	r3, #110	; 0x6e
 800164a:	d109      	bne.n	8001660 <do_service_2E+0x1c8>
            	HAL_UART_Transmit(&huart1, "Service 2E: Done\r\n" , 30, 1000);
 800164c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001650:	221e      	movs	r2, #30
 8001652:	4917      	ldr	r1, [pc, #92]	; (80016b0 <do_service_2E+0x218>)
 8001654:	480f      	ldr	r0, [pc, #60]	; (8001694 <do_service_2E+0x1fc>)
 8001656:	f004 fe8e 	bl	8006376 <HAL_UART_Transmit>
            	service_2E_state = 0;
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <do_service_2E+0x1e4>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
            }
            HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2101      	movs	r1, #1
 8001664:	4808      	ldr	r0, [pc, #32]	; (8001688 <do_service_2E+0x1f0>)
 8001666:	f002 fe17 	bl	8004298 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2102      	movs	r1, #2
 800166e:	4806      	ldr	r0, [pc, #24]	; (8001688 <do_service_2E+0x1f0>)
 8001670:	f002 fe12 	bl	8004298 <HAL_GPIO_WritePin>
    	}
  }
}
 8001674:	e000      	b.n	8001678 <do_service_2E+0x1e0>
      break;
 8001676:	bf00      	nop
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000298 	.word	0x20000298
 8001680:	200002a0 	.word	0x200002a0
 8001684:	20000294 	.word	0x20000294
 8001688:	40020400 	.word	0x40020400
 800168c:	20000288 	.word	0x20000288
 8001690:	08007c78 	.word	0x08007c78
 8001694:	20000208 	.word	0x20000208
 8001698:	2000024c 	.word	0x2000024c
 800169c:	20000280 	.word	0x20000280
 80016a0:	08007c94 	.word	0x08007c94
 80016a4:	20000290 	.word	0x20000290
 80016a8:	20000198 	.word	0x20000198
 80016ac:	08007cb0 	.word	0x08007cb0
 80016b0:	08007ccc 	.word	0x08007ccc

080016b4 <do_service_27>:

void do_service_27() {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	switch (service_27_state) {
 80016b8:	4b59      	ldr	r3, [pc, #356]	; (8001820 <do_service_27+0x16c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	f000 808e 	beq.w	80017de <do_service_27+0x12a>
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	f300 80a2 	bgt.w	800180c <do_service_27+0x158>
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d002      	beq.n	80016d2 <do_service_27+0x1e>
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d048      	beq.n	8001762 <do_service_27+0xae>
					service_27_state = 0;
				}
			}
			break;
		default:
			break;
 80016d0:	e09c      	b.n	800180c <do_service_27+0x158>
			if (datacheck1) {
 80016d2:	4b54      	ldr	r3, [pc, #336]	; (8001824 <do_service_27+0x170>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d015      	beq.n	8001706 <do_service_27+0x52>
		        if (RxData1[0] == (0x27 + 0x40) && RxData1[1] == 0x01) {
 80016da:	4b53      	ldr	r3, [pc, #332]	; (8001828 <do_service_27+0x174>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b67      	cmp	r3, #103	; 0x67
 80016e0:	d10d      	bne.n	80016fe <do_service_27+0x4a>
 80016e2:	4b51      	ldr	r3, [pc, #324]	; (8001828 <do_service_27+0x174>)
 80016e4:	785b      	ldrb	r3, [r3, #1]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d109      	bne.n	80016fe <do_service_27+0x4a>
		        	HAL_UART_Transmit(&huart1, "Service 27: Received seed\r\n" , 30, 1000);
 80016ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ee:	221e      	movs	r2, #30
 80016f0:	494e      	ldr	r1, [pc, #312]	; (800182c <do_service_27+0x178>)
 80016f2:	484f      	ldr	r0, [pc, #316]	; (8001830 <do_service_27+0x17c>)
 80016f4:	f004 fe3f 	bl	8006376 <HAL_UART_Transmit>
		        	service_27_state = 1;
 80016f8:	4b49      	ldr	r3, [pc, #292]	; (8001820 <do_service_27+0x16c>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	601a      	str	r2, [r3, #0]
		        datacheck1 = 0;
 80016fe:	4b49      	ldr	r3, [pc, #292]	; (8001824 <do_service_27+0x170>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
			break;
 8001704:	e084      	b.n	8001810 <do_service_27+0x15c>
			} else if (check_button_flag(5)) {
 8001706:	2005      	movs	r0, #5
 8001708:	f7ff fd3e 	bl	8001188 <check_button_flag>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d07e      	beq.n	8001810 <do_service_27+0x15c>
		        TxHeader1.DLC   = 2;
 8001712:	4b48      	ldr	r3, [pc, #288]	; (8001834 <do_service_27+0x180>)
 8001714:	2202      	movs	r2, #2
 8001716:	611a      	str	r2, [r3, #16]
		        TxHeader1.IDE   = CAN_ID_STD;
 8001718:	4b46      	ldr	r3, [pc, #280]	; (8001834 <do_service_27+0x180>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
		        TxHeader1.RTR   = CAN_RTR_DATA;
 800171e:	4b45      	ldr	r3, [pc, #276]	; (8001834 <do_service_27+0x180>)
 8001720:	2200      	movs	r2, #0
 8001722:	60da      	str	r2, [r3, #12]
		        TxHeader1.StdId = 0x012;
 8001724:	4b43      	ldr	r3, [pc, #268]	; (8001834 <do_service_27+0x180>)
 8001726:	2212      	movs	r2, #18
 8001728:	601a      	str	r2, [r3, #0]
		        TxData1[0] = 0x27;
 800172a:	4b43      	ldr	r3, [pc, #268]	; (8001838 <do_service_27+0x184>)
 800172c:	2227      	movs	r2, #39	; 0x27
 800172e:	701a      	strb	r2, [r3, #0]
		        TxData1[1] = 0x01;
 8001730:	4b41      	ldr	r3, [pc, #260]	; (8001838 <do_service_27+0x184>)
 8001732:	2201      	movs	r2, #1
 8001734:	705a      	strb	r2, [r3, #1]
		        HAL_UART_Transmit(&huart1, "Service 27: Request seed\r\n" , 30, 1000);
 8001736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173a:	221e      	movs	r2, #30
 800173c:	493f      	ldr	r1, [pc, #252]	; (800183c <do_service_27+0x188>)
 800173e:	483c      	ldr	r0, [pc, #240]	; (8001830 <do_service_27+0x17c>)
 8001740:	f004 fe19 	bl	8006376 <HAL_UART_Transmit>
		        if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1, &TxMailbox) == HAL_OK){
 8001744:	4b3e      	ldr	r3, [pc, #248]	; (8001840 <do_service_27+0x18c>)
 8001746:	4a3c      	ldr	r2, [pc, #240]	; (8001838 <do_service_27+0x184>)
 8001748:	493a      	ldr	r1, [pc, #232]	; (8001834 <do_service_27+0x180>)
 800174a:	483e      	ldr	r0, [pc, #248]	; (8001844 <do_service_27+0x190>)
 800174c:	f001 fe0a 	bl	8003364 <HAL_CAN_AddTxMessage>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d15c      	bne.n	8001810 <do_service_27+0x15c>
		          HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8001756:	2201      	movs	r2, #1
 8001758:	2101      	movs	r1, #1
 800175a:	483b      	ldr	r0, [pc, #236]	; (8001848 <do_service_27+0x194>)
 800175c:	f002 fd9c 	bl	8004298 <HAL_GPIO_WritePin>
			break;
 8001760:	e056      	b.n	8001810 <do_service_27+0x15c>
	        TxHeader1.DLC   = 2;
 8001762:	4b34      	ldr	r3, [pc, #208]	; (8001834 <do_service_27+0x180>)
 8001764:	2202      	movs	r2, #2
 8001766:	611a      	str	r2, [r3, #16]
	        TxHeader1.IDE   = CAN_ID_STD;
 8001768:	4b32      	ldr	r3, [pc, #200]	; (8001834 <do_service_27+0x180>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
	        TxHeader1.RTR   = CAN_RTR_DATA;
 800176e:	4b31      	ldr	r3, [pc, #196]	; (8001834 <do_service_27+0x180>)
 8001770:	2200      	movs	r2, #0
 8001772:	60da      	str	r2, [r3, #12]
	        TxHeader1.StdId = 0x012;
 8001774:	4b2f      	ldr	r3, [pc, #188]	; (8001834 <do_service_27+0x180>)
 8001776:	2212      	movs	r2, #18
 8001778:	601a      	str	r2, [r3, #0]
			TxData1[0] = 0x27;
 800177a:	4b2f      	ldr	r3, [pc, #188]	; (8001838 <do_service_27+0x184>)
 800177c:	2227      	movs	r2, #39	; 0x27
 800177e:	701a      	strb	r2, [r3, #0]
			TxData1[1] = 0x02;
 8001780:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <do_service_27+0x184>)
 8001782:	2202      	movs	r2, #2
 8001784:	705a      	strb	r2, [r3, #1]
			TxData1[2] = RxData1[2] + 1;
 8001786:	4b28      	ldr	r3, [pc, #160]	; (8001828 <do_service_27+0x174>)
 8001788:	789b      	ldrb	r3, [r3, #2]
 800178a:	3301      	adds	r3, #1
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <do_service_27+0x184>)
 8001790:	709a      	strb	r2, [r3, #2]
			TxData1[3] = RxData1[3] + 1;
 8001792:	4b25      	ldr	r3, [pc, #148]	; (8001828 <do_service_27+0x174>)
 8001794:	78db      	ldrb	r3, [r3, #3]
 8001796:	3301      	adds	r3, #1
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4b27      	ldr	r3, [pc, #156]	; (8001838 <do_service_27+0x184>)
 800179c:	70da      	strb	r2, [r3, #3]
			TxData1[4] = RxData1[4] + 1;
 800179e:	4b22      	ldr	r3, [pc, #136]	; (8001828 <do_service_27+0x174>)
 80017a0:	791b      	ldrb	r3, [r3, #4]
 80017a2:	3301      	adds	r3, #1
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4b24      	ldr	r3, [pc, #144]	; (8001838 <do_service_27+0x184>)
 80017a8:	711a      	strb	r2, [r3, #4]
			TxData1[5] = RxData1[5] + 1;
 80017aa:	4b1f      	ldr	r3, [pc, #124]	; (8001828 <do_service_27+0x174>)
 80017ac:	795b      	ldrb	r3, [r3, #5]
 80017ae:	3301      	adds	r3, #1
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4b21      	ldr	r3, [pc, #132]	; (8001838 <do_service_27+0x184>)
 80017b4:	715a      	strb	r2, [r3, #5]
	        if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1, &TxMailbox) == HAL_OK){
 80017b6:	4b22      	ldr	r3, [pc, #136]	; (8001840 <do_service_27+0x18c>)
 80017b8:	4a1f      	ldr	r2, [pc, #124]	; (8001838 <do_service_27+0x184>)
 80017ba:	491e      	ldr	r1, [pc, #120]	; (8001834 <do_service_27+0x180>)
 80017bc:	4821      	ldr	r0, [pc, #132]	; (8001844 <do_service_27+0x190>)
 80017be:	f001 fdd1 	bl	8003364 <HAL_CAN_AddTxMessage>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d125      	bne.n	8001814 <do_service_27+0x160>
	        	HAL_UART_Transmit(&huart1, "Service 27: Sending key\r\n" , 30, 1000);
 80017c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017cc:	221e      	movs	r2, #30
 80017ce:	491f      	ldr	r1, [pc, #124]	; (800184c <do_service_27+0x198>)
 80017d0:	4817      	ldr	r0, [pc, #92]	; (8001830 <do_service_27+0x17c>)
 80017d2:	f004 fdd0 	bl	8006376 <HAL_UART_Transmit>
	        	service_27_state = 2;
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <do_service_27+0x16c>)
 80017d8:	2202      	movs	r2, #2
 80017da:	601a      	str	r2, [r3, #0]
			break;
 80017dc:	e01a      	b.n	8001814 <do_service_27+0x160>
			if (datacheck1) {
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <do_service_27+0x170>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d018      	beq.n	8001818 <do_service_27+0x164>
				if (RxData1[0] == (0x27 + 0x40) && RxData1[1] == 0x02) {
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <do_service_27+0x174>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b67      	cmp	r3, #103	; 0x67
 80017ec:	d114      	bne.n	8001818 <do_service_27+0x164>
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <do_service_27+0x174>)
 80017f0:	785b      	ldrb	r3, [r3, #1]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d110      	bne.n	8001818 <do_service_27+0x164>
					HAL_UART_Transmit(&huart1, "Service 27: Done\r\n" , 30, 1000);
 80017f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fa:	221e      	movs	r2, #30
 80017fc:	4914      	ldr	r1, [pc, #80]	; (8001850 <do_service_27+0x19c>)
 80017fe:	480c      	ldr	r0, [pc, #48]	; (8001830 <do_service_27+0x17c>)
 8001800:	f004 fdb9 	bl	8006376 <HAL_UART_Transmit>
					service_27_state = 0;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <do_service_27+0x16c>)
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
			break;
 800180a:	e005      	b.n	8001818 <do_service_27+0x164>
			break;
 800180c:	bf00      	nop
 800180e:	e004      	b.n	800181a <do_service_27+0x166>
			break;
 8001810:	bf00      	nop
 8001812:	e002      	b.n	800181a <do_service_27+0x166>
			break;
 8001814:	bf00      	nop
 8001816:	e000      	b.n	800181a <do_service_27+0x166>
			break;
 8001818:	bf00      	nop
	}
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	2000029c 	.word	0x2000029c
 8001824:	20000294 	.word	0x20000294
 8001828:	20000288 	.word	0x20000288
 800182c:	08007ce0 	.word	0x08007ce0
 8001830:	20000208 	.word	0x20000208
 8001834:	2000024c 	.word	0x2000024c
 8001838:	20000280 	.word	0x20000280
 800183c:	08007cfc 	.word	0x08007cfc
 8001840:	20000290 	.word	0x20000290
 8001844:	20000198 	.word	0x20000198
 8001848:	40020400 	.word	0x40020400
 800184c:	08007d18 	.word	0x08007d18
 8001850:	08007d34 	.word	0x08007d34

08001854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800185a:	f001 f86b 	bl	8002934 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800185e:	f000 f84b 	bl	80018f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001862:	f000 fa43 	bl	8001cec <MX_GPIO_Init>
  MX_CAN1_Init();
 8001866:	f000 f903 	bl	8001a70 <MX_CAN1_Init>
  MX_TIM2_Init();
 800186a:	f000 f989 	bl	8001b80 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800186e:	f000 fa13 	bl	8001c98 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001872:	f000 f94f 	bl	8001b14 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001876:	f000 f8a9 	bl	80019cc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800187a:	481b      	ldr	r0, [pc, #108]	; (80018e8 <main+0x94>)
 800187c:	f004 f8fc 	bl	8005a78 <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan1);
 8001880:	481a      	ldr	r0, [pc, #104]	; (80018ec <main+0x98>)
 8001882:	f001 fd2b 	bl	80032dc <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001886:	2102      	movs	r1, #2
 8001888:	4818      	ldr	r0, [pc, #96]	; (80018ec <main+0x98>)
 800188a:	f001 ff58 	bl	800373e <HAL_CAN_ActivateNotification>
  uint8_t service = 0x27;
 800188e:	2327      	movs	r3, #39	; 0x27
 8001890:	71fb      	strb	r3, [r7, #7]
  lcd_init();
 8001892:	f7ff fb09 	bl	8000ea8 <lcd_init>
  ST7789_Init();
 8001896:	f000 fc47 	bl	8002128 <ST7789_Init>
  ST7789_Fill_Color(WHITE);
 800189a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800189e:	f000 fce1 	bl	8002264 <ST7789_Fill_Color>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer0(100);
 80018a2:	2064      	movs	r0, #100	; 0x64
 80018a4:	f000 fac6 	bl	8001e34 <setTimer0>
  while (1)
  {
	  switch (service) {
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	2b2e      	cmp	r3, #46	; 0x2e
 80018ac:	d009      	beq.n	80018c2 <main+0x6e>
 80018ae:	2b2e      	cmp	r3, #46	; 0x2e
 80018b0:	dc14      	bgt.n	80018dc <main+0x88>
 80018b2:	2b22      	cmp	r3, #34	; 0x22
 80018b4:	d002      	beq.n	80018bc <main+0x68>
 80018b6:	2b27      	cmp	r3, #39	; 0x27
 80018b8:	d006      	beq.n	80018c8 <main+0x74>
		case 0x27:
			HAL_UART_Transmit(&huart1, "Service 27: Start\r\n" , 30, 1000);
			do_service_27();
			break;
		default:
			break;
 80018ba:	e00f      	b.n	80018dc <main+0x88>
			do_service_22();
 80018bc:	f7ff fd6a 	bl	8001394 <do_service_22>
			break;
 80018c0:	e00d      	b.n	80018de <main+0x8a>
			do_service_2E();
 80018c2:	f7ff fde9 	bl	8001498 <do_service_2E>
			break;
 80018c6:	e00a      	b.n	80018de <main+0x8a>
			HAL_UART_Transmit(&huart1, "Service 27: Start\r\n" , 30, 1000);
 80018c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018cc:	221e      	movs	r2, #30
 80018ce:	4908      	ldr	r1, [pc, #32]	; (80018f0 <main+0x9c>)
 80018d0:	4808      	ldr	r0, [pc, #32]	; (80018f4 <main+0xa0>)
 80018d2:	f004 fd50 	bl	8006376 <HAL_UART_Transmit>
			do_service_27();
 80018d6:	f7ff feed 	bl	80016b4 <do_service_27>
			break;
 80018da:	e000      	b.n	80018de <main+0x8a>
			break;
 80018dc:	bf00      	nop
	  }
	  HAL_Delay(20);
 80018de:	2014      	movs	r0, #20
 80018e0:	f001 f89a 	bl	8002a18 <HAL_Delay>
	  switch (service) {
 80018e4:	e7e0      	b.n	80018a8 <main+0x54>
 80018e6:	bf00      	nop
 80018e8:	200001c0 	.word	0x200001c0
 80018ec:	20000198 	.word	0x20000198
 80018f0:	08007d48 	.word	0x08007d48
 80018f4:	20000208 	.word	0x20000208

080018f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b094      	sub	sp, #80	; 0x50
 80018fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fe:	f107 0320 	add.w	r3, r7, #32
 8001902:	2230      	movs	r2, #48	; 0x30
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f005 fd26 	bl	8007358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800190c:	f107 030c 	add.w	r3, r7, #12
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	4b28      	ldr	r3, [pc, #160]	; (80019c4 <SystemClock_Config+0xcc>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	4a27      	ldr	r2, [pc, #156]	; (80019c4 <SystemClock_Config+0xcc>)
 8001926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192a:	6413      	str	r3, [r2, #64]	; 0x40
 800192c:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <SystemClock_Config+0xcc>)
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001938:	2300      	movs	r3, #0
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <SystemClock_Config+0xd0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a21      	ldr	r2, [pc, #132]	; (80019c8 <SystemClock_Config+0xd0>)
 8001942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <SystemClock_Config+0xd0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001954:	2301      	movs	r3, #1
 8001956:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001958:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800195e:	2302      	movs	r3, #2
 8001960:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001962:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001966:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001968:	2304      	movs	r3, #4
 800196a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 800196c:	23a0      	movs	r3, #160	; 0xa0
 800196e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001970:	2302      	movs	r3, #2
 8001972:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001974:	2304      	movs	r3, #4
 8001976:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001978:	f107 0320 	add.w	r3, r7, #32
 800197c:	4618      	mov	r0, r3
 800197e:	f002 fcbf 	bl	8004300 <HAL_RCC_OscConfig>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001988:	f000 fa4e 	bl	8001e28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800198c:	230f      	movs	r3, #15
 800198e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001990:	2302      	movs	r3, #2
 8001992:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001998:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800199c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800199e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	2105      	movs	r1, #5
 80019aa:	4618      	mov	r0, r3
 80019ac:	f002 ff20 	bl	80047f0 <HAL_RCC_ClockConfig>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019b6:	f000 fa37 	bl	8001e28 <Error_Handler>
  }
}
 80019ba:	bf00      	nop
 80019bc:	3750      	adds	r7, #80	; 0x50
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40007000 	.word	0x40007000

080019cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019d2:	463b      	mov	r3, r7
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019de:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <MX_ADC1_Init+0x98>)
 80019e0:	4a21      	ldr	r2, [pc, #132]	; (8001a68 <MX_ADC1_Init+0x9c>)
 80019e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80019e4:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <MX_ADC1_Init+0x98>)
 80019e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019ec:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <MX_ADC1_Init+0x98>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80019f2:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <MX_ADC1_Init+0x98>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <MX_ADC1_Init+0x98>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019fe:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <MX_ADC1_Init+0x98>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a06:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <MX_ADC1_Init+0x98>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <MX_ADC1_Init+0x98>)
 8001a0e:	4a17      	ldr	r2, [pc, #92]	; (8001a6c <MX_ADC1_Init+0xa0>)
 8001a10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <MX_ADC1_Init+0x98>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <MX_ADC1_Init+0x98>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <MX_ADC1_Init+0x98>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <MX_ADC1_Init+0x98>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a2c:	480d      	ldr	r0, [pc, #52]	; (8001a64 <MX_ADC1_Init+0x98>)
 8001a2e:	f001 f817 	bl	8002a60 <HAL_ADC_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a38:	f000 f9f6 	bl	8001e28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001a3c:	230a      	movs	r3, #10
 8001a3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a40:	2301      	movs	r3, #1
 8001a42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a48:	463b      	mov	r3, r7
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4805      	ldr	r0, [pc, #20]	; (8001a64 <MX_ADC1_Init+0x98>)
 8001a4e:	f001 f84b 	bl	8002ae8 <HAL_ADC_ConfigChannel>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a58:	f000 f9e6 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a5c:	bf00      	nop
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000150 	.word	0x20000150
 8001a68:	40012000 	.word	0x40012000
 8001a6c:	0f000001 	.word	0x0f000001

08001a70 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	; 0x28
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001a76:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <MX_CAN1_Init+0x9c>)
 8001a78:	4a25      	ldr	r2, [pc, #148]	; (8001b10 <MX_CAN1_Init+0xa0>)
 8001a7a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001a7c:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <MX_CAN1_Init+0x9c>)
 8001a7e:	2210      	movs	r2, #16
 8001a80:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a82:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <MX_CAN1_Init+0x9c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a88:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <MX_CAN1_Init+0x9c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001a8e:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <MX_CAN1_Init+0x9c>)
 8001a90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a94:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001a96:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <MX_CAN1_Init+0x9c>)
 8001a98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a9c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a9e:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <MX_CAN1_Init+0x9c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <MX_CAN1_Init+0x9c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001aaa:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <MX_CAN1_Init+0x9c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001ab0:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <MX_CAN1_Init+0x9c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <MX_CAN1_Init+0x9c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001abc:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <MX_CAN1_Init+0x9c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001ac2:	4812      	ldr	r0, [pc, #72]	; (8001b0c <MX_CAN1_Init+0x9c>)
 8001ac4:	f001 fa2e 	bl	8002f24 <HAL_CAN_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001ace:	f000 f9ab 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 1;  // which filter bank to use from the assigned ones
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001af2:	2301      	movs	r3, #1
 8001af4:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8001af6:	2314      	movs	r3, #20
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8001afa:	463b      	mov	r3, r7
 8001afc:	4619      	mov	r1, r3
 8001afe:	4803      	ldr	r0, [pc, #12]	; (8001b0c <MX_CAN1_Init+0x9c>)
 8001b00:	f001 fb0c 	bl	800311c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	3728      	adds	r7, #40	; 0x28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000198 	.word	0x20000198
 8001b10:	40006400 	.word	0x40006400

08001b14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b18:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b1a:	4a18      	ldr	r2, [pc, #96]	; (8001b7c <MX_SPI1_Init+0x68>)
 8001b1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b26:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b34:	2202      	movs	r2, #2
 8001b36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b40:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b48:	2208      	movs	r2, #8
 8001b4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b60:	220a      	movs	r2, #10
 8001b62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b64:	4804      	ldr	r0, [pc, #16]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b66:	f003 f863 	bl	8004c30 <HAL_SPI_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b70:	f000 f95a 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200000ac 	.word	0x200000ac
 8001b7c:	40013000 	.word	0x40013000

08001b80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b80:	b5b0      	push	{r4, r5, r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b86:	f107 0308 	add.w	r3, r7, #8
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b94:	463b      	mov	r3, r7
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b9c:	4b3a      	ldr	r3, [pc, #232]	; (8001c88 <MX_TIM2_Init+0x108>)
 8001b9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ba2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001ba4:	4b38      	ldr	r3, [pc, #224]	; (8001c88 <MX_TIM2_Init+0x108>)
 8001ba6:	2263      	movs	r2, #99	; 0x63
 8001ba8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001baa:	4b37      	ldr	r3, [pc, #220]	; (8001c88 <MX_TIM2_Init+0x108>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001bb0:	4b35      	ldr	r3, [pc, #212]	; (8001c88 <MX_TIM2_Init+0x108>)
 8001bb2:	f242 720f 	movw	r2, #9999	; 0x270f
 8001bb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb8:	4b33      	ldr	r3, [pc, #204]	; (8001c88 <MX_TIM2_Init+0x108>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bbe:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <MX_TIM2_Init+0x108>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bc4:	4830      	ldr	r0, [pc, #192]	; (8001c88 <MX_TIM2_Init+0x108>)
 8001bc6:	f003 ff07 	bl	80059d8 <HAL_TIM_Base_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001bd0:	f000 f92a 	bl	8001e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bda:	f107 0308 	add.w	r3, r7, #8
 8001bde:	4619      	mov	r1, r3
 8001be0:	4829      	ldr	r0, [pc, #164]	; (8001c88 <MX_TIM2_Init+0x108>)
 8001be2:	f004 f8c1 	bl	8005d68 <HAL_TIM_ConfigClockSource>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001bec:	f000 f91c 	bl	8001e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4822      	ldr	r0, [pc, #136]	; (8001c88 <MX_TIM2_Init+0x108>)
 8001bfe:	f004 fadd 	bl	80061bc <HAL_TIMEx_MasterConfigSynchronization>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c08:	f000 f90e 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  CYCLE = 1/((160e6/(htim2.Init.Prescaler + 1))/htim2.Init.Period)*1000;
 8001c0c:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <MX_TIM2_Init+0x108>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	3301      	adds	r3, #1
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fc6e 	bl	80004f4 <__aeabi_ui2d>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	a118      	add	r1, pc, #96	; (adr r1, 8001c80 <MX_TIM2_Init+0x100>)
 8001c1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c22:	f7fe fe0b 	bl	800083c <__aeabi_ddiv>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4614      	mov	r4, r2
 8001c2c:	461d      	mov	r5, r3
 8001c2e:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <MX_TIM2_Init+0x108>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fc5e 	bl	80004f4 <__aeabi_ui2d>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	4629      	mov	r1, r5
 8001c40:	f7fe fdfc 	bl	800083c <__aeabi_ddiv>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	f04f 0000 	mov.w	r0, #0
 8001c4c:	490f      	ldr	r1, [pc, #60]	; (8001c8c <MX_TIM2_Init+0x10c>)
 8001c4e:	f7fe fdf5 	bl	800083c <__aeabi_ddiv>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <MX_TIM2_Init+0x110>)
 8001c60:	f7fe fcc2 	bl	80005e8 <__aeabi_dmul>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f7fe fece 	bl	8000a0c <__aeabi_d2iz>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4a08      	ldr	r2, [pc, #32]	; (8001c94 <MX_TIM2_Init+0x114>)
 8001c74:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 8001c76:	bf00      	nop
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	00000000 	.word	0x00000000
 8001c84:	41a312d0 	.word	0x41a312d0
 8001c88:	200001c0 	.word	0x200001c0
 8001c8c:	3ff00000 	.word	0x3ff00000
 8001c90:	408f4000 	.word	0x408f4000
 8001c94:	20000008 	.word	0x20000008

08001c98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <MX_USART1_UART_Init+0x4c>)
 8001c9e:	4a12      	ldr	r2, [pc, #72]	; (8001ce8 <MX_USART1_UART_Init+0x50>)
 8001ca0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <MX_USART1_UART_Init+0x4c>)
 8001ca4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ca8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <MX_USART1_UART_Init+0x4c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <MX_USART1_UART_Init+0x4c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <MX_USART1_UART_Init+0x4c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <MX_USART1_UART_Init+0x4c>)
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <MX_USART1_UART_Init+0x4c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <MX_USART1_UART_Init+0x4c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cce:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <MX_USART1_UART_Init+0x4c>)
 8001cd0:	f004 fb04 	bl	80062dc <HAL_UART_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cda:	f000 f8a5 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000208 	.word	0x20000208
 8001ce8:	40011000 	.word	0x40011000

08001cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	; 0x28
 8001cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	60da      	str	r2, [r3, #12]
 8001d00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	4b3a      	ldr	r3, [pc, #232]	; (8001df0 <MX_GPIO_Init+0x104>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	4a39      	ldr	r2, [pc, #228]	; (8001df0 <MX_GPIO_Init+0x104>)
 8001d0c:	f043 0304 	orr.w	r3, r3, #4
 8001d10:	6313      	str	r3, [r2, #48]	; 0x30
 8001d12:	4b37      	ldr	r3, [pc, #220]	; (8001df0 <MX_GPIO_Init+0x104>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	4b33      	ldr	r3, [pc, #204]	; (8001df0 <MX_GPIO_Init+0x104>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a32      	ldr	r2, [pc, #200]	; (8001df0 <MX_GPIO_Init+0x104>)
 8001d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b30      	ldr	r3, [pc, #192]	; (8001df0 <MX_GPIO_Init+0x104>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	4b2c      	ldr	r3, [pc, #176]	; (8001df0 <MX_GPIO_Init+0x104>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a2b      	ldr	r2, [pc, #172]	; (8001df0 <MX_GPIO_Init+0x104>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b29      	ldr	r3, [pc, #164]	; (8001df0 <MX_GPIO_Init+0x104>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	4b25      	ldr	r3, [pc, #148]	; (8001df0 <MX_GPIO_Init+0x104>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a24      	ldr	r2, [pc, #144]	; (8001df0 <MX_GPIO_Init+0x104>)
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <MX_GPIO_Init+0x104>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|LED1_Pin|GPIO_PIN_2|LED3_Pin
 8001d72:	2200      	movs	r2, #0
 8001d74:	f240 31cf 	movw	r1, #975	; 0x3cf
 8001d78:	481e      	ldr	r0, [pc, #120]	; (8001df4 <MX_GPIO_Init+0x108>)
 8001d7a:	f002 fa8d 	bl	8004298 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : CTR_Pin A_Pin B_Pin C_Pin
                           D_Pin */
  GPIO_InitStruct.Pin = CTR_Pin|A_Pin|B_Pin|C_Pin
 8001d7e:	f242 03f0 	movw	r3, #8432	; 0x20f0
 8001d82:	617b      	str	r3, [r7, #20]
                          |D_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4619      	mov	r1, r3
 8001d92:	4819      	ldr	r0, [pc, #100]	; (8001df8 <MX_GPIO_Init+0x10c>)
 8001d94:	f002 f8cc 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	4814      	ldr	r0, [pc, #80]	; (8001dfc <MX_GPIO_Init+0x110>)
 8001dac:	f002 f8c0 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin LED1_Pin PB2 LED3_Pin
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = LED_Pin|LED1_Pin|GPIO_PIN_2|LED3_Pin
 8001db0:	f240 33cf 	movw	r3, #975	; 0x3cf
 8001db4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db6:	2301      	movs	r3, #1
 8001db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	480a      	ldr	r0, [pc, #40]	; (8001df4 <MX_GPIO_Init+0x108>)
 8001dca:	f002 f8b1 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dce:	2310      	movs	r3, #16
 8001dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	4619      	mov	r1, r3
 8001de0:	4804      	ldr	r0, [pc, #16]	; (8001df4 <MX_GPIO_Init+0x108>)
 8001de2:	f002 f8a5 	bl	8003f30 <HAL_GPIO_Init>

}
 8001de6:	bf00      	nop
 8001de8:	3728      	adds	r7, #40	; 0x28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40020400 	.word	0x40020400
 8001df8:	40020800 	.word	0x40020800
 8001dfc:	40020000 	.word	0x40020000

08001e00 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d103      	bne.n	8001e1c <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		runTimer();
 8001e14:	f000 f828 	bl	8001e68 <runTimer>
		button_reading();
 8001e18:	f7ff f9d0 	bl	80011bc <button_reading>
	}
}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	200001c0 	.word	0x200001c0

08001e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e2c:	b672      	cpsid	i
}
 8001e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <Error_Handler+0x8>
	...

08001e34 <setTimer0>:
int timer2_flag = 0;
int timer2_count = 0;
int timer3_flag = 0;
int timer3_count = 0;

void setTimer0(int duration) {
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	timer0_count = duration/CYCLE;
 8001e3c:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <setTimer0+0x28>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e46:	4a06      	ldr	r2, [pc, #24]	; (8001e60 <setTimer0+0x2c>)
 8001e48:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <setTimer0+0x30>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	20000008 	.word	0x20000008
 8001e60:	200002b4 	.word	0x200002b4
 8001e64:	200002b0 	.word	0x200002b0

08001e68 <runTimer>:
void setTimer3(int duration) {
	timer3_count = duration/CYCLE;
	timer3_flag = 0;
}

void runTimer() {
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
	if (timer0_count > 0) {
 8001e6c:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <runTimer+0x90>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	dd0b      	ble.n	8001e8c <runTimer+0x24>
		timer0_count--;
 8001e74:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <runTimer+0x90>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	4a1f      	ldr	r2, [pc, #124]	; (8001ef8 <runTimer+0x90>)
 8001e7c:	6013      	str	r3, [r2, #0]
		if (timer0_count <= 0) timer0_flag = 1;
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <runTimer+0x90>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	dc02      	bgt.n	8001e8c <runTimer+0x24>
 8001e86:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <runTimer+0x94>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
	}
	if (timer1_count > 0) {
 8001e8c:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <runTimer+0x98>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	dd0b      	ble.n	8001eac <runTimer+0x44>
		timer1_count--;
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <runTimer+0x98>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	4a19      	ldr	r2, [pc, #100]	; (8001f00 <runTimer+0x98>)
 8001e9c:	6013      	str	r3, [r2, #0]
		if (timer1_count <= 0) timer1_flag = 1;
 8001e9e:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <runTimer+0x98>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	dc02      	bgt.n	8001eac <runTimer+0x44>
 8001ea6:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <runTimer+0x9c>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]
	}
	if (timer2_count > 0) {
 8001eac:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <runTimer+0xa0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	dd0b      	ble.n	8001ecc <runTimer+0x64>
		timer2_count--;
 8001eb4:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <runTimer+0xa0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	4a13      	ldr	r2, [pc, #76]	; (8001f08 <runTimer+0xa0>)
 8001ebc:	6013      	str	r3, [r2, #0]
		if (timer2_count <= 0) timer2_flag = 1;
 8001ebe:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <runTimer+0xa0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	dc02      	bgt.n	8001ecc <runTimer+0x64>
 8001ec6:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <runTimer+0xa4>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
	}
	if (timer3_count > 0) {
 8001ecc:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <runTimer+0xa8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	dd0b      	ble.n	8001eec <runTimer+0x84>
		timer3_count--;
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <runTimer+0xa8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	4a0d      	ldr	r2, [pc, #52]	; (8001f10 <runTimer+0xa8>)
 8001edc:	6013      	str	r3, [r2, #0]
		if (timer3_count <= 0) timer3_flag = 1;
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <runTimer+0xa8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	dc02      	bgt.n	8001eec <runTimer+0x84>
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <runTimer+0xac>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
	}
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	200002b4 	.word	0x200002b4
 8001efc:	200002b0 	.word	0x200002b0
 8001f00:	200002bc 	.word	0x200002bc
 8001f04:	200002b8 	.word	0x200002b8
 8001f08:	200002c4 	.word	0x200002c4
 8001f0c:	200002c0 	.word	0x200002c0
 8001f10:	200002cc 	.word	0x200002cc
 8001f14:	200002c8 	.word	0x200002c8

08001f18 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8001f22:	2200      	movs	r2, #0
 8001f24:	2180      	movs	r1, #128	; 0x80
 8001f26:	480c      	ldr	r0, [pc, #48]	; (8001f58 <ST7789_WriteCommand+0x40>)
 8001f28:	f002 f9b6 	bl	8004298 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f32:	4809      	ldr	r0, [pc, #36]	; (8001f58 <ST7789_WriteCommand+0x40>)
 8001f34:	f002 f9b0 	bl	8004298 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001f38:	1df9      	adds	r1, r7, #7
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3e:	2201      	movs	r2, #1
 8001f40:	4806      	ldr	r0, [pc, #24]	; (8001f5c <ST7789_WriteCommand+0x44>)
 8001f42:	f002 fefe 	bl	8004d42 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001f46:	2201      	movs	r2, #1
 8001f48:	2180      	movs	r1, #128	; 0x80
 8001f4a:	4803      	ldr	r0, [pc, #12]	; (8001f58 <ST7789_WriteCommand+0x40>)
 8001f4c:	f002 f9a4 	bl	8004298 <HAL_GPIO_WritePin>
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40020400 	.word	0x40020400
 8001f5c:	200000ac 	.word	0x200000ac

08001f60 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2180      	movs	r1, #128	; 0x80
 8001f6e:	4816      	ldr	r0, [pc, #88]	; (8001fc8 <ST7789_WriteData+0x68>)
 8001f70:	f002 f992 	bl	8004298 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8001f74:	2201      	movs	r2, #1
 8001f76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f7a:	4813      	ldr	r0, [pc, #76]	; (8001fc8 <ST7789_WriteData+0x68>)
 8001f7c:	f002 f98c 	bl	8004298 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8001f80:	e015      	b.n	8001fae <ST7789_WriteData+0x4e>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	bf28      	it	cs
 8001f8c:	4613      	movcs	r3, r2
 8001f8e:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8001f90:	89fa      	ldrh	r2, [r7, #14]
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	480c      	ldr	r0, [pc, #48]	; (8001fcc <ST7789_WriteData+0x6c>)
 8001f9a:	f002 fed2 	bl	8004d42 <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 8001f9e:	89fb      	ldrh	r3, [r7, #14]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8001fa6:	89fb      	ldrh	r3, [r7, #14]
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1e6      	bne.n	8001f82 <ST7789_WriteData+0x22>
	}

	ST7789_UnSelect();
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	2180      	movs	r1, #128	; 0x80
 8001fb8:	4803      	ldr	r0, [pc, #12]	; (8001fc8 <ST7789_WriteData+0x68>)
 8001fba:	f002 f96d 	bl	8004298 <HAL_GPIO_WritePin>
}
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40020400 	.word	0x40020400
 8001fcc:	200000ac 	.word	0x200000ac

08001fd0 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2180      	movs	r1, #128	; 0x80
 8001fde:	480c      	ldr	r0, [pc, #48]	; (8002010 <ST7789_WriteSmallData+0x40>)
 8001fe0:	f002 f95a 	bl	8004298 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fea:	4809      	ldr	r0, [pc, #36]	; (8002010 <ST7789_WriteSmallData+0x40>)
 8001fec:	f002 f954 	bl	8004298 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8001ff0:	1df9      	adds	r1, r7, #7
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4806      	ldr	r0, [pc, #24]	; (8002014 <ST7789_WriteSmallData+0x44>)
 8001ffa:	f002 fea2 	bl	8004d42 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001ffe:	2201      	movs	r2, #1
 8002000:	2180      	movs	r1, #128	; 0x80
 8002002:	4803      	ldr	r0, [pc, #12]	; (8002010 <ST7789_WriteSmallData+0x40>)
 8002004:	f002 f948 	bl	8004298 <HAL_GPIO_WritePin>
}
 8002008:	bf00      	nop
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40020400 	.word	0x40020400
 8002014:	200000ac 	.word	0x200000ac

08002018 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8002022:	2036      	movs	r0, #54	; 0x36
 8002024:	f7ff ff78 	bl	8001f18 <ST7789_WriteCommand>
	switch (m) {
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	2b03      	cmp	r3, #3
 800202c:	d81a      	bhi.n	8002064 <ST7789_SetRotation+0x4c>
 800202e:	a201      	add	r2, pc, #4	; (adr r2, 8002034 <ST7789_SetRotation+0x1c>)
 8002030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002034:	08002045 	.word	0x08002045
 8002038:	0800204d 	.word	0x0800204d
 800203c:	08002055 	.word	0x08002055
 8002040:	0800205d 	.word	0x0800205d
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8002044:	20c0      	movs	r0, #192	; 0xc0
 8002046:	f7ff ffc3 	bl	8001fd0 <ST7789_WriteSmallData>
		break;
 800204a:	e00c      	b.n	8002066 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 800204c:	20a0      	movs	r0, #160	; 0xa0
 800204e:	f7ff ffbf 	bl	8001fd0 <ST7789_WriteSmallData>
		break;
 8002052:	e008      	b.n	8002066 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8002054:	2000      	movs	r0, #0
 8002056:	f7ff ffbb 	bl	8001fd0 <ST7789_WriteSmallData>
		break;
 800205a:	e004      	b.n	8002066 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 800205c:	2060      	movs	r0, #96	; 0x60
 800205e:	f7ff ffb7 	bl	8001fd0 <ST7789_WriteSmallData>
		break;
 8002062:	e000      	b.n	8002066 <ST7789_SetRotation+0x4e>
	default:
		break;
 8002064:	bf00      	nop
	}
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop

08002070 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8002070:	b590      	push	{r4, r7, lr}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
 8002076:	4604      	mov	r4, r0
 8002078:	4608      	mov	r0, r1
 800207a:	4611      	mov	r1, r2
 800207c:	461a      	mov	r2, r3
 800207e:	4623      	mov	r3, r4
 8002080:	80fb      	strh	r3, [r7, #6]
 8002082:	4603      	mov	r3, r0
 8002084:	80bb      	strh	r3, [r7, #4]
 8002086:	460b      	mov	r3, r1
 8002088:	807b      	strh	r3, [r7, #2]
 800208a:	4613      	mov	r3, r2
 800208c:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800208e:	2200      	movs	r2, #0
 8002090:	2180      	movs	r1, #128	; 0x80
 8002092:	4824      	ldr	r0, [pc, #144]	; (8002124 <ST7789_SetAddressWindow+0xb4>)
 8002094:	f002 f900 	bl	8004298 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	82fb      	strh	r3, [r7, #22]
 800209c:	887b      	ldrh	r3, [r7, #2]
 800209e:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80020a0:	88bb      	ldrh	r3, [r7, #4]
 80020a2:	827b      	strh	r3, [r7, #18]
 80020a4:	883b      	ldrh	r3, [r7, #0]
 80020a6:	823b      	strh	r3, [r7, #16]

	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET);
 80020a8:	202a      	movs	r0, #42	; 0x2a
 80020aa:	f7ff ff35 	bl	8001f18 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80020ae:	8afb      	ldrh	r3, [r7, #22]
 80020b0:	0a1b      	lsrs	r3, r3, #8
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	733b      	strb	r3, [r7, #12]
 80020b8:	8afb      	ldrh	r3, [r7, #22]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	737b      	strb	r3, [r7, #13]
 80020be:	8abb      	ldrh	r3, [r7, #20]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	73bb      	strb	r3, [r7, #14]
 80020c8:	8abb      	ldrh	r3, [r7, #20]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 80020ce:	f107 030c 	add.w	r3, r7, #12
 80020d2:	2104      	movs	r1, #4
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff43 	bl	8001f60 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 80020da:	202b      	movs	r0, #43	; 0x2b
 80020dc:	f7ff ff1c 	bl	8001f18 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 80020e0:	8a7b      	ldrh	r3, [r7, #18]
 80020e2:	0a1b      	lsrs	r3, r3, #8
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	723b      	strb	r3, [r7, #8]
 80020ea:	8a7b      	ldrh	r3, [r7, #18]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	727b      	strb	r3, [r7, #9]
 80020f0:	8a3b      	ldrh	r3, [r7, #16]
 80020f2:	0a1b      	lsrs	r3, r3, #8
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	72bb      	strb	r3, [r7, #10]
 80020fa:	8a3b      	ldrh	r3, [r7, #16]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8002100:	f107 0308 	add.w	r3, r7, #8
 8002104:	2104      	movs	r1, #4
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ff2a 	bl	8001f60 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 800210c:	202c      	movs	r0, #44	; 0x2c
 800210e:	f7ff ff03 	bl	8001f18 <ST7789_WriteCommand>
	ST7789_UnSelect();
 8002112:	2201      	movs	r2, #1
 8002114:	2180      	movs	r1, #128	; 0x80
 8002116:	4803      	ldr	r0, [pc, #12]	; (8002124 <ST7789_SetAddressWindow+0xb4>)
 8002118:	f002 f8be 	bl	8004298 <HAL_GPIO_WritePin>
}
 800211c:	bf00      	nop
 800211e:	371c      	adds	r7, #28
 8002120:	46bd      	mov	sp, r7
 8002122:	bd90      	pop	{r4, r7, pc}
 8002124:	40020400 	.word	0x40020400

08002128 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b08b      	sub	sp, #44	; 0x2c
 800212c:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(25);
 800212e:	2019      	movs	r0, #25
 8002130:	f000 fc72 	bl	8002a18 <HAL_Delay>
    ST7789_RST_Clr();
 8002134:	2200      	movs	r2, #0
 8002136:	2104      	movs	r1, #4
 8002138:	4846      	ldr	r0, [pc, #280]	; (8002254 <ST7789_Init+0x12c>)
 800213a:	f002 f8ad 	bl	8004298 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 800213e:	2019      	movs	r0, #25
 8002140:	f000 fc6a 	bl	8002a18 <HAL_Delay>
    ST7789_RST_Set();
 8002144:	2201      	movs	r2, #1
 8002146:	2104      	movs	r1, #4
 8002148:	4842      	ldr	r0, [pc, #264]	; (8002254 <ST7789_Init+0x12c>)
 800214a:	f002 f8a5 	bl	8004298 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800214e:	2032      	movs	r0, #50	; 0x32
 8002150:	f000 fc62 	bl	8002a18 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8002154:	203a      	movs	r0, #58	; 0x3a
 8002156:	f7ff fedf 	bl	8001f18 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 800215a:	2055      	movs	r0, #85	; 0x55
 800215c:	f7ff ff38 	bl	8001fd0 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8002160:	20b2      	movs	r0, #178	; 0xb2
 8002162:	f7ff fed9 	bl	8001f18 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8002166:	4a3c      	ldr	r2, [pc, #240]	; (8002258 <ST7789_Init+0x130>)
 8002168:	f107 0320 	add.w	r3, r7, #32
 800216c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002170:	6018      	str	r0, [r3, #0]
 8002172:	3304      	adds	r3, #4
 8002174:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8002176:	f107 0320 	add.w	r3, r7, #32
 800217a:	2105      	movs	r1, #5
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff feef 	bl	8001f60 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8002182:	2001      	movs	r0, #1
 8002184:	f7ff ff48 	bl	8002018 <ST7789_SetRotation>

	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8002188:	20b7      	movs	r0, #183	; 0xb7
 800218a:	f7ff fec5 	bl	8001f18 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 800218e:	2035      	movs	r0, #53	; 0x35
 8002190:	f7ff ff1e 	bl	8001fd0 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8002194:	20bb      	movs	r0, #187	; 0xbb
 8002196:	f7ff febf 	bl	8001f18 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 800219a:	2019      	movs	r0, #25
 800219c:	f7ff ff18 	bl	8001fd0 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL
 80021a0:	20c0      	movs	r0, #192	; 0xc0
 80021a2:	f7ff feb9 	bl	8001f18 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 80021a6:	202c      	movs	r0, #44	; 0x2c
 80021a8:	f7ff ff12 	bl	8001fd0 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 80021ac:	20c2      	movs	r0, #194	; 0xc2
 80021ae:	f7ff feb3 	bl	8001f18 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 80021b2:	2001      	movs	r0, #1
 80021b4:	f7ff ff0c 	bl	8001fd0 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 80021b8:	20c3      	movs	r0, #195	; 0xc3
 80021ba:	f7ff fead 	bl	8001f18 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 80021be:	2012      	movs	r0, #18
 80021c0:	f7ff ff06 	bl	8001fd0 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 80021c4:	20c4      	movs	r0, #196	; 0xc4
 80021c6:	f7ff fea7 	bl	8001f18 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 80021ca:	2020      	movs	r0, #32
 80021cc:	f7ff ff00 	bl	8001fd0 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 80021d0:	20c6      	movs	r0, #198	; 0xc6
 80021d2:	f7ff fea1 	bl	8001f18 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 80021d6:	200f      	movs	r0, #15
 80021d8:	f7ff fefa 	bl	8001fd0 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 80021dc:	20d0      	movs	r0, #208	; 0xd0
 80021de:	f7ff fe9b 	bl	8001f18 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 80021e2:	20a4      	movs	r0, #164	; 0xa4
 80021e4:	f7ff fef4 	bl	8001fd0 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 80021e8:	20a1      	movs	r0, #161	; 0xa1
 80021ea:	f7ff fef1 	bl	8001fd0 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 80021ee:	20e0      	movs	r0, #224	; 0xe0
 80021f0:	f7ff fe92 	bl	8001f18 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <ST7789_Init+0x134>)
 80021f6:	f107 0410 	add.w	r4, r7, #16
 80021fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021fc:	c407      	stmia	r4!, {r0, r1, r2}
 80021fe:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8002200:	f107 0310 	add.w	r3, r7, #16
 8002204:	210e      	movs	r1, #14
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff feaa 	bl	8001f60 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 800220c:	20e1      	movs	r0, #225	; 0xe1
 800220e:	f7ff fe83 	bl	8001f18 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8002212:	4b13      	ldr	r3, [pc, #76]	; (8002260 <ST7789_Init+0x138>)
 8002214:	463c      	mov	r4, r7
 8002216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002218:	c407      	stmia	r4!, {r0, r1, r2}
 800221a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800221c:	463b      	mov	r3, r7
 800221e:	210e      	movs	r1, #14
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fe9d 	bl	8001f60 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8002226:	2021      	movs	r0, #33	; 0x21
 8002228:	f7ff fe76 	bl	8001f18 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 800222c:	2011      	movs	r0, #17
 800222e:	f7ff fe73 	bl	8001f18 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8002232:	2013      	movs	r0, #19
 8002234:	f7ff fe70 	bl	8001f18 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on
 8002238:	2029      	movs	r0, #41	; 0x29
 800223a:	f7ff fe6d 	bl	8001f18 <ST7789_WriteCommand>

	HAL_Delay(50);
 800223e:	2032      	movs	r0, #50	; 0x32
 8002240:	f000 fbea 	bl	8002a18 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8002244:	2000      	movs	r0, #0
 8002246:	f000 f80d 	bl	8002264 <ST7789_Fill_Color>
}
 800224a:	bf00      	nop
 800224c:	372c      	adds	r7, #44	; 0x2c
 800224e:	46bd      	mov	sp, r7
 8002250:	bd90      	pop	{r4, r7, pc}
 8002252:	bf00      	nop
 8002254:	40020400 	.word	0x40020400
 8002258:	08007d5c 	.word	0x08007d5c
 800225c:	08007d64 	.word	0x08007d64
 8002260:	08007d74 	.word	0x08007d74

08002264 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 800226e:	23ef      	movs	r3, #239	; 0xef
 8002270:	f240 123f 	movw	r2, #319	; 0x13f
 8002274:	2100      	movs	r1, #0
 8002276:	2000      	movs	r0, #0
 8002278:	f7ff fefa 	bl	8002070 <ST7789_SetAddressWindow>
	ST7789_Select();
 800227c:	2200      	movs	r2, #0
 800227e:	2180      	movs	r1, #128	; 0x80
 8002280:	4816      	ldr	r0, [pc, #88]	; (80022dc <ST7789_Fill_Color+0x78>)
 8002282:	f002 f809 	bl	8004298 <HAL_GPIO_WritePin>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 8002286:	2300      	movs	r3, #0
 8002288:	81fb      	strh	r3, [r7, #14]
 800228a:	e019      	b.n	80022c0 <ST7789_Fill_Color+0x5c>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 800228c:	2300      	movs	r3, #0
 800228e:	81bb      	strh	r3, [r7, #12]
 8002290:	e010      	b.n	80022b4 <ST7789_Fill_Color+0x50>
					uint8_t data[] = {color >> 8, color & 0xFF};
 8002292:	88fb      	ldrh	r3, [r7, #6]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	b29b      	uxth	r3, r3
 8002298:	b2db      	uxtb	r3, r3
 800229a:	723b      	strb	r3, [r7, #8]
 800229c:	88fb      	ldrh	r3, [r7, #6]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 80022a2:	f107 0308 	add.w	r3, r7, #8
 80022a6:	2102      	movs	r1, #2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fe59 	bl	8001f60 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80022ae:	89bb      	ldrh	r3, [r7, #12]
 80022b0:	3301      	adds	r3, #1
 80022b2:	81bb      	strh	r3, [r7, #12]
 80022b4:	89bb      	ldrh	r3, [r7, #12]
 80022b6:	2bef      	cmp	r3, #239	; 0xef
 80022b8:	d9eb      	bls.n	8002292 <ST7789_Fill_Color+0x2e>
		for (i = 0; i < ST7789_WIDTH; i++)
 80022ba:	89fb      	ldrh	r3, [r7, #14]
 80022bc:	3301      	adds	r3, #1
 80022be:	81fb      	strh	r3, [r7, #14]
 80022c0:	89fb      	ldrh	r3, [r7, #14]
 80022c2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80022c6:	d3e1      	bcc.n	800228c <ST7789_Fill_Color+0x28>
				}
	#endif
	ST7789_UnSelect();
 80022c8:	2201      	movs	r2, #1
 80022ca:	2180      	movs	r1, #128	; 0x80
 80022cc:	4803      	ldr	r0, [pc, #12]	; (80022dc <ST7789_Fill_Color+0x78>)
 80022ce:	f001 ffe3 	bl	8004298 <HAL_GPIO_WritePin>
}
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40020400 	.word	0x40020400

080022e0 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80022e0:	b082      	sub	sp, #8
 80022e2:	b590      	push	{r4, r7, lr}
 80022e4:	b089      	sub	sp, #36	; 0x24
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	637b      	str	r3, [r7, #52]	; 0x34
 80022ea:	4603      	mov	r3, r0
 80022ec:	80fb      	strh	r3, [r7, #6]
 80022ee:	460b      	mov	r3, r1
 80022f0:	80bb      	strh	r3, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 80022f6:	2200      	movs	r2, #0
 80022f8:	2180      	movs	r1, #128	; 0x80
 80022fa:	4838      	ldr	r0, [pc, #224]	; (80023dc <ST7789_WriteChar+0xfc>)
 80022fc:	f001 ffcc 	bl	8004298 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8002300:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002304:	b29a      	uxth	r2, r3
 8002306:	88fb      	ldrh	r3, [r7, #6]
 8002308:	4413      	add	r3, r2
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b29c      	uxth	r4, r3
 8002310:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002314:	b29a      	uxth	r2, r3
 8002316:	88bb      	ldrh	r3, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	b29b      	uxth	r3, r3
 800231c:	3b01      	subs	r3, #1
 800231e:	b29b      	uxth	r3, r3
 8002320:	88b9      	ldrh	r1, [r7, #4]
 8002322:	88f8      	ldrh	r0, [r7, #6]
 8002324:	4622      	mov	r2, r4
 8002326:	f7ff fea3 	bl	8002070 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
 800232e:	e043      	b.n	80023b8 <ST7789_WriteChar+0xd8>
		b = font.data[(ch - 32) * font.height + i];
 8002330:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002332:	78fb      	ldrb	r3, [r7, #3]
 8002334:	3b20      	subs	r3, #32
 8002336:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	4619      	mov	r1, r3
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	440b      	add	r3, r1
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	4413      	add	r3, r2
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 800234c:	2300      	movs	r3, #0
 800234e:	61bb      	str	r3, [r7, #24]
 8002350:	e029      	b.n	80023a6 <ST7789_WriteChar+0xc6>
			if ((b << j) & 0x8000) {
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00e      	beq.n	8002380 <ST7789_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8002362:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002364:	0a1b      	lsrs	r3, r3, #8
 8002366:	b29b      	uxth	r3, r3
 8002368:	b2db      	uxtb	r3, r3
 800236a:	743b      	strb	r3, [r7, #16]
 800236c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800236e:	b2db      	uxtb	r3, r3
 8002370:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8002372:	f107 0310 	add.w	r3, r7, #16
 8002376:	2102      	movs	r1, #2
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fdf1 	bl	8001f60 <ST7789_WriteData>
 800237e:	e00f      	b.n	80023a0 <ST7789_WriteChar+0xc0>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8002380:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002384:	0a1b      	lsrs	r3, r3, #8
 8002386:	b29b      	uxth	r3, r3
 8002388:	b2db      	uxtb	r3, r3
 800238a:	733b      	strb	r3, [r7, #12]
 800238c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002390:	b2db      	uxtb	r3, r3
 8002392:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8002394:	f107 030c 	add.w	r3, r7, #12
 8002398:	2102      	movs	r1, #2
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff fde0 	bl	8001f60 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	3301      	adds	r3, #1
 80023a4:	61bb      	str	r3, [r7, #24]
 80023a6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80023aa:	461a      	mov	r2, r3
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d3cf      	bcc.n	8002352 <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3301      	adds	r3, #1
 80023b6:	61fb      	str	r3, [r7, #28]
 80023b8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80023bc:	461a      	mov	r2, r3
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d3b5      	bcc.n	8002330 <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 80023c4:	2201      	movs	r2, #1
 80023c6:	2180      	movs	r1, #128	; 0x80
 80023c8:	4804      	ldr	r0, [pc, #16]	; (80023dc <ST7789_WriteChar+0xfc>)
 80023ca:	f001 ff65 	bl	8004298 <HAL_GPIO_WritePin>
}
 80023ce:	bf00      	nop
 80023d0:	3724      	adds	r7, #36	; 0x24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80023d8:	b002      	add	sp, #8
 80023da:	4770      	bx	lr
 80023dc:	40020400 	.word	0x40020400

080023e0 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80023e0:	b082      	sub	sp, #8
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b086      	sub	sp, #24
 80023e6:	af04      	add	r7, sp, #16
 80023e8:	603a      	str	r2, [r7, #0]
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	4603      	mov	r3, r0
 80023ee:	80fb      	strh	r3, [r7, #6]
 80023f0:	460b      	mov	r3, r1
 80023f2:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 80023f4:	2200      	movs	r2, #0
 80023f6:	2180      	movs	r1, #128	; 0x80
 80023f8:	4822      	ldr	r0, [pc, #136]	; (8002484 <ST7789_WriteString+0xa4>)
 80023fa:	f001 ff4d 	bl	8004298 <HAL_GPIO_WritePin>
	while (*str) {
 80023fe:	e02e      	b.n	800245e <ST7789_WriteString+0x7e>
		if (x + font.width >= ST7789_WIDTH) {
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	7d3a      	ldrb	r2, [r7, #20]
 8002404:	4413      	add	r3, r2
 8002406:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800240a:	db13      	blt.n	8002434 <ST7789_WriteString+0x54>
			x = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8002410:	7d7b      	ldrb	r3, [r7, #21]
 8002412:	b29a      	uxth	r2, r3
 8002414:	88bb      	ldrh	r3, [r7, #4]
 8002416:	4413      	add	r3, r2
 8002418:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 800241a:	88bb      	ldrh	r3, [r7, #4]
 800241c:	7d7a      	ldrb	r2, [r7, #21]
 800241e:	4413      	add	r3, r2
 8002420:	2bef      	cmp	r3, #239	; 0xef
 8002422:	dc21      	bgt.n	8002468 <ST7789_WriteString+0x88>
				break;
			}

			if (*str == ' ') {
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b20      	cmp	r3, #32
 800242a:	d103      	bne.n	8002434 <ST7789_WriteString+0x54>
				// skip spaces in the beginning of the new line
				str++;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	3301      	adds	r3, #1
 8002430:	603b      	str	r3, [r7, #0]
				continue;
 8002432:	e014      	b.n	800245e <ST7789_WriteString+0x7e>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	781a      	ldrb	r2, [r3, #0]
 8002438:	88b9      	ldrh	r1, [r7, #4]
 800243a:	88f8      	ldrh	r0, [r7, #6]
 800243c:	8c3b      	ldrh	r3, [r7, #32]
 800243e:	9302      	str	r3, [sp, #8]
 8002440:	8bbb      	ldrh	r3, [r7, #28]
 8002442:	9301      	str	r3, [sp, #4]
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f7ff ff49 	bl	80022e0 <ST7789_WriteChar>
		x += font.width;
 800244e:	7d3b      	ldrb	r3, [r7, #20]
 8002450:	b29a      	uxth	r2, r3
 8002452:	88fb      	ldrh	r3, [r7, #6]
 8002454:	4413      	add	r3, r2
 8002456:	80fb      	strh	r3, [r7, #6]
		str++;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	3301      	adds	r3, #1
 800245c:	603b      	str	r3, [r7, #0]
	while (*str) {
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1cc      	bne.n	8002400 <ST7789_WriteString+0x20>
 8002466:	e000      	b.n	800246a <ST7789_WriteString+0x8a>
				break;
 8002468:	bf00      	nop
	}
	ST7789_UnSelect();
 800246a:	2201      	movs	r2, #1
 800246c:	2180      	movs	r1, #128	; 0x80
 800246e:	4805      	ldr	r0, [pc, #20]	; (8002484 <ST7789_WriteString+0xa4>)
 8002470:	f001 ff12 	bl	8004298 <HAL_GPIO_WritePin>
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800247e:	b002      	add	sp, #8
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40020400 	.word	0x40020400

08002488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	607b      	str	r3, [r7, #4]
 8002492:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <HAL_MspInit+0x4c>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	4a0f      	ldr	r2, [pc, #60]	; (80024d4 <HAL_MspInit+0x4c>)
 8002498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800249c:	6453      	str	r3, [r2, #68]	; 0x44
 800249e:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <HAL_MspInit+0x4c>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	603b      	str	r3, [r7, #0]
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <HAL_MspInit+0x4c>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	4a08      	ldr	r2, [pc, #32]	; (80024d4 <HAL_MspInit+0x4c>)
 80024b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_MspInit+0x4c>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40023800 	.word	0x40023800

080024d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08a      	sub	sp, #40	; 0x28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a17      	ldr	r2, [pc, #92]	; (8002554 <HAL_ADC_MspInit+0x7c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d127      	bne.n	800254a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	4b16      	ldr	r3, [pc, #88]	; (8002558 <HAL_ADC_MspInit+0x80>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	4a15      	ldr	r2, [pc, #84]	; (8002558 <HAL_ADC_MspInit+0x80>)
 8002504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002508:	6453      	str	r3, [r2, #68]	; 0x44
 800250a:	4b13      	ldr	r3, [pc, #76]	; (8002558 <HAL_ADC_MspInit+0x80>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <HAL_ADC_MspInit+0x80>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a0e      	ldr	r2, [pc, #56]	; (8002558 <HAL_ADC_MspInit+0x80>)
 8002520:	f043 0304 	orr.w	r3, r3, #4
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <HAL_ADC_MspInit+0x80>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002532:	2301      	movs	r3, #1
 8002534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002536:	2303      	movs	r3, #3
 8002538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800253e:	f107 0314 	add.w	r3, r7, #20
 8002542:	4619      	mov	r1, r3
 8002544:	4805      	ldr	r0, [pc, #20]	; (800255c <HAL_ADC_MspInit+0x84>)
 8002546:	f001 fcf3 	bl	8003f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800254a:	bf00      	nop
 800254c:	3728      	adds	r7, #40	; 0x28
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40012000 	.word	0x40012000
 8002558:	40023800 	.word	0x40023800
 800255c:	40020800 	.word	0x40020800

08002560 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08a      	sub	sp, #40	; 0x28
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a1d      	ldr	r2, [pc, #116]	; (80025f4 <HAL_CAN_MspInit+0x94>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d134      	bne.n	80025ec <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	4b1c      	ldr	r3, [pc, #112]	; (80025f8 <HAL_CAN_MspInit+0x98>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	4a1b      	ldr	r2, [pc, #108]	; (80025f8 <HAL_CAN_MspInit+0x98>)
 800258c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002590:	6413      	str	r3, [r2, #64]	; 0x40
 8002592:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <HAL_CAN_MspInit+0x98>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <HAL_CAN_MspInit+0x98>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	4a14      	ldr	r2, [pc, #80]	; (80025f8 <HAL_CAN_MspInit+0x98>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6313      	str	r3, [r2, #48]	; 0x30
 80025ae:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <HAL_CAN_MspInit+0x98>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80025ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80025be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025c4:	2301      	movs	r3, #1
 80025c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c8:	2303      	movs	r3, #3
 80025ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80025cc:	2309      	movs	r3, #9
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	4619      	mov	r1, r3
 80025d6:	4809      	ldr	r0, [pc, #36]	; (80025fc <HAL_CAN_MspInit+0x9c>)
 80025d8:	f001 fcaa 	bl	8003f30 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80025dc:	2200      	movs	r2, #0
 80025de:	2100      	movs	r1, #0
 80025e0:	2014      	movs	r0, #20
 80025e2:	f001 fbdc 	bl	8003d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80025e6:	2014      	movs	r0, #20
 80025e8:	f001 fbf5 	bl	8003dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80025ec:	bf00      	nop
 80025ee:	3728      	adds	r7, #40	; 0x28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40006400 	.word	0x40006400
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40020000 	.word	0x40020000

08002600 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08a      	sub	sp, #40	; 0x28
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002608:	f107 0314 	add.w	r3, r7, #20
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a25      	ldr	r2, [pc, #148]	; (80026b4 <HAL_SPI_MspInit+0xb4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d143      	bne.n	80026aa <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <HAL_SPI_MspInit+0xb8>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	4a23      	ldr	r2, [pc, #140]	; (80026b8 <HAL_SPI_MspInit+0xb8>)
 800262c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002630:	6453      	str	r3, [r2, #68]	; 0x44
 8002632:	4b21      	ldr	r3, [pc, #132]	; (80026b8 <HAL_SPI_MspInit+0xb8>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <HAL_SPI_MspInit+0xb8>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	4a1c      	ldr	r2, [pc, #112]	; (80026b8 <HAL_SPI_MspInit+0xb8>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6313      	str	r3, [r2, #48]	; 0x30
 800264e:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <HAL_SPI_MspInit+0xb8>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800265a:	2310      	movs	r3, #16
 800265c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002666:	2303      	movs	r3, #3
 8002668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800266a:	2305      	movs	r3, #5
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266e:	f107 0314 	add.w	r3, r7, #20
 8002672:	4619      	mov	r1, r3
 8002674:	4811      	ldr	r0, [pc, #68]	; (80026bc <HAL_SPI_MspInit+0xbc>)
 8002676:	f001 fc5b 	bl	8003f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800267a:	23e0      	movs	r3, #224	; 0xe0
 800267c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267e:	2302      	movs	r3, #2
 8002680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002682:	2301      	movs	r3, #1
 8002684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002686:	2303      	movs	r3, #3
 8002688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800268a:	2305      	movs	r3, #5
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268e:	f107 0314 	add.w	r3, r7, #20
 8002692:	4619      	mov	r1, r3
 8002694:	4809      	ldr	r0, [pc, #36]	; (80026bc <HAL_SPI_MspInit+0xbc>)
 8002696:	f001 fc4b 	bl	8003f30 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	2100      	movs	r1, #0
 800269e:	2023      	movs	r0, #35	; 0x23
 80026a0:	f001 fb7d 	bl	8003d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80026a4:	2023      	movs	r0, #35	; 0x23
 80026a6:	f001 fb96 	bl	8003dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026aa:	bf00      	nop
 80026ac:	3728      	adds	r7, #40	; 0x28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40013000 	.word	0x40013000
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40020000 	.word	0x40020000

080026c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d0:	d115      	bne.n	80026fe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <HAL_TIM_Base_MspInit+0x48>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	4a0b      	ldr	r2, [pc, #44]	; (8002708 <HAL_TIM_Base_MspInit+0x48>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6413      	str	r3, [r2, #64]	; 0x40
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <HAL_TIM_Base_MspInit+0x48>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026ee:	2200      	movs	r2, #0
 80026f0:	2100      	movs	r1, #0
 80026f2:	201c      	movs	r0, #28
 80026f4:	f001 fb53 	bl	8003d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026f8:	201c      	movs	r0, #28
 80026fa:	f001 fb6c 	bl	8003dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800

0800270c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b08a      	sub	sp, #40	; 0x28
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002714:	f107 0314 	add.w	r3, r7, #20
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	60da      	str	r2, [r3, #12]
 8002722:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a1d      	ldr	r2, [pc, #116]	; (80027a0 <HAL_UART_MspInit+0x94>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d134      	bne.n	8002798 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <HAL_UART_MspInit+0x98>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	4a1b      	ldr	r2, [pc, #108]	; (80027a4 <HAL_UART_MspInit+0x98>)
 8002738:	f043 0310 	orr.w	r3, r3, #16
 800273c:	6453      	str	r3, [r2, #68]	; 0x44
 800273e:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <HAL_UART_MspInit+0x98>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <HAL_UART_MspInit+0x98>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	4a14      	ldr	r2, [pc, #80]	; (80027a4 <HAL_UART_MspInit+0x98>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	6313      	str	r3, [r2, #48]	; 0x30
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_UART_MspInit+0x98>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002766:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800276a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	2302      	movs	r3, #2
 800276e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002774:	2303      	movs	r3, #3
 8002776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002778:	2307      	movs	r3, #7
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277c:	f107 0314 	add.w	r3, r7, #20
 8002780:	4619      	mov	r1, r3
 8002782:	4809      	ldr	r0, [pc, #36]	; (80027a8 <HAL_UART_MspInit+0x9c>)
 8002784:	f001 fbd4 	bl	8003f30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002788:	2200      	movs	r2, #0
 800278a:	2100      	movs	r1, #0
 800278c:	2025      	movs	r0, #37	; 0x25
 800278e:	f001 fb06 	bl	8003d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002792:	2025      	movs	r0, #37	; 0x25
 8002794:	f001 fb1f 	bl	8003dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002798:	bf00      	nop
 800279a:	3728      	adds	r7, #40	; 0x28
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40011000 	.word	0x40011000
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40020000 	.word	0x40020000

080027ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027b0:	e7fe      	b.n	80027b0 <NMI_Handler+0x4>

080027b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027b6:	e7fe      	b.n	80027b6 <HardFault_Handler+0x4>

080027b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027bc:	e7fe      	b.n	80027bc <MemManage_Handler+0x4>

080027be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027be:	b480      	push	{r7}
 80027c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027c2:	e7fe      	b.n	80027c2 <BusFault_Handler+0x4>

080027c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027c8:	e7fe      	b.n	80027c8 <UsageFault_Handler+0x4>

080027ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ca:	b480      	push	{r7}
 80027cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027f8:	f000 f8ee 	bl	80029d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}

08002800 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002804:	4802      	ldr	r0, [pc, #8]	; (8002810 <CAN1_RX0_IRQHandler+0x10>)
 8002806:	f000 ffc0 	bl	800378a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000198 	.word	0x20000198

08002814 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002818:	4802      	ldr	r0, [pc, #8]	; (8002824 <TIM2_IRQHandler+0x10>)
 800281a:	f003 f99d 	bl	8005b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	200001c0 	.word	0x200001c0

08002828 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800282c:	4802      	ldr	r0, [pc, #8]	; (8002838 <SPI1_IRQHandler+0x10>)
 800282e:	f002 fe77 	bl	8005520 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	200000ac 	.word	0x200000ac

0800283c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002840:	4802      	ldr	r0, [pc, #8]	; (800284c <USART1_IRQHandler+0x10>)
 8002842:	f003 fe2b 	bl	800649c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20000208 	.word	0x20000208

08002850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002858:	4a14      	ldr	r2, [pc, #80]	; (80028ac <_sbrk+0x5c>)
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <_sbrk+0x60>)
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002864:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <_sbrk+0x64>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d102      	bne.n	8002872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800286c:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <_sbrk+0x64>)
 800286e:	4a12      	ldr	r2, [pc, #72]	; (80028b8 <_sbrk+0x68>)
 8002870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <_sbrk+0x64>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4413      	add	r3, r2
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	429a      	cmp	r2, r3
 800287e:	d207      	bcs.n	8002890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002880:	f004 fd40 	bl	8007304 <__errno>
 8002884:	4603      	mov	r3, r0
 8002886:	220c      	movs	r2, #12
 8002888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800288a:	f04f 33ff 	mov.w	r3, #4294967295
 800288e:	e009      	b.n	80028a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002890:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <_sbrk+0x64>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002896:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <_sbrk+0x64>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	4a05      	ldr	r2, [pc, #20]	; (80028b4 <_sbrk+0x64>)
 80028a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028a2:	68fb      	ldr	r3, [r7, #12]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20020000 	.word	0x20020000
 80028b0:	00000400 	.word	0x00000400
 80028b4:	200002d0 	.word	0x200002d0
 80028b8:	200002e8 	.word	0x200002e8

080028bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <SystemInit+0x20>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c6:	4a05      	ldr	r2, [pc, #20]	; (80028dc <SystemInit+0x20>)
 80028c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002918 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028e4:	480d      	ldr	r0, [pc, #52]	; (800291c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028e6:	490e      	ldr	r1, [pc, #56]	; (8002920 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028e8:	4a0e      	ldr	r2, [pc, #56]	; (8002924 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028ec:	e002      	b.n	80028f4 <LoopCopyDataInit>

080028ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028f2:	3304      	adds	r3, #4

080028f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f8:	d3f9      	bcc.n	80028ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028fa:	4a0b      	ldr	r2, [pc, #44]	; (8002928 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028fc:	4c0b      	ldr	r4, [pc, #44]	; (800292c <LoopFillZerobss+0x26>)
  movs r3, #0
 80028fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002900:	e001      	b.n	8002906 <LoopFillZerobss>

08002902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002904:	3204      	adds	r2, #4

08002906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002908:	d3fb      	bcc.n	8002902 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800290a:	f7ff ffd7 	bl	80028bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800290e:	f004 fcff 	bl	8007310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002912:	f7fe ff9f 	bl	8001854 <main>
  bx  lr    
 8002916:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002918:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800291c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002920:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002924:	08008bac 	.word	0x08008bac
  ldr r2, =_sbss
 8002928:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800292c:	200002e8 	.word	0x200002e8

08002930 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002930:	e7fe      	b.n	8002930 <ADC_IRQHandler>
	...

08002934 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002938:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <HAL_Init+0x40>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a0d      	ldr	r2, [pc, #52]	; (8002974 <HAL_Init+0x40>)
 800293e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002942:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_Init+0x40>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a0a      	ldr	r2, [pc, #40]	; (8002974 <HAL_Init+0x40>)
 800294a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800294e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <HAL_Init+0x40>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a07      	ldr	r2, [pc, #28]	; (8002974 <HAL_Init+0x40>)
 8002956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800295c:	2003      	movs	r0, #3
 800295e:	f001 fa13 	bl	8003d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002962:	200f      	movs	r0, #15
 8002964:	f000 f808 	bl	8002978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002968:	f7ff fd8e 	bl	8002488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40023c00 	.word	0x40023c00

08002978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002980:	4b12      	ldr	r3, [pc, #72]	; (80029cc <HAL_InitTick+0x54>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <HAL_InitTick+0x58>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	4619      	mov	r1, r3
 800298a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800298e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002992:	fbb2 f3f3 	udiv	r3, r2, r3
 8002996:	4618      	mov	r0, r3
 8002998:	f001 fa2b 	bl	8003df2 <HAL_SYSTICK_Config>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e00e      	b.n	80029c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b0f      	cmp	r3, #15
 80029aa:	d80a      	bhi.n	80029c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029ac:	2200      	movs	r2, #0
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	f04f 30ff 	mov.w	r0, #4294967295
 80029b4:	f001 f9f3 	bl	8003d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029b8:	4a06      	ldr	r2, [pc, #24]	; (80029d4 <HAL_InitTick+0x5c>)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	e000      	b.n	80029c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	2000000c 	.word	0x2000000c
 80029d0:	20000014 	.word	0x20000014
 80029d4:	20000010 	.word	0x20000010

080029d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_IncTick+0x20>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_IncTick+0x24>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4413      	add	r3, r2
 80029e8:	4a04      	ldr	r2, [pc, #16]	; (80029fc <HAL_IncTick+0x24>)
 80029ea:	6013      	str	r3, [r2, #0]
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	20000014 	.word	0x20000014
 80029fc:	200002d4 	.word	0x200002d4

08002a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return uwTick;
 8002a04:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <HAL_GetTick+0x14>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	200002d4 	.word	0x200002d4

08002a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a20:	f7ff ffee 	bl	8002a00 <HAL_GetTick>
 8002a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a30:	d005      	beq.n	8002a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a32:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <HAL_Delay+0x44>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a3e:	bf00      	nop
 8002a40:	f7ff ffde 	bl	8002a00 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d8f7      	bhi.n	8002a40 <HAL_Delay+0x28>
  {
  }
}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000014 	.word	0x20000014

08002a60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e033      	b.n	8002ade <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d109      	bne.n	8002a92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff fd2a 	bl	80024d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	f003 0310 	and.w	r3, r3, #16
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d118      	bne.n	8002ad0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002aa6:	f023 0302 	bic.w	r3, r3, #2
 8002aaa:	f043 0202 	orr.w	r2, r3, #2
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f93a 	bl	8002d2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f023 0303 	bic.w	r3, r3, #3
 8002ac6:	f043 0201 	orr.w	r2, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40
 8002ace:	e001      	b.n	8002ad4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x1c>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e105      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x228>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b09      	cmp	r3, #9
 8002b12:	d925      	bls.n	8002b60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68d9      	ldr	r1, [r3, #12]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	461a      	mov	r2, r3
 8002b22:	4613      	mov	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	4413      	add	r3, r2
 8002b28:	3b1e      	subs	r3, #30
 8002b2a:	2207      	movs	r2, #7
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43da      	mvns	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	400a      	ands	r2, r1
 8002b38:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68d9      	ldr	r1, [r3, #12]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4403      	add	r3, r0
 8002b52:	3b1e      	subs	r3, #30
 8002b54:	409a      	lsls	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	60da      	str	r2, [r3, #12]
 8002b5e:	e022      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6919      	ldr	r1, [r3, #16]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4613      	mov	r3, r2
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4413      	add	r3, r2
 8002b74:	2207      	movs	r2, #7
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	400a      	ands	r2, r1
 8002b82:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6919      	ldr	r1, [r3, #16]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	4618      	mov	r0, r3
 8002b96:	4603      	mov	r3, r0
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	4403      	add	r3, r0
 8002b9c:	409a      	lsls	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b06      	cmp	r3, #6
 8002bac:	d824      	bhi.n	8002bf8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3b05      	subs	r3, #5
 8002bc0:	221f      	movs	r2, #31
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43da      	mvns	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	400a      	ands	r2, r1
 8002bce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	4618      	mov	r0, r3
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	3b05      	subs	r3, #5
 8002bea:	fa00 f203 	lsl.w	r2, r0, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	635a      	str	r2, [r3, #52]	; 0x34
 8002bf6:	e04c      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b0c      	cmp	r3, #12
 8002bfe:	d824      	bhi.n	8002c4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	3b23      	subs	r3, #35	; 0x23
 8002c12:	221f      	movs	r2, #31
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43da      	mvns	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	400a      	ands	r2, r1
 8002c20:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	4618      	mov	r0, r3
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	3b23      	subs	r3, #35	; 0x23
 8002c3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30
 8002c48:	e023      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	3b41      	subs	r3, #65	; 0x41
 8002c5c:	221f      	movs	r2, #31
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43da      	mvns	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	400a      	ands	r2, r1
 8002c6a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	4618      	mov	r0, r3
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	3b41      	subs	r3, #65	; 0x41
 8002c86:	fa00 f203 	lsl.w	r2, r0, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c92:	4b22      	ldr	r3, [pc, #136]	; (8002d1c <HAL_ADC_ConfigChannel+0x234>)
 8002c94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a21      	ldr	r2, [pc, #132]	; (8002d20 <HAL_ADC_ConfigChannel+0x238>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d109      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x1cc>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b12      	cmp	r3, #18
 8002ca6:	d105      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a19      	ldr	r2, [pc, #100]	; (8002d20 <HAL_ADC_ConfigChannel+0x238>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d123      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x21e>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2b10      	cmp	r3, #16
 8002cc4:	d003      	beq.n	8002cce <HAL_ADC_ConfigChannel+0x1e6>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b11      	cmp	r3, #17
 8002ccc:	d11b      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b10      	cmp	r3, #16
 8002ce0:	d111      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ce2:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <HAL_ADC_ConfigChannel+0x23c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a10      	ldr	r2, [pc, #64]	; (8002d28 <HAL_ADC_ConfigChannel+0x240>)
 8002ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cec:	0c9a      	lsrs	r2, r3, #18
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cf8:	e002      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f9      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	40012300 	.word	0x40012300
 8002d20:	40012000 	.word	0x40012000
 8002d24:	2000000c 	.word	0x2000000c
 8002d28:	431bde83 	.word	0x431bde83

08002d2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d34:	4b79      	ldr	r3, [pc, #484]	; (8002f1c <ADC_Init+0x1f0>)
 8002d36:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6859      	ldr	r1, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	021a      	lsls	r2, r3, #8
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6859      	ldr	r1, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002da6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6899      	ldr	r1, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	4a58      	ldr	r2, [pc, #352]	; (8002f20 <ADC_Init+0x1f4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d022      	beq.n	8002e0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6899      	ldr	r1, [r3, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002df4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6899      	ldr	r1, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	e00f      	b.n	8002e2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0202 	bic.w	r2, r2, #2
 8002e38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6899      	ldr	r1, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	7e1b      	ldrb	r3, [r3, #24]
 8002e44:	005a      	lsls	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d01b      	beq.n	8002e90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6859      	ldr	r1, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	3b01      	subs	r3, #1
 8002e84:	035a      	lsls	r2, r3, #13
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	e007      	b.n	8002ea0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002eae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	051a      	lsls	r2, r3, #20
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ed4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6899      	ldr	r1, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ee2:	025a      	lsls	r2, r3, #9
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002efa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6899      	ldr	r1, [r3, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	029a      	lsls	r2, r3, #10
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	609a      	str	r2, [r3, #8]
}
 8002f10:	bf00      	nop
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	40012300 	.word	0x40012300
 8002f20:	0f000001 	.word	0x0f000001

08002f24 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e0ed      	b.n	8003112 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d102      	bne.n	8002f48 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff fb0c 	bl	8002560 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f58:	f7ff fd52 	bl	8002a00 <HAL_GetTick>
 8002f5c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f5e:	e012      	b.n	8002f86 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f60:	f7ff fd4e 	bl	8002a00 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b0a      	cmp	r3, #10
 8002f6c:	d90b      	bls.n	8002f86 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2205      	movs	r2, #5
 8002f7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e0c5      	b.n	8003112 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0e5      	beq.n	8002f60 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0202 	bic.w	r2, r2, #2
 8002fa2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fa4:	f7ff fd2c 	bl	8002a00 <HAL_GetTick>
 8002fa8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002faa:	e012      	b.n	8002fd2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002fac:	f7ff fd28 	bl	8002a00 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b0a      	cmp	r3, #10
 8002fb8:	d90b      	bls.n	8002fd2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2205      	movs	r2, #5
 8002fca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e09f      	b.n	8003112 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1e5      	bne.n	8002fac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	7e1b      	ldrb	r3, [r3, #24]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d108      	bne.n	8002ffa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	e007      	b.n	800300a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003008:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	7e5b      	ldrb	r3, [r3, #25]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d108      	bne.n	8003024 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	e007      	b.n	8003034 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003032:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	7e9b      	ldrb	r3, [r3, #26]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d108      	bne.n	800304e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0220 	orr.w	r2, r2, #32
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	e007      	b.n	800305e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0220 	bic.w	r2, r2, #32
 800305c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	7edb      	ldrb	r3, [r3, #27]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d108      	bne.n	8003078 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0210 	bic.w	r2, r2, #16
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	e007      	b.n	8003088 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0210 	orr.w	r2, r2, #16
 8003086:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	7f1b      	ldrb	r3, [r3, #28]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d108      	bne.n	80030a2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0208 	orr.w	r2, r2, #8
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	e007      	b.n	80030b2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0208 	bic.w	r2, r2, #8
 80030b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	7f5b      	ldrb	r3, [r3, #29]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d108      	bne.n	80030cc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0204 	orr.w	r2, r2, #4
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	e007      	b.n	80030dc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0204 	bic.w	r2, r2, #4
 80030da:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	ea42 0103 	orr.w	r1, r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	1e5a      	subs	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003132:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003134:	7cfb      	ldrb	r3, [r7, #19]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d003      	beq.n	8003142 <HAL_CAN_ConfigFilter+0x26>
 800313a:	7cfb      	ldrb	r3, [r7, #19]
 800313c:	2b02      	cmp	r3, #2
 800313e:	f040 80be 	bne.w	80032be <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003142:	4b65      	ldr	r3, [pc, #404]	; (80032d8 <HAL_CAN_ConfigFilter+0x1bc>)
 8003144:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800314c:	f043 0201 	orr.w	r2, r3, #1
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800315c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	021b      	lsls	r3, r3, #8
 8003172:	431a      	orrs	r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	f003 031f 	and.w	r3, r3, #31
 8003182:	2201      	movs	r2, #1
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	43db      	mvns	r3, r3
 8003194:	401a      	ands	r2, r3
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d123      	bne.n	80031ec <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	43db      	mvns	r3, r3
 80031ae:	401a      	ands	r2, r3
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80031c6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	3248      	adds	r2, #72	; 0x48
 80031cc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031e0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031e2:	6979      	ldr	r1, [r7, #20]
 80031e4:	3348      	adds	r3, #72	; 0x48
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	440b      	add	r3, r1
 80031ea:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d122      	bne.n	800323a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	431a      	orrs	r2, r3
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003214:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	3248      	adds	r2, #72	; 0x48
 800321a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800322e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003230:	6979      	ldr	r1, [r7, #20]
 8003232:	3348      	adds	r3, #72	; 0x48
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	440b      	add	r3, r1
 8003238:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d109      	bne.n	8003256 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	43db      	mvns	r3, r3
 800324c:	401a      	ands	r2, r3
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003254:	e007      	b.n	8003266 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	431a      	orrs	r2, r3
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	43db      	mvns	r3, r3
 8003278:	401a      	ands	r2, r3
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003280:	e007      	b.n	8003292 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	431a      	orrs	r2, r3
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d107      	bne.n	80032aa <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80032b0:	f023 0201 	bic.w	r2, r3, #1
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	e006      	b.n	80032cc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
  }
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	371c      	adds	r7, #28
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	40006400 	.word	0x40006400

080032dc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d12e      	bne.n	800334e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0201 	bic.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003308:	f7ff fb7a 	bl	8002a00 <HAL_GetTick>
 800330c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800330e:	e012      	b.n	8003336 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003310:	f7ff fb76 	bl	8002a00 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b0a      	cmp	r3, #10
 800331c:	d90b      	bls.n	8003336 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2205      	movs	r2, #5
 800332e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e012      	b.n	800335c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1e5      	bne.n	8003310 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	e006      	b.n	800335c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
  }
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003364:	b480      	push	{r7}
 8003366:	b089      	sub	sp, #36	; 0x24
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003378:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003382:	7ffb      	ldrb	r3, [r7, #31]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d003      	beq.n	8003390 <HAL_CAN_AddTxMessage+0x2c>
 8003388:	7ffb      	ldrb	r3, [r7, #31]
 800338a:	2b02      	cmp	r3, #2
 800338c:	f040 80b8 	bne.w	8003500 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10a      	bne.n	80033b0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d105      	bne.n	80033b0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 80a0 	beq.w	80034f0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	0e1b      	lsrs	r3, r3, #24
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d907      	bls.n	80033d0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e09e      	b.n	800350e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80033d0:	2201      	movs	r2, #1
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	409a      	lsls	r2, r3
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10d      	bne.n	80033fe <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80033ec:	68f9      	ldr	r1, [r7, #12]
 80033ee:	6809      	ldr	r1, [r1, #0]
 80033f0:	431a      	orrs	r2, r3
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	3318      	adds	r3, #24
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	440b      	add	r3, r1
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	e00f      	b.n	800341e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003408:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800340e:	68f9      	ldr	r1, [r7, #12]
 8003410:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003412:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	3318      	adds	r3, #24
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	440b      	add	r3, r1
 800341c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6819      	ldr	r1, [r3, #0]
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	691a      	ldr	r2, [r3, #16]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	3318      	adds	r3, #24
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	440b      	add	r3, r1
 800342e:	3304      	adds	r3, #4
 8003430:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	7d1b      	ldrb	r3, [r3, #20]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d111      	bne.n	800345e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	3318      	adds	r3, #24
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	4413      	add	r3, r2
 8003446:	3304      	adds	r3, #4
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	6811      	ldr	r1, [r2, #0]
 800344e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	3318      	adds	r3, #24
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	440b      	add	r3, r1
 800345a:	3304      	adds	r3, #4
 800345c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	3307      	adds	r3, #7
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	061a      	lsls	r2, r3, #24
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3306      	adds	r3, #6
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	041b      	lsls	r3, r3, #16
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3305      	adds	r3, #5
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	021b      	lsls	r3, r3, #8
 8003478:	4313      	orrs	r3, r2
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	3204      	adds	r2, #4
 800347e:	7812      	ldrb	r2, [r2, #0]
 8003480:	4610      	mov	r0, r2
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	6811      	ldr	r1, [r2, #0]
 8003486:	ea43 0200 	orr.w	r2, r3, r0
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	440b      	add	r3, r1
 8003490:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003494:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3303      	adds	r3, #3
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	061a      	lsls	r2, r3, #24
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3302      	adds	r3, #2
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	041b      	lsls	r3, r3, #16
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3301      	adds	r3, #1
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	021b      	lsls	r3, r3, #8
 80034b0:	4313      	orrs	r3, r2
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	7812      	ldrb	r2, [r2, #0]
 80034b6:	4610      	mov	r0, r2
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	6811      	ldr	r1, [r2, #0]
 80034bc:	ea43 0200 	orr.w	r2, r3, r0
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	440b      	add	r3, r1
 80034c6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80034ca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	3318      	adds	r3, #24
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	4413      	add	r3, r2
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	6811      	ldr	r1, [r2, #0]
 80034de:	f043 0201 	orr.w	r2, r3, #1
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	3318      	adds	r3, #24
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	440b      	add	r3, r1
 80034ea:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	e00e      	b.n	800350e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e006      	b.n	800350e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
  }
}
 800350e:	4618      	mov	r0, r3
 8003510:	3724      	adds	r7, #36	; 0x24
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800351a:	b480      	push	{r7}
 800351c:	b087      	sub	sp, #28
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800352e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003530:	7dfb      	ldrb	r3, [r7, #23]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d003      	beq.n	800353e <HAL_CAN_GetRxMessage+0x24>
 8003536:	7dfb      	ldrb	r3, [r7, #23]
 8003538:	2b02      	cmp	r3, #2
 800353a:	f040 80f3 	bne.w	8003724 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10e      	bne.n	8003562 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d116      	bne.n	8003580 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e0e7      	b.n	8003732 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d107      	bne.n	8003580 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e0d8      	b.n	8003732 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	331b      	adds	r3, #27
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	4413      	add	r3, r2
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0204 	and.w	r2, r3, #4
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10c      	bne.n	80035b8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	331b      	adds	r3, #27
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	4413      	add	r3, r2
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	0d5b      	lsrs	r3, r3, #21
 80035ae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	e00b      	b.n	80035d0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	331b      	adds	r3, #27
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	4413      	add	r3, r2
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	08db      	lsrs	r3, r3, #3
 80035c8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	331b      	adds	r3, #27
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	4413      	add	r3, r2
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0202 	and.w	r2, r3, #2
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	331b      	adds	r3, #27
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	4413      	add	r3, r2
 80035f2:	3304      	adds	r3, #4
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 020f 	and.w	r2, r3, #15
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	331b      	adds	r3, #27
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	4413      	add	r3, r2
 800360a:	3304      	adds	r3, #4
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	0a1b      	lsrs	r3, r3, #8
 8003610:	b2da      	uxtb	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	331b      	adds	r3, #27
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	4413      	add	r3, r2
 8003622:	3304      	adds	r3, #4
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	0c1b      	lsrs	r3, r3, #16
 8003628:	b29a      	uxth	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	4413      	add	r3, r2
 8003638:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	b2da      	uxtb	r2, r3
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	4413      	add	r3, r2
 800364e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	0a1a      	lsrs	r2, r3, #8
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	3301      	adds	r3, #1
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	4413      	add	r3, r2
 8003668:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	0c1a      	lsrs	r2, r3, #16
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	3302      	adds	r3, #2
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	4413      	add	r3, r2
 8003682:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	0e1a      	lsrs	r2, r3, #24
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	3303      	adds	r3, #3
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	4413      	add	r3, r2
 800369c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	3304      	adds	r3, #4
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	0a1a      	lsrs	r2, r3, #8
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	3305      	adds	r3, #5
 80036c0:	b2d2      	uxtb	r2, r2
 80036c2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	0c1a      	lsrs	r2, r3, #16
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	3306      	adds	r3, #6
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	0e1a      	lsrs	r2, r3, #24
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	3307      	adds	r3, #7
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d108      	bne.n	8003710 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0220 	orr.w	r2, r2, #32
 800370c:	60da      	str	r2, [r3, #12]
 800370e:	e007      	b.n	8003720 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0220 	orr.w	r2, r2, #32
 800371e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	e006      	b.n	8003732 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
  }
}
 8003732:	4618      	mov	r0, r3
 8003734:	371c      	adds	r7, #28
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800373e:	b480      	push	{r7}
 8003740:	b085      	sub	sp, #20
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800374e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d002      	beq.n	800375c <HAL_CAN_ActivateNotification+0x1e>
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	2b02      	cmp	r3, #2
 800375a:	d109      	bne.n	8003770 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6959      	ldr	r1, [r3, #20]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	e006      	b.n	800377e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
  }
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b08a      	sub	sp, #40	; 0x28
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003792:	2300      	movs	r3, #0
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d07c      	beq.n	80038ca <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d023      	beq.n	8003822 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2201      	movs	r2, #1
 80037e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f983 	bl	8003af8 <HAL_CAN_TxMailbox0CompleteCallback>
 80037f2:	e016      	b.n	8003822 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d004      	beq.n	8003808 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
 8003806:	e00c      	b.n	8003822 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d004      	beq.n	800381c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
 800381a:	e002      	b.n	8003822 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f989 	bl	8003b34 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d024      	beq.n	8003876 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003834:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f963 	bl	8003b0c <HAL_CAN_TxMailbox1CompleteCallback>
 8003846:	e016      	b.n	8003876 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800384e:	2b00      	cmp	r3, #0
 8003850:	d004      	beq.n	800385c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
 800385a:	e00c      	b.n	8003876 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003862:	2b00      	cmp	r3, #0
 8003864:	d004      	beq.n	8003870 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
 800386e:	e002      	b.n	8003876 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f969 	bl	8003b48 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d024      	beq.n	80038ca <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003888:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f943 	bl	8003b20 <HAL_CAN_TxMailbox2CompleteCallback>
 800389a:	e016      	b.n	80038ca <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d004      	beq.n	80038b0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
 80038ae:	e00c      	b.n	80038ca <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d004      	beq.n	80038c4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
 80038c2:	e002      	b.n	80038ca <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f949 	bl	8003b5c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00c      	beq.n	80038ee <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f003 0310 	and.w	r3, r3, #16
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d007      	beq.n	80038ee <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2210      	movs	r2, #16
 80038ec:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00b      	beq.n	8003910 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d006      	beq.n	8003910 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2208      	movs	r2, #8
 8003908:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f930 	bl	8003b70 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d009      	beq.n	800392e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7fd fd15 	bl	8001358 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00c      	beq.n	8003952 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f003 0310 	and.w	r3, r3, #16
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003948:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2210      	movs	r2, #16
 8003950:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	f003 0320 	and.w	r3, r3, #32
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00b      	beq.n	8003974 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d006      	beq.n	8003974 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2208      	movs	r2, #8
 800396c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f912 	bl	8003b98 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	2b00      	cmp	r3, #0
 800397c:	d009      	beq.n	8003992 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	f003 0303 	and.w	r3, r3, #3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f8f9 	bl	8003b84 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00b      	beq.n	80039b4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f003 0310 	and.w	r3, r3, #16
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d006      	beq.n	80039b4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2210      	movs	r2, #16
 80039ac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f8fc 	bl	8003bac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00b      	beq.n	80039d6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d006      	beq.n	80039d6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2208      	movs	r2, #8
 80039ce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f8f5 	bl	8003bc0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d07b      	beq.n	8003ad8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d072      	beq.n	8003ad0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d008      	beq.n	8003a06 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	f043 0302 	orr.w	r3, r3, #2
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d008      	beq.n	8003a3e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	f043 0304 	orr.w	r3, r3, #4
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d043      	beq.n	8003ad0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d03e      	beq.n	8003ad0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a58:	2b60      	cmp	r3, #96	; 0x60
 8003a5a:	d02b      	beq.n	8003ab4 <HAL_CAN_IRQHandler+0x32a>
 8003a5c:	2b60      	cmp	r3, #96	; 0x60
 8003a5e:	d82e      	bhi.n	8003abe <HAL_CAN_IRQHandler+0x334>
 8003a60:	2b50      	cmp	r3, #80	; 0x50
 8003a62:	d022      	beq.n	8003aaa <HAL_CAN_IRQHandler+0x320>
 8003a64:	2b50      	cmp	r3, #80	; 0x50
 8003a66:	d82a      	bhi.n	8003abe <HAL_CAN_IRQHandler+0x334>
 8003a68:	2b40      	cmp	r3, #64	; 0x40
 8003a6a:	d019      	beq.n	8003aa0 <HAL_CAN_IRQHandler+0x316>
 8003a6c:	2b40      	cmp	r3, #64	; 0x40
 8003a6e:	d826      	bhi.n	8003abe <HAL_CAN_IRQHandler+0x334>
 8003a70:	2b30      	cmp	r3, #48	; 0x30
 8003a72:	d010      	beq.n	8003a96 <HAL_CAN_IRQHandler+0x30c>
 8003a74:	2b30      	cmp	r3, #48	; 0x30
 8003a76:	d822      	bhi.n	8003abe <HAL_CAN_IRQHandler+0x334>
 8003a78:	2b10      	cmp	r3, #16
 8003a7a:	d002      	beq.n	8003a82 <HAL_CAN_IRQHandler+0x2f8>
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	d005      	beq.n	8003a8c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003a80:	e01d      	b.n	8003abe <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	f043 0308 	orr.w	r3, r3, #8
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a8a:	e019      	b.n	8003ac0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	f043 0310 	orr.w	r3, r3, #16
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a94:	e014      	b.n	8003ac0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	f043 0320 	orr.w	r3, r3, #32
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a9e:	e00f      	b.n	8003ac0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003aa8:	e00a      	b.n	8003ac0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ab2:	e005      	b.n	8003ac0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003abc:	e000      	b.n	8003ac0 <HAL_CAN_IRQHandler+0x336>
            break;
 8003abe:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699a      	ldr	r2, [r3, #24]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ace:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2204      	movs	r2, #4
 8003ad6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d008      	beq.n	8003af0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f872 	bl	8003bd4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003af0:	bf00      	nop
 8003af2:	3728      	adds	r7, #40	; 0x28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <__NVIC_SetPriorityGrouping+0x44>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c04:	4013      	ands	r3, r2
 8003c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c1a:	4a04      	ldr	r2, [pc, #16]	; (8003c2c <__NVIC_SetPriorityGrouping+0x44>)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	60d3      	str	r3, [r2, #12]
}
 8003c20:	bf00      	nop
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	e000ed00 	.word	0xe000ed00

08003c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c34:	4b04      	ldr	r3, [pc, #16]	; (8003c48 <__NVIC_GetPriorityGrouping+0x18>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	0a1b      	lsrs	r3, r3, #8
 8003c3a:	f003 0307 	and.w	r3, r3, #7
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	e000ed00 	.word	0xe000ed00

08003c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	db0b      	blt.n	8003c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	f003 021f 	and.w	r2, r3, #31
 8003c64:	4907      	ldr	r1, [pc, #28]	; (8003c84 <__NVIC_EnableIRQ+0x38>)
 8003c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	e000e100 	.word	0xe000e100

08003c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	6039      	str	r1, [r7, #0]
 8003c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	db0a      	blt.n	8003cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	490c      	ldr	r1, [pc, #48]	; (8003cd4 <__NVIC_SetPriority+0x4c>)
 8003ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca6:	0112      	lsls	r2, r2, #4
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	440b      	add	r3, r1
 8003cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cb0:	e00a      	b.n	8003cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	4908      	ldr	r1, [pc, #32]	; (8003cd8 <__NVIC_SetPriority+0x50>)
 8003cb8:	79fb      	ldrb	r3, [r7, #7]
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	3b04      	subs	r3, #4
 8003cc0:	0112      	lsls	r2, r2, #4
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	761a      	strb	r2, [r3, #24]
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	e000e100 	.word	0xe000e100
 8003cd8:	e000ed00 	.word	0xe000ed00

08003cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b089      	sub	sp, #36	; 0x24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f1c3 0307 	rsb	r3, r3, #7
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	bf28      	it	cs
 8003cfa:	2304      	movcs	r3, #4
 8003cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	3304      	adds	r3, #4
 8003d02:	2b06      	cmp	r3, #6
 8003d04:	d902      	bls.n	8003d0c <NVIC_EncodePriority+0x30>
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	3b03      	subs	r3, #3
 8003d0a:	e000      	b.n	8003d0e <NVIC_EncodePriority+0x32>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d10:	f04f 32ff 	mov.w	r2, #4294967295
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	43da      	mvns	r2, r3
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	401a      	ands	r2, r3
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d24:	f04f 31ff 	mov.w	r1, #4294967295
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2e:	43d9      	mvns	r1, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d34:	4313      	orrs	r3, r2
         );
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3724      	adds	r7, #36	; 0x24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
	...

08003d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d54:	d301      	bcc.n	8003d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d56:	2301      	movs	r3, #1
 8003d58:	e00f      	b.n	8003d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d5a:	4a0a      	ldr	r2, [pc, #40]	; (8003d84 <SysTick_Config+0x40>)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d62:	210f      	movs	r1, #15
 8003d64:	f04f 30ff 	mov.w	r0, #4294967295
 8003d68:	f7ff ff8e 	bl	8003c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d6c:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <SysTick_Config+0x40>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d72:	4b04      	ldr	r3, [pc, #16]	; (8003d84 <SysTick_Config+0x40>)
 8003d74:	2207      	movs	r2, #7
 8003d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	e000e010 	.word	0xe000e010

08003d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff ff29 	bl	8003be8 <__NVIC_SetPriorityGrouping>
}
 8003d96:	bf00      	nop
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b086      	sub	sp, #24
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	4603      	mov	r3, r0
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	607a      	str	r2, [r7, #4]
 8003daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003db0:	f7ff ff3e 	bl	8003c30 <__NVIC_GetPriorityGrouping>
 8003db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	6978      	ldr	r0, [r7, #20]
 8003dbc:	f7ff ff8e 	bl	8003cdc <NVIC_EncodePriority>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff ff5d 	bl	8003c88 <__NVIC_SetPriority>
}
 8003dce:	bf00      	nop
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b082      	sub	sp, #8
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	4603      	mov	r3, r0
 8003dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff ff31 	bl	8003c4c <__NVIC_EnableIRQ>
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b082      	sub	sp, #8
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff ffa2 	bl	8003d44 <SysTick_Config>
 8003e00:	4603      	mov	r3, r0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b084      	sub	sp, #16
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e16:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e18:	f7fe fdf2 	bl	8002a00 <HAL_GetTick>
 8003e1c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d008      	beq.n	8003e3c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2280      	movs	r2, #128	; 0x80
 8003e2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e052      	b.n	8003ee2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0216 	bic.w	r2, r2, #22
 8003e4a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695a      	ldr	r2, [r3, #20]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e5a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d103      	bne.n	8003e6c <HAL_DMA_Abort+0x62>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d007      	beq.n	8003e7c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0208 	bic.w	r2, r2, #8
 8003e7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0201 	bic.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e8c:	e013      	b.n	8003eb6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e8e:	f7fe fdb7 	bl	8002a00 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b05      	cmp	r3, #5
 8003e9a:	d90c      	bls.n	8003eb6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e015      	b.n	8003ee2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e4      	bne.n	8003e8e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec8:	223f      	movs	r2, #63	; 0x3f
 8003eca:	409a      	lsls	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d004      	beq.n	8003f08 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2280      	movs	r2, #128	; 0x80
 8003f02:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e00c      	b.n	8003f22 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2205      	movs	r2, #5
 8003f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0201 	bic.w	r2, r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
	...

08003f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b089      	sub	sp, #36	; 0x24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f46:	2300      	movs	r3, #0
 8003f48:	61fb      	str	r3, [r7, #28]
 8003f4a:	e16b      	b.n	8004224 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	f040 815a 	bne.w	800421e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d005      	beq.n	8003f82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d130      	bne.n	8003fe4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	2203      	movs	r2, #3
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	43db      	mvns	r3, r3
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	4013      	ands	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fb8:	2201      	movs	r2, #1
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	091b      	lsrs	r3, r3, #4
 8003fce:	f003 0201 	and.w	r2, r3, #1
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f003 0303 	and.w	r3, r3, #3
 8003fec:	2b03      	cmp	r3, #3
 8003fee:	d017      	beq.n	8004020 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	2203      	movs	r2, #3
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	43db      	mvns	r3, r3
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	4013      	ands	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	4313      	orrs	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f003 0303 	and.w	r3, r3, #3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d123      	bne.n	8004074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	08da      	lsrs	r2, r3, #3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3208      	adds	r2, #8
 8004034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	220f      	movs	r2, #15
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	43db      	mvns	r3, r3
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4013      	ands	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4313      	orrs	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	08da      	lsrs	r2, r3, #3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3208      	adds	r2, #8
 800406e:	69b9      	ldr	r1, [r7, #24]
 8004070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	2203      	movs	r2, #3
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	43db      	mvns	r3, r3
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4013      	ands	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f003 0203 	and.w	r2, r3, #3
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	4313      	orrs	r3, r2
 80040a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 80b4 	beq.w	800421e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	4b60      	ldr	r3, [pc, #384]	; (800423c <HAL_GPIO_Init+0x30c>)
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	4a5f      	ldr	r2, [pc, #380]	; (800423c <HAL_GPIO_Init+0x30c>)
 80040c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040c4:	6453      	str	r3, [r2, #68]	; 0x44
 80040c6:	4b5d      	ldr	r3, [pc, #372]	; (800423c <HAL_GPIO_Init+0x30c>)
 80040c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040d2:	4a5b      	ldr	r2, [pc, #364]	; (8004240 <HAL_GPIO_Init+0x310>)
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	089b      	lsrs	r3, r3, #2
 80040d8:	3302      	adds	r3, #2
 80040da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	220f      	movs	r2, #15
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43db      	mvns	r3, r3
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	4013      	ands	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a52      	ldr	r2, [pc, #328]	; (8004244 <HAL_GPIO_Init+0x314>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d02b      	beq.n	8004156 <HAL_GPIO_Init+0x226>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a51      	ldr	r2, [pc, #324]	; (8004248 <HAL_GPIO_Init+0x318>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d025      	beq.n	8004152 <HAL_GPIO_Init+0x222>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a50      	ldr	r2, [pc, #320]	; (800424c <HAL_GPIO_Init+0x31c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d01f      	beq.n	800414e <HAL_GPIO_Init+0x21e>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a4f      	ldr	r2, [pc, #316]	; (8004250 <HAL_GPIO_Init+0x320>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d019      	beq.n	800414a <HAL_GPIO_Init+0x21a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a4e      	ldr	r2, [pc, #312]	; (8004254 <HAL_GPIO_Init+0x324>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d013      	beq.n	8004146 <HAL_GPIO_Init+0x216>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a4d      	ldr	r2, [pc, #308]	; (8004258 <HAL_GPIO_Init+0x328>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00d      	beq.n	8004142 <HAL_GPIO_Init+0x212>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a4c      	ldr	r2, [pc, #304]	; (800425c <HAL_GPIO_Init+0x32c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d007      	beq.n	800413e <HAL_GPIO_Init+0x20e>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a4b      	ldr	r2, [pc, #300]	; (8004260 <HAL_GPIO_Init+0x330>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d101      	bne.n	800413a <HAL_GPIO_Init+0x20a>
 8004136:	2307      	movs	r3, #7
 8004138:	e00e      	b.n	8004158 <HAL_GPIO_Init+0x228>
 800413a:	2308      	movs	r3, #8
 800413c:	e00c      	b.n	8004158 <HAL_GPIO_Init+0x228>
 800413e:	2306      	movs	r3, #6
 8004140:	e00a      	b.n	8004158 <HAL_GPIO_Init+0x228>
 8004142:	2305      	movs	r3, #5
 8004144:	e008      	b.n	8004158 <HAL_GPIO_Init+0x228>
 8004146:	2304      	movs	r3, #4
 8004148:	e006      	b.n	8004158 <HAL_GPIO_Init+0x228>
 800414a:	2303      	movs	r3, #3
 800414c:	e004      	b.n	8004158 <HAL_GPIO_Init+0x228>
 800414e:	2302      	movs	r3, #2
 8004150:	e002      	b.n	8004158 <HAL_GPIO_Init+0x228>
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <HAL_GPIO_Init+0x228>
 8004156:	2300      	movs	r3, #0
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	f002 0203 	and.w	r2, r2, #3
 800415e:	0092      	lsls	r2, r2, #2
 8004160:	4093      	lsls	r3, r2
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	4313      	orrs	r3, r2
 8004166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004168:	4935      	ldr	r1, [pc, #212]	; (8004240 <HAL_GPIO_Init+0x310>)
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	089b      	lsrs	r3, r3, #2
 800416e:	3302      	adds	r3, #2
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004176:	4b3b      	ldr	r3, [pc, #236]	; (8004264 <HAL_GPIO_Init+0x334>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	43db      	mvns	r3, r3
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	4013      	ands	r3, r2
 8004184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800419a:	4a32      	ldr	r2, [pc, #200]	; (8004264 <HAL_GPIO_Init+0x334>)
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041a0:	4b30      	ldr	r3, [pc, #192]	; (8004264 <HAL_GPIO_Init+0x334>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	43db      	mvns	r3, r3
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	4013      	ands	r3, r2
 80041ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041c4:	4a27      	ldr	r2, [pc, #156]	; (8004264 <HAL_GPIO_Init+0x334>)
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041ca:	4b26      	ldr	r3, [pc, #152]	; (8004264 <HAL_GPIO_Init+0x334>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	43db      	mvns	r3, r3
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	4013      	ands	r3, r2
 80041d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041ee:	4a1d      	ldr	r2, [pc, #116]	; (8004264 <HAL_GPIO_Init+0x334>)
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041f4:	4b1b      	ldr	r3, [pc, #108]	; (8004264 <HAL_GPIO_Init+0x334>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	43db      	mvns	r3, r3
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	4013      	ands	r3, r2
 8004202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004218:	4a12      	ldr	r2, [pc, #72]	; (8004264 <HAL_GPIO_Init+0x334>)
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	3301      	adds	r3, #1
 8004222:	61fb      	str	r3, [r7, #28]
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	2b0f      	cmp	r3, #15
 8004228:	f67f ae90 	bls.w	8003f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800422c:	bf00      	nop
 800422e:	bf00      	nop
 8004230:	3724      	adds	r7, #36	; 0x24
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40023800 	.word	0x40023800
 8004240:	40013800 	.word	0x40013800
 8004244:	40020000 	.word	0x40020000
 8004248:	40020400 	.word	0x40020400
 800424c:	40020800 	.word	0x40020800
 8004250:	40020c00 	.word	0x40020c00
 8004254:	40021000 	.word	0x40021000
 8004258:	40021400 	.word	0x40021400
 800425c:	40021800 	.word	0x40021800
 8004260:	40021c00 	.word	0x40021c00
 8004264:	40013c00 	.word	0x40013c00

08004268 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	460b      	mov	r3, r1
 8004272:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	887b      	ldrh	r3, [r7, #2]
 800427a:	4013      	ands	r3, r2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004280:	2301      	movs	r3, #1
 8004282:	73fb      	strb	r3, [r7, #15]
 8004284:	e001      	b.n	800428a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004286:	2300      	movs	r3, #0
 8004288:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800428a:	7bfb      	ldrb	r3, [r7, #15]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	460b      	mov	r3, r1
 80042a2:	807b      	strh	r3, [r7, #2]
 80042a4:	4613      	mov	r3, r2
 80042a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042a8:	787b      	ldrb	r3, [r7, #1]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042ae:	887a      	ldrh	r2, [r7, #2]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042b4:	e003      	b.n	80042be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042b6:	887b      	ldrh	r3, [r7, #2]
 80042b8:	041a      	lsls	r2, r3, #16
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	619a      	str	r2, [r3, #24]
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b085      	sub	sp, #20
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
 80042d2:	460b      	mov	r3, r1
 80042d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042dc:	887a      	ldrh	r2, [r7, #2]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4013      	ands	r3, r2
 80042e2:	041a      	lsls	r2, r3, #16
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	43d9      	mvns	r1, r3
 80042e8:	887b      	ldrh	r3, [r7, #2]
 80042ea:	400b      	ands	r3, r1
 80042ec:	431a      	orrs	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	619a      	str	r2, [r3, #24]
}
 80042f2:	bf00      	nop
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
	...

08004300 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e267      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d075      	beq.n	800440a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800431e:	4b88      	ldr	r3, [pc, #544]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
 8004326:	2b04      	cmp	r3, #4
 8004328:	d00c      	beq.n	8004344 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800432a:	4b85      	ldr	r3, [pc, #532]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004332:	2b08      	cmp	r3, #8
 8004334:	d112      	bne.n	800435c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004336:	4b82      	ldr	r3, [pc, #520]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004342:	d10b      	bne.n	800435c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004344:	4b7e      	ldr	r3, [pc, #504]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d05b      	beq.n	8004408 <HAL_RCC_OscConfig+0x108>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d157      	bne.n	8004408 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e242      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004364:	d106      	bne.n	8004374 <HAL_RCC_OscConfig+0x74>
 8004366:	4b76      	ldr	r3, [pc, #472]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a75      	ldr	r2, [pc, #468]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 800436c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	e01d      	b.n	80043b0 <HAL_RCC_OscConfig+0xb0>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800437c:	d10c      	bne.n	8004398 <HAL_RCC_OscConfig+0x98>
 800437e:	4b70      	ldr	r3, [pc, #448]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a6f      	ldr	r2, [pc, #444]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	4b6d      	ldr	r3, [pc, #436]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a6c      	ldr	r2, [pc, #432]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	e00b      	b.n	80043b0 <HAL_RCC_OscConfig+0xb0>
 8004398:	4b69      	ldr	r3, [pc, #420]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a68      	ldr	r2, [pc, #416]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 800439e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	4b66      	ldr	r3, [pc, #408]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a65      	ldr	r2, [pc, #404]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 80043aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d013      	beq.n	80043e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b8:	f7fe fb22 	bl	8002a00 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043c0:	f7fe fb1e 	bl	8002a00 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b64      	cmp	r3, #100	; 0x64
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e207      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d2:	4b5b      	ldr	r3, [pc, #364]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0xc0>
 80043de:	e014      	b.n	800440a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e0:	f7fe fb0e 	bl	8002a00 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043e8:	f7fe fb0a 	bl	8002a00 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b64      	cmp	r3, #100	; 0x64
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e1f3      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043fa:	4b51      	ldr	r3, [pc, #324]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f0      	bne.n	80043e8 <HAL_RCC_OscConfig+0xe8>
 8004406:	e000      	b.n	800440a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d063      	beq.n	80044de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004416:	4b4a      	ldr	r3, [pc, #296]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 030c 	and.w	r3, r3, #12
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00b      	beq.n	800443a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004422:	4b47      	ldr	r3, [pc, #284]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800442a:	2b08      	cmp	r3, #8
 800442c:	d11c      	bne.n	8004468 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800442e:	4b44      	ldr	r3, [pc, #272]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d116      	bne.n	8004468 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800443a:	4b41      	ldr	r3, [pc, #260]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d005      	beq.n	8004452 <HAL_RCC_OscConfig+0x152>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d001      	beq.n	8004452 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e1c7      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004452:	4b3b      	ldr	r3, [pc, #236]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	4937      	ldr	r1, [pc, #220]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004462:	4313      	orrs	r3, r2
 8004464:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004466:	e03a      	b.n	80044de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d020      	beq.n	80044b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004470:	4b34      	ldr	r3, [pc, #208]	; (8004544 <HAL_RCC_OscConfig+0x244>)
 8004472:	2201      	movs	r2, #1
 8004474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004476:	f7fe fac3 	bl	8002a00 <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800447e:	f7fe fabf 	bl	8002a00 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e1a8      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004490:	4b2b      	ldr	r3, [pc, #172]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0f0      	beq.n	800447e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449c:	4b28      	ldr	r3, [pc, #160]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	4925      	ldr	r1, [pc, #148]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	600b      	str	r3, [r1, #0]
 80044b0:	e015      	b.n	80044de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044b2:	4b24      	ldr	r3, [pc, #144]	; (8004544 <HAL_RCC_OscConfig+0x244>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b8:	f7fe faa2 	bl	8002a00 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044c0:	f7fe fa9e 	bl	8002a00 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e187      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044d2:	4b1b      	ldr	r3, [pc, #108]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1f0      	bne.n	80044c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d036      	beq.n	8004558 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d016      	beq.n	8004520 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044f2:	4b15      	ldr	r3, [pc, #84]	; (8004548 <HAL_RCC_OscConfig+0x248>)
 80044f4:	2201      	movs	r2, #1
 80044f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f8:	f7fe fa82 	bl	8002a00 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004500:	f7fe fa7e 	bl	8002a00 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e167      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004512:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <HAL_RCC_OscConfig+0x240>)
 8004514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCC_OscConfig+0x200>
 800451e:	e01b      	b.n	8004558 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004520:	4b09      	ldr	r3, [pc, #36]	; (8004548 <HAL_RCC_OscConfig+0x248>)
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004526:	f7fe fa6b 	bl	8002a00 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800452c:	e00e      	b.n	800454c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800452e:	f7fe fa67 	bl	8002a00 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d907      	bls.n	800454c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e150      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
 8004540:	40023800 	.word	0x40023800
 8004544:	42470000 	.word	0x42470000
 8004548:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800454c:	4b88      	ldr	r3, [pc, #544]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800454e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1ea      	bne.n	800452e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 8097 	beq.w	8004694 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004566:	2300      	movs	r3, #0
 8004568:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800456a:	4b81      	ldr	r3, [pc, #516]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10f      	bne.n	8004596 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004576:	2300      	movs	r3, #0
 8004578:	60bb      	str	r3, [r7, #8]
 800457a:	4b7d      	ldr	r3, [pc, #500]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	4a7c      	ldr	r2, [pc, #496]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 8004580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004584:	6413      	str	r3, [r2, #64]	; 0x40
 8004586:	4b7a      	ldr	r3, [pc, #488]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004592:	2301      	movs	r3, #1
 8004594:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004596:	4b77      	ldr	r3, [pc, #476]	; (8004774 <HAL_RCC_OscConfig+0x474>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d118      	bne.n	80045d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045a2:	4b74      	ldr	r3, [pc, #464]	; (8004774 <HAL_RCC_OscConfig+0x474>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a73      	ldr	r2, [pc, #460]	; (8004774 <HAL_RCC_OscConfig+0x474>)
 80045a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ae:	f7fe fa27 	bl	8002a00 <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b6:	f7fe fa23 	bl	8002a00 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e10c      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c8:	4b6a      	ldr	r3, [pc, #424]	; (8004774 <HAL_RCC_OscConfig+0x474>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0f0      	beq.n	80045b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d106      	bne.n	80045ea <HAL_RCC_OscConfig+0x2ea>
 80045dc:	4b64      	ldr	r3, [pc, #400]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 80045de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e0:	4a63      	ldr	r2, [pc, #396]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	6713      	str	r3, [r2, #112]	; 0x70
 80045e8:	e01c      	b.n	8004624 <HAL_RCC_OscConfig+0x324>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	2b05      	cmp	r3, #5
 80045f0:	d10c      	bne.n	800460c <HAL_RCC_OscConfig+0x30c>
 80045f2:	4b5f      	ldr	r3, [pc, #380]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f6:	4a5e      	ldr	r2, [pc, #376]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 80045f8:	f043 0304 	orr.w	r3, r3, #4
 80045fc:	6713      	str	r3, [r2, #112]	; 0x70
 80045fe:	4b5c      	ldr	r3, [pc, #368]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004602:	4a5b      	ldr	r2, [pc, #364]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	6713      	str	r3, [r2, #112]	; 0x70
 800460a:	e00b      	b.n	8004624 <HAL_RCC_OscConfig+0x324>
 800460c:	4b58      	ldr	r3, [pc, #352]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800460e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004610:	4a57      	ldr	r2, [pc, #348]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 8004612:	f023 0301 	bic.w	r3, r3, #1
 8004616:	6713      	str	r3, [r2, #112]	; 0x70
 8004618:	4b55      	ldr	r3, [pc, #340]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800461a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461c:	4a54      	ldr	r2, [pc, #336]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800461e:	f023 0304 	bic.w	r3, r3, #4
 8004622:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d015      	beq.n	8004658 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462c:	f7fe f9e8 	bl	8002a00 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004632:	e00a      	b.n	800464a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004634:	f7fe f9e4 	bl	8002a00 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004642:	4293      	cmp	r3, r2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e0cb      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800464a:	4b49      	ldr	r3, [pc, #292]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800464c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0ee      	beq.n	8004634 <HAL_RCC_OscConfig+0x334>
 8004656:	e014      	b.n	8004682 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004658:	f7fe f9d2 	bl	8002a00 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800465e:	e00a      	b.n	8004676 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004660:	f7fe f9ce 	bl	8002a00 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	; 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e0b5      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004676:	4b3e      	ldr	r3, [pc, #248]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 8004678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1ee      	bne.n	8004660 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004682:	7dfb      	ldrb	r3, [r7, #23]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d105      	bne.n	8004694 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004688:	4b39      	ldr	r3, [pc, #228]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	4a38      	ldr	r2, [pc, #224]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800468e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004692:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 80a1 	beq.w	80047e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800469e:	4b34      	ldr	r3, [pc, #208]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 030c 	and.w	r3, r3, #12
 80046a6:	2b08      	cmp	r3, #8
 80046a8:	d05c      	beq.n	8004764 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d141      	bne.n	8004736 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b2:	4b31      	ldr	r3, [pc, #196]	; (8004778 <HAL_RCC_OscConfig+0x478>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b8:	f7fe f9a2 	bl	8002a00 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c0:	f7fe f99e 	bl	8002a00 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e087      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d2:	4b27      	ldr	r3, [pc, #156]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69da      	ldr	r2, [r3, #28]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	019b      	lsls	r3, r3, #6
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	085b      	lsrs	r3, r3, #1
 80046f6:	3b01      	subs	r3, #1
 80046f8:	041b      	lsls	r3, r3, #16
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	061b      	lsls	r3, r3, #24
 8004702:	491b      	ldr	r1, [pc, #108]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 8004704:	4313      	orrs	r3, r2
 8004706:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004708:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <HAL_RCC_OscConfig+0x478>)
 800470a:	2201      	movs	r2, #1
 800470c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470e:	f7fe f977 	bl	8002a00 <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004714:	e008      	b.n	8004728 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004716:	f7fe f973 	bl	8002a00 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e05c      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004728:	4b11      	ldr	r3, [pc, #68]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0f0      	beq.n	8004716 <HAL_RCC_OscConfig+0x416>
 8004734:	e054      	b.n	80047e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004736:	4b10      	ldr	r3, [pc, #64]	; (8004778 <HAL_RCC_OscConfig+0x478>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800473c:	f7fe f960 	bl	8002a00 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004744:	f7fe f95c 	bl	8002a00 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e045      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004756:	4b06      	ldr	r3, [pc, #24]	; (8004770 <HAL_RCC_OscConfig+0x470>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f0      	bne.n	8004744 <HAL_RCC_OscConfig+0x444>
 8004762:	e03d      	b.n	80047e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d107      	bne.n	800477c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e038      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
 8004770:	40023800 	.word	0x40023800
 8004774:	40007000 	.word	0x40007000
 8004778:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800477c:	4b1b      	ldr	r3, [pc, #108]	; (80047ec <HAL_RCC_OscConfig+0x4ec>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d028      	beq.n	80047dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004794:	429a      	cmp	r2, r3
 8004796:	d121      	bne.n	80047dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d11a      	bne.n	80047dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047ac:	4013      	ands	r3, r2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d111      	bne.n	80047dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	085b      	lsrs	r3, r3, #1
 80047c4:	3b01      	subs	r3, #1
 80047c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d107      	bne.n	80047dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047d8:	429a      	cmp	r2, r3
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40023800 	.word	0x40023800

080047f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e0cc      	b.n	800499e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004804:	4b68      	ldr	r3, [pc, #416]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d90c      	bls.n	800482c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004812:	4b65      	ldr	r3, [pc, #404]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800481a:	4b63      	ldr	r3, [pc, #396]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d001      	beq.n	800482c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e0b8      	b.n	800499e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d020      	beq.n	800487a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004844:	4b59      	ldr	r3, [pc, #356]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	4a58      	ldr	r2, [pc, #352]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800484e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0308 	and.w	r3, r3, #8
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800485c:	4b53      	ldr	r3, [pc, #332]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	4a52      	ldr	r2, [pc, #328]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004862:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004866:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004868:	4b50      	ldr	r3, [pc, #320]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	494d      	ldr	r1, [pc, #308]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	4313      	orrs	r3, r2
 8004878:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d044      	beq.n	8004910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d107      	bne.n	800489e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800488e:	4b47      	ldr	r3, [pc, #284]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d119      	bne.n	80048ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e07f      	b.n	800499e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d003      	beq.n	80048ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d107      	bne.n	80048be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ae:	4b3f      	ldr	r3, [pc, #252]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d109      	bne.n	80048ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e06f      	b.n	800499e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048be:	4b3b      	ldr	r3, [pc, #236]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e067      	b.n	800499e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ce:	4b37      	ldr	r3, [pc, #220]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f023 0203 	bic.w	r2, r3, #3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	4934      	ldr	r1, [pc, #208]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048e0:	f7fe f88e 	bl	8002a00 <HAL_GetTick>
 80048e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e6:	e00a      	b.n	80048fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048e8:	f7fe f88a 	bl	8002a00 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e04f      	b.n	800499e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fe:	4b2b      	ldr	r3, [pc, #172]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 020c 	and.w	r2, r3, #12
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	429a      	cmp	r2, r3
 800490e:	d1eb      	bne.n	80048e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004910:	4b25      	ldr	r3, [pc, #148]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d20c      	bcs.n	8004938 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491e:	4b22      	ldr	r3, [pc, #136]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004926:	4b20      	ldr	r3, [pc, #128]	; (80049a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	429a      	cmp	r2, r3
 8004932:	d001      	beq.n	8004938 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e032      	b.n	800499e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004944:	4b19      	ldr	r3, [pc, #100]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	4916      	ldr	r1, [pc, #88]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	4313      	orrs	r3, r2
 8004954:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d009      	beq.n	8004976 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004962:	4b12      	ldr	r3, [pc, #72]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	490e      	ldr	r1, [pc, #56]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	4313      	orrs	r3, r2
 8004974:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004976:	f000 f821 	bl	80049bc <HAL_RCC_GetSysClockFreq>
 800497a:	4602      	mov	r2, r0
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <HAL_RCC_ClockConfig+0x1bc>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	091b      	lsrs	r3, r3, #4
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	490a      	ldr	r1, [pc, #40]	; (80049b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004988:	5ccb      	ldrb	r3, [r1, r3]
 800498a:	fa22 f303 	lsr.w	r3, r2, r3
 800498e:	4a09      	ldr	r2, [pc, #36]	; (80049b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004992:	4b09      	ldr	r3, [pc, #36]	; (80049b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f7fd ffee 	bl	8002978 <HAL_InitTick>

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40023c00 	.word	0x40023c00
 80049ac:	40023800 	.word	0x40023800
 80049b0:	08008b50 	.word	0x08008b50
 80049b4:	2000000c 	.word	0x2000000c
 80049b8:	20000010 	.word	0x20000010

080049bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c0:	b094      	sub	sp, #80	; 0x50
 80049c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	647b      	str	r3, [r7, #68]	; 0x44
 80049c8:	2300      	movs	r3, #0
 80049ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049cc:	2300      	movs	r3, #0
 80049ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049d4:	4b79      	ldr	r3, [pc, #484]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x200>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 030c 	and.w	r3, r3, #12
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d00d      	beq.n	80049fc <HAL_RCC_GetSysClockFreq+0x40>
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	f200 80e1 	bhi.w	8004ba8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <HAL_RCC_GetSysClockFreq+0x34>
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d003      	beq.n	80049f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80049ee:	e0db      	b.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049f0:	4b73      	ldr	r3, [pc, #460]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0x204>)
 80049f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80049f4:	e0db      	b.n	8004bae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049f6:	4b73      	ldr	r3, [pc, #460]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x208>)
 80049f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049fa:	e0d8      	b.n	8004bae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049fc:	4b6f      	ldr	r3, [pc, #444]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x200>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a04:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a06:	4b6d      	ldr	r3, [pc, #436]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d063      	beq.n	8004ada <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a12:	4b6a      	ldr	r3, [pc, #424]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	099b      	lsrs	r3, r3, #6
 8004a18:	2200      	movs	r2, #0
 8004a1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a24:	633b      	str	r3, [r7, #48]	; 0x30
 8004a26:	2300      	movs	r3, #0
 8004a28:	637b      	str	r3, [r7, #52]	; 0x34
 8004a2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a2e:	4622      	mov	r2, r4
 8004a30:	462b      	mov	r3, r5
 8004a32:	f04f 0000 	mov.w	r0, #0
 8004a36:	f04f 0100 	mov.w	r1, #0
 8004a3a:	0159      	lsls	r1, r3, #5
 8004a3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a40:	0150      	lsls	r0, r2, #5
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	4621      	mov	r1, r4
 8004a48:	1a51      	subs	r1, r2, r1
 8004a4a:	6139      	str	r1, [r7, #16]
 8004a4c:	4629      	mov	r1, r5
 8004a4e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	f04f 0300 	mov.w	r3, #0
 8004a5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a60:	4659      	mov	r1, fp
 8004a62:	018b      	lsls	r3, r1, #6
 8004a64:	4651      	mov	r1, sl
 8004a66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a6a:	4651      	mov	r1, sl
 8004a6c:	018a      	lsls	r2, r1, #6
 8004a6e:	4651      	mov	r1, sl
 8004a70:	ebb2 0801 	subs.w	r8, r2, r1
 8004a74:	4659      	mov	r1, fp
 8004a76:	eb63 0901 	sbc.w	r9, r3, r1
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a8e:	4690      	mov	r8, r2
 8004a90:	4699      	mov	r9, r3
 8004a92:	4623      	mov	r3, r4
 8004a94:	eb18 0303 	adds.w	r3, r8, r3
 8004a98:	60bb      	str	r3, [r7, #8]
 8004a9a:	462b      	mov	r3, r5
 8004a9c:	eb49 0303 	adc.w	r3, r9, r3
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004aae:	4629      	mov	r1, r5
 8004ab0:	024b      	lsls	r3, r1, #9
 8004ab2:	4621      	mov	r1, r4
 8004ab4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ab8:	4621      	mov	r1, r4
 8004aba:	024a      	lsls	r2, r1, #9
 8004abc:	4610      	mov	r0, r2
 8004abe:	4619      	mov	r1, r3
 8004ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ac6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ac8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004acc:	f7fb ffc6 	bl	8000a5c <__aeabi_uldivmod>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ad8:	e058      	b.n	8004b8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ada:	4b38      	ldr	r3, [pc, #224]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	099b      	lsrs	r3, r3, #6
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	4611      	mov	r1, r2
 8004ae6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004aea:	623b      	str	r3, [r7, #32]
 8004aec:	2300      	movs	r3, #0
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
 8004af0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004af4:	4642      	mov	r2, r8
 8004af6:	464b      	mov	r3, r9
 8004af8:	f04f 0000 	mov.w	r0, #0
 8004afc:	f04f 0100 	mov.w	r1, #0
 8004b00:	0159      	lsls	r1, r3, #5
 8004b02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b06:	0150      	lsls	r0, r2, #5
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4641      	mov	r1, r8
 8004b0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b12:	4649      	mov	r1, r9
 8004b14:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	f04f 0300 	mov.w	r3, #0
 8004b20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b2c:	ebb2 040a 	subs.w	r4, r2, sl
 8004b30:	eb63 050b 	sbc.w	r5, r3, fp
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	f04f 0300 	mov.w	r3, #0
 8004b3c:	00eb      	lsls	r3, r5, #3
 8004b3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b42:	00e2      	lsls	r2, r4, #3
 8004b44:	4614      	mov	r4, r2
 8004b46:	461d      	mov	r5, r3
 8004b48:	4643      	mov	r3, r8
 8004b4a:	18e3      	adds	r3, r4, r3
 8004b4c:	603b      	str	r3, [r7, #0]
 8004b4e:	464b      	mov	r3, r9
 8004b50:	eb45 0303 	adc.w	r3, r5, r3
 8004b54:	607b      	str	r3, [r7, #4]
 8004b56:	f04f 0200 	mov.w	r2, #0
 8004b5a:	f04f 0300 	mov.w	r3, #0
 8004b5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b62:	4629      	mov	r1, r5
 8004b64:	028b      	lsls	r3, r1, #10
 8004b66:	4621      	mov	r1, r4
 8004b68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	028a      	lsls	r2, r1, #10
 8004b70:	4610      	mov	r0, r2
 8004b72:	4619      	mov	r1, r3
 8004b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b76:	2200      	movs	r2, #0
 8004b78:	61bb      	str	r3, [r7, #24]
 8004b7a:	61fa      	str	r2, [r7, #28]
 8004b7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b80:	f7fb ff6c 	bl	8000a5c <__aeabi_uldivmod>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4613      	mov	r3, r2
 8004b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b8c:	4b0b      	ldr	r3, [pc, #44]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	0c1b      	lsrs	r3, r3, #16
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	3301      	adds	r3, #1
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ba6:	e002      	b.n	8004bae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ba8:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004baa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3750      	adds	r7, #80	; 0x50
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bba:	bf00      	nop
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	00f42400 	.word	0x00f42400
 8004bc4:	007a1200 	.word	0x007a1200

08004bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bcc:	4b03      	ldr	r3, [pc, #12]	; (8004bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8004bce:	681b      	ldr	r3, [r3, #0]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	2000000c 	.word	0x2000000c

08004be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004be4:	f7ff fff0 	bl	8004bc8 <HAL_RCC_GetHCLKFreq>
 8004be8:	4602      	mov	r2, r0
 8004bea:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	0a9b      	lsrs	r3, r3, #10
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	4903      	ldr	r1, [pc, #12]	; (8004c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bf6:	5ccb      	ldrb	r3, [r1, r3]
 8004bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40023800 	.word	0x40023800
 8004c04:	08008b60 	.word	0x08008b60

08004c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c0c:	f7ff ffdc 	bl	8004bc8 <HAL_RCC_GetHCLKFreq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	0b5b      	lsrs	r3, r3, #13
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	4903      	ldr	r1, [pc, #12]	; (8004c2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c1e:	5ccb      	ldrb	r3, [r1, r3]
 8004c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	08008b60 	.word	0x08008b60

08004c30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e07b      	b.n	8004d3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d108      	bne.n	8004c5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c52:	d009      	beq.n	8004c68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	61da      	str	r2, [r3, #28]
 8004c5a:	e005      	b.n	8004c68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7fd fcbc 	bl	8002600 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cec:	ea42 0103 	orr.w	r1, r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	0c1b      	lsrs	r3, r3, #16
 8004d06:	f003 0104 	and.w	r1, r3, #4
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	f003 0210 	and.w	r2, r3, #16
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69da      	ldr	r2, [r3, #28]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b088      	sub	sp, #32
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	60f8      	str	r0, [r7, #12]
 8004d4a:	60b9      	str	r1, [r7, #8]
 8004d4c:	603b      	str	r3, [r7, #0]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_SPI_Transmit+0x22>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e126      	b.n	8004fb2 <HAL_SPI_Transmit+0x270>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d6c:	f7fd fe48 	bl	8002a00 <HAL_GetTick>
 8004d70:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d72:	88fb      	ldrh	r3, [r7, #6]
 8004d74:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d002      	beq.n	8004d88 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d82:	2302      	movs	r3, #2
 8004d84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d86:	e10b      	b.n	8004fa0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <HAL_SPI_Transmit+0x52>
 8004d8e:	88fb      	ldrh	r3, [r7, #6]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d102      	bne.n	8004d9a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d98:	e102      	b.n	8004fa0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2203      	movs	r2, #3
 8004d9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	88fa      	ldrh	r2, [r7, #6]
 8004db2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	88fa      	ldrh	r2, [r7, #6]
 8004db8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004de0:	d10f      	bne.n	8004e02 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004df0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0c:	2b40      	cmp	r3, #64	; 0x40
 8004e0e:	d007      	beq.n	8004e20 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e28:	d14b      	bne.n	8004ec2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <HAL_SPI_Transmit+0xf6>
 8004e32:	8afb      	ldrh	r3, [r7, #22]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d13e      	bne.n	8004eb6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3c:	881a      	ldrh	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e48:	1c9a      	adds	r2, r3, #2
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e5c:	e02b      	b.n	8004eb6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d112      	bne.n	8004e92 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e70:	881a      	ldrh	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7c:	1c9a      	adds	r2, r3, #2
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e90:	e011      	b.n	8004eb6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e92:	f7fd fdb5 	bl	8002a00 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d803      	bhi.n	8004eaa <HAL_SPI_Transmit+0x168>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea8:	d102      	bne.n	8004eb0 <HAL_SPI_Transmit+0x16e>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d102      	bne.n	8004eb6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004eb4:	e074      	b.n	8004fa0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1ce      	bne.n	8004e5e <HAL_SPI_Transmit+0x11c>
 8004ec0:	e04c      	b.n	8004f5c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d002      	beq.n	8004ed0 <HAL_SPI_Transmit+0x18e>
 8004eca:	8afb      	ldrh	r3, [r7, #22]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d140      	bne.n	8004f52 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	330c      	adds	r3, #12
 8004eda:	7812      	ldrb	r2, [r2, #0]
 8004edc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ef6:	e02c      	b.n	8004f52 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d113      	bne.n	8004f2e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	330c      	adds	r3, #12
 8004f10:	7812      	ldrb	r2, [r2, #0]
 8004f12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f18:	1c5a      	adds	r2, r3, #1
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f2c:	e011      	b.n	8004f52 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f2e:	f7fd fd67 	bl	8002a00 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d803      	bhi.n	8004f46 <HAL_SPI_Transmit+0x204>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f44:	d102      	bne.n	8004f4c <HAL_SPI_Transmit+0x20a>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d102      	bne.n	8004f52 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f50:	e026      	b.n	8004fa0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1cd      	bne.n	8004ef8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	6839      	ldr	r1, [r7, #0]
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 fcf7 	bl	8005954 <SPI_EndRxTxTransaction>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10a      	bne.n	8004f90 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	613b      	str	r3, [r7, #16]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d002      	beq.n	8004f9e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	77fb      	strb	r3, [r7, #31]
 8004f9c:	e000      	b.n	8004fa0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004f9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3720      	adds	r7, #32
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b088      	sub	sp, #32
 8004fbe:	af02      	add	r7, sp, #8
 8004fc0:	60f8      	str	r0, [r7, #12]
 8004fc2:	60b9      	str	r1, [r7, #8]
 8004fc4:	603b      	str	r3, [r7, #0]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fd6:	d112      	bne.n	8004ffe <HAL_SPI_Receive+0x44>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10e      	bne.n	8004ffe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2204      	movs	r2, #4
 8004fe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004fe8:	88fa      	ldrh	r2, [r7, #6]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	68b9      	ldr	r1, [r7, #8]
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f8f1 	bl	80051dc <HAL_SPI_TransmitReceive>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	e0ea      	b.n	80051d4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005004:	2b01      	cmp	r3, #1
 8005006:	d101      	bne.n	800500c <HAL_SPI_Receive+0x52>
 8005008:	2302      	movs	r3, #2
 800500a:	e0e3      	b.n	80051d4 <HAL_SPI_Receive+0x21a>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005014:	f7fd fcf4 	bl	8002a00 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b01      	cmp	r3, #1
 8005024:	d002      	beq.n	800502c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005026:	2302      	movs	r3, #2
 8005028:	75fb      	strb	r3, [r7, #23]
    goto error;
 800502a:	e0ca      	b.n	80051c2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d002      	beq.n	8005038 <HAL_SPI_Receive+0x7e>
 8005032:	88fb      	ldrh	r3, [r7, #6]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d102      	bne.n	800503e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800503c:	e0c1      	b.n	80051c2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2204      	movs	r2, #4
 8005042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	88fa      	ldrh	r2, [r7, #6]
 8005056:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	88fa      	ldrh	r2, [r7, #6]
 800505c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005084:	d10f      	bne.n	80050a6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005094:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050a4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b0:	2b40      	cmp	r3, #64	; 0x40
 80050b2:	d007      	beq.n	80050c4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050c2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d162      	bne.n	8005192 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80050cc:	e02e      	b.n	800512c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d115      	bne.n	8005108 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f103 020c 	add.w	r2, r3, #12
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e8:	7812      	ldrb	r2, [r2, #0]
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	3b01      	subs	r3, #1
 8005100:	b29a      	uxth	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005106:	e011      	b.n	800512c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005108:	f7fd fc7a 	bl	8002a00 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	429a      	cmp	r2, r3
 8005116:	d803      	bhi.n	8005120 <HAL_SPI_Receive+0x166>
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511e:	d102      	bne.n	8005126 <HAL_SPI_Receive+0x16c>
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d102      	bne.n	800512c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	75fb      	strb	r3, [r7, #23]
          goto error;
 800512a:	e04a      	b.n	80051c2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005130:	b29b      	uxth	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1cb      	bne.n	80050ce <HAL_SPI_Receive+0x114>
 8005136:	e031      	b.n	800519c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b01      	cmp	r3, #1
 8005144:	d113      	bne.n	800516e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005150:	b292      	uxth	r2, r2
 8005152:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005158:	1c9a      	adds	r2, r3, #2
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005162:	b29b      	uxth	r3, r3
 8005164:	3b01      	subs	r3, #1
 8005166:	b29a      	uxth	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800516c:	e011      	b.n	8005192 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800516e:	f7fd fc47 	bl	8002a00 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d803      	bhi.n	8005186 <HAL_SPI_Receive+0x1cc>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005184:	d102      	bne.n	800518c <HAL_SPI_Receive+0x1d2>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d102      	bne.n	8005192 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005190:	e017      	b.n	80051c2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005196:	b29b      	uxth	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1cd      	bne.n	8005138 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	6839      	ldr	r1, [r7, #0]
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f000 fb71 	bl	8005888 <SPI_EndRxTransaction>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2220      	movs	r2, #32
 80051b0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d002      	beq.n	80051c0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	75fb      	strb	r3, [r7, #23]
 80051be:	e000      	b.n	80051c2 <HAL_SPI_Receive+0x208>
  }

error :
 80051c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08c      	sub	sp, #48	; 0x30
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80051ea:	2301      	movs	r3, #1
 80051ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d101      	bne.n	8005202 <HAL_SPI_TransmitReceive+0x26>
 80051fe:	2302      	movs	r3, #2
 8005200:	e18a      	b.n	8005518 <HAL_SPI_TransmitReceive+0x33c>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800520a:	f7fd fbf9 	bl	8002a00 <HAL_GetTick>
 800520e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005220:	887b      	ldrh	r3, [r7, #2]
 8005222:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005224:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005228:	2b01      	cmp	r3, #1
 800522a:	d00f      	beq.n	800524c <HAL_SPI_TransmitReceive+0x70>
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005232:	d107      	bne.n	8005244 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d103      	bne.n	8005244 <HAL_SPI_TransmitReceive+0x68>
 800523c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005240:	2b04      	cmp	r3, #4
 8005242:	d003      	beq.n	800524c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005244:	2302      	movs	r3, #2
 8005246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800524a:	e15b      	b.n	8005504 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d005      	beq.n	800525e <HAL_SPI_TransmitReceive+0x82>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <HAL_SPI_TransmitReceive+0x82>
 8005258:	887b      	ldrh	r3, [r7, #2]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d103      	bne.n	8005266 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005264:	e14e      	b.n	8005504 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b04      	cmp	r3, #4
 8005270:	d003      	beq.n	800527a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2205      	movs	r2, #5
 8005276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	887a      	ldrh	r2, [r7, #2]
 800528a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	887a      	ldrh	r2, [r7, #2]
 8005290:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	887a      	ldrh	r2, [r7, #2]
 800529c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	887a      	ldrh	r2, [r7, #2]
 80052a2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ba:	2b40      	cmp	r3, #64	; 0x40
 80052bc:	d007      	beq.n	80052ce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052d6:	d178      	bne.n	80053ca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <HAL_SPI_TransmitReceive+0x10a>
 80052e0:	8b7b      	ldrh	r3, [r7, #26]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d166      	bne.n	80053b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ea:	881a      	ldrh	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f6:	1c9a      	adds	r2, r3, #2
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005300:	b29b      	uxth	r3, r3
 8005302:	3b01      	subs	r3, #1
 8005304:	b29a      	uxth	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800530a:	e053      	b.n	80053b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b02      	cmp	r3, #2
 8005318:	d11b      	bne.n	8005352 <HAL_SPI_TransmitReceive+0x176>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800531e:	b29b      	uxth	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d016      	beq.n	8005352 <HAL_SPI_TransmitReceive+0x176>
 8005324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005326:	2b01      	cmp	r3, #1
 8005328:	d113      	bne.n	8005352 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532e:	881a      	ldrh	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533a:	1c9a      	adds	r2, r3, #2
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005344:	b29b      	uxth	r3, r3
 8005346:	3b01      	subs	r3, #1
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800534e:	2300      	movs	r3, #0
 8005350:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b01      	cmp	r3, #1
 800535e:	d119      	bne.n	8005394 <HAL_SPI_TransmitReceive+0x1b8>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005364:	b29b      	uxth	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d014      	beq.n	8005394 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68da      	ldr	r2, [r3, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	b292      	uxth	r2, r2
 8005376:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537c:	1c9a      	adds	r2, r3, #2
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005386:	b29b      	uxth	r3, r3
 8005388:	3b01      	subs	r3, #1
 800538a:	b29a      	uxth	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005390:	2301      	movs	r3, #1
 8005392:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005394:	f7fd fb34 	bl	8002a00 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d807      	bhi.n	80053b4 <HAL_SPI_TransmitReceive+0x1d8>
 80053a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053aa:	d003      	beq.n	80053b4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80053b2:	e0a7      	b.n	8005504 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1a6      	bne.n	800530c <HAL_SPI_TransmitReceive+0x130>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1a1      	bne.n	800530c <HAL_SPI_TransmitReceive+0x130>
 80053c8:	e07c      	b.n	80054c4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d002      	beq.n	80053d8 <HAL_SPI_TransmitReceive+0x1fc>
 80053d2:	8b7b      	ldrh	r3, [r7, #26]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d16b      	bne.n	80054b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	330c      	adds	r3, #12
 80053e2:	7812      	ldrb	r2, [r2, #0]
 80053e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053fe:	e057      	b.n	80054b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b02      	cmp	r3, #2
 800540c:	d11c      	bne.n	8005448 <HAL_SPI_TransmitReceive+0x26c>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005412:	b29b      	uxth	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d017      	beq.n	8005448 <HAL_SPI_TransmitReceive+0x26c>
 8005418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541a:	2b01      	cmp	r3, #1
 800541c:	d114      	bne.n	8005448 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	330c      	adds	r3, #12
 8005428:	7812      	ldrb	r2, [r2, #0]
 800542a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800543a:	b29b      	uxth	r3, r3
 800543c:	3b01      	subs	r3, #1
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b01      	cmp	r3, #1
 8005454:	d119      	bne.n	800548a <HAL_SPI_TransmitReceive+0x2ae>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800545a:	b29b      	uxth	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d014      	beq.n	800548a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005472:	1c5a      	adds	r2, r3, #1
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800547c:	b29b      	uxth	r3, r3
 800547e:	3b01      	subs	r3, #1
 8005480:	b29a      	uxth	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005486:	2301      	movs	r3, #1
 8005488:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800548a:	f7fd fab9 	bl	8002a00 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005496:	429a      	cmp	r2, r3
 8005498:	d803      	bhi.n	80054a2 <HAL_SPI_TransmitReceive+0x2c6>
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a0:	d102      	bne.n	80054a8 <HAL_SPI_TransmitReceive+0x2cc>
 80054a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d103      	bne.n	80054b0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80054ae:	e029      	b.n	8005504 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1a2      	bne.n	8005400 <HAL_SPI_TransmitReceive+0x224>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d19d      	bne.n	8005400 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 fa43 	bl	8005954 <SPI_EndRxTxTransaction>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d006      	beq.n	80054e2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2220      	movs	r2, #32
 80054de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80054e0:	e010      	b.n	8005504 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10b      	bne.n	8005502 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054ea:	2300      	movs	r3, #0
 80054ec:	617b      	str	r3, [r7, #20]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	617b      	str	r3, [r7, #20]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	617b      	str	r3, [r7, #20]
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	e000      	b.n	8005504 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005502:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005514:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005518:	4618      	mov	r0, r3
 800551a:	3730      	adds	r7, #48	; 0x30
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	099b      	lsrs	r3, r3, #6
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10f      	bne.n	8005564 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00a      	beq.n	8005564 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	099b      	lsrs	r3, r3, #6
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d004      	beq.n	8005564 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	4798      	blx	r3
    return;
 8005562:	e0d7      	b.n	8005714 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	085b      	lsrs	r3, r3, #1
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00a      	beq.n	8005586 <HAL_SPI_IRQHandler+0x66>
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	09db      	lsrs	r3, r3, #7
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	2b00      	cmp	r3, #0
 800557a:	d004      	beq.n	8005586 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	4798      	blx	r3
    return;
 8005584:	e0c6      	b.n	8005714 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	095b      	lsrs	r3, r3, #5
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10c      	bne.n	80055ac <HAL_SPI_IRQHandler+0x8c>
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	099b      	lsrs	r3, r3, #6
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d106      	bne.n	80055ac <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	0a1b      	lsrs	r3, r3, #8
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 80b4 	beq.w	8005714 <HAL_SPI_IRQHandler+0x1f4>
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	095b      	lsrs	r3, r3, #5
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 80ad 	beq.w	8005714 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	099b      	lsrs	r3, r3, #6
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d023      	beq.n	800560e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b03      	cmp	r3, #3
 80055d0:	d011      	beq.n	80055f6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d6:	f043 0204 	orr.w	r2, r3, #4
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055de:	2300      	movs	r3, #0
 80055e0:	617b      	str	r3, [r7, #20]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	617b      	str	r3, [r7, #20]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	e00b      	b.n	800560e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055f6:	2300      	movs	r3, #0
 80055f8:	613b      	str	r3, [r7, #16]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	613b      	str	r3, [r7, #16]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	613b      	str	r3, [r7, #16]
 800560a:	693b      	ldr	r3, [r7, #16]
        return;
 800560c:	e082      	b.n	8005714 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	095b      	lsrs	r3, r3, #5
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d014      	beq.n	8005644 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561e:	f043 0201 	orr.w	r2, r3, #1
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005626:	2300      	movs	r3, #0
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	0a1b      	lsrs	r3, r3, #8
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00c      	beq.n	800566a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005654:	f043 0208 	orr.w	r2, r3, #8
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800565c:	2300      	movs	r3, #0
 800565e:	60bb      	str	r3, [r7, #8]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	60bb      	str	r3, [r7, #8]
 8005668:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566e:	2b00      	cmp	r3, #0
 8005670:	d04f      	beq.n	8005712 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005680:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d104      	bne.n	800569e <HAL_SPI_IRQHandler+0x17e>
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	d034      	beq.n	8005708 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 0203 	bic.w	r2, r2, #3
 80056ac:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d011      	beq.n	80056da <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ba:	4a18      	ldr	r2, [pc, #96]	; (800571c <HAL_SPI_IRQHandler+0x1fc>)
 80056bc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fe fc11 	bl	8003eea <HAL_DMA_Abort_IT>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d005      	beq.n	80056da <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d016      	beq.n	8005710 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056e6:	4a0d      	ldr	r2, [pc, #52]	; (800571c <HAL_SPI_IRQHandler+0x1fc>)
 80056e8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fe fbfb 	bl	8003eea <HAL_DMA_Abort_IT>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00a      	beq.n	8005710 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005706:	e003      	b.n	8005710 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f809 	bl	8005720 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800570e:	e000      	b.n	8005712 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005710:	bf00      	nop
    return;
 8005712:	bf00      	nop
  }
}
 8005714:	3720      	adds	r7, #32
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	08005751 	.word	0x08005751

08005720 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005742:	b2db      	uxtb	r3, r3
}
 8005744:	4618      	mov	r0, r3
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f7ff ffd8 	bl	8005720 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005770:	bf00      	nop
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b088      	sub	sp, #32
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	603b      	str	r3, [r7, #0]
 8005784:	4613      	mov	r3, r2
 8005786:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005788:	f7fd f93a 	bl	8002a00 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005790:	1a9b      	subs	r3, r3, r2
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	4413      	add	r3, r2
 8005796:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005798:	f7fd f932 	bl	8002a00 <HAL_GetTick>
 800579c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800579e:	4b39      	ldr	r3, [pc, #228]	; (8005884 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	015b      	lsls	r3, r3, #5
 80057a4:	0d1b      	lsrs	r3, r3, #20
 80057a6:	69fa      	ldr	r2, [r7, #28]
 80057a8:	fb02 f303 	mul.w	r3, r2, r3
 80057ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057ae:	e054      	b.n	800585a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b6:	d050      	beq.n	800585a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057b8:	f7fd f922 	bl	8002a00 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	69fa      	ldr	r2, [r7, #28]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d902      	bls.n	80057ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d13d      	bne.n	800584a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057e6:	d111      	bne.n	800580c <SPI_WaitFlagStateUntilTimeout+0x94>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f0:	d004      	beq.n	80057fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057fa:	d107      	bne.n	800580c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800580a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005814:	d10f      	bne.n	8005836 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005834:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e017      	b.n	800587a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	3b01      	subs	r3, #1
 8005858:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	4013      	ands	r3, r2
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	429a      	cmp	r2, r3
 8005868:	bf0c      	ite	eq
 800586a:	2301      	moveq	r3, #1
 800586c:	2300      	movne	r3, #0
 800586e:	b2db      	uxtb	r3, r3
 8005870:	461a      	mov	r2, r3
 8005872:	79fb      	ldrb	r3, [r7, #7]
 8005874:	429a      	cmp	r2, r3
 8005876:	d19b      	bne.n	80057b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3720      	adds	r7, #32
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	2000000c 	.word	0x2000000c

08005888 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af02      	add	r7, sp, #8
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800589c:	d111      	bne.n	80058c2 <SPI_EndRxTransaction+0x3a>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a6:	d004      	beq.n	80058b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b0:	d107      	bne.n	80058c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058ca:	d12a      	bne.n	8005922 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058d4:	d012      	beq.n	80058fc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	2200      	movs	r2, #0
 80058de:	2180      	movs	r1, #128	; 0x80
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f7ff ff49 	bl	8005778 <SPI_WaitFlagStateUntilTimeout>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d02d      	beq.n	8005948 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f0:	f043 0220 	orr.w	r2, r3, #32
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e026      	b.n	800594a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2200      	movs	r2, #0
 8005904:	2101      	movs	r1, #1
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f7ff ff36 	bl	8005778 <SPI_WaitFlagStateUntilTimeout>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d01a      	beq.n	8005948 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005916:	f043 0220 	orr.w	r2, r3, #32
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e013      	b.n	800594a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2200      	movs	r2, #0
 800592a:	2101      	movs	r1, #1
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f7ff ff23 	bl	8005778 <SPI_WaitFlagStateUntilTimeout>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d007      	beq.n	8005948 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593c:	f043 0220 	orr.w	r2, r3, #32
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e000      	b.n	800594a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af02      	add	r7, sp, #8
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005960:	4b1b      	ldr	r3, [pc, #108]	; (80059d0 <SPI_EndRxTxTransaction+0x7c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a1b      	ldr	r2, [pc, #108]	; (80059d4 <SPI_EndRxTxTransaction+0x80>)
 8005966:	fba2 2303 	umull	r2, r3, r2, r3
 800596a:	0d5b      	lsrs	r3, r3, #21
 800596c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005970:	fb02 f303 	mul.w	r3, r2, r3
 8005974:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800597e:	d112      	bne.n	80059a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2200      	movs	r2, #0
 8005988:	2180      	movs	r1, #128	; 0x80
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f7ff fef4 	bl	8005778 <SPI_WaitFlagStateUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d016      	beq.n	80059c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599a:	f043 0220 	orr.w	r2, r3, #32
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e00f      	b.n	80059c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00a      	beq.n	80059c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	3b01      	subs	r3, #1
 80059b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059bc:	2b80      	cmp	r3, #128	; 0x80
 80059be:	d0f2      	beq.n	80059a6 <SPI_EndRxTxTransaction+0x52>
 80059c0:	e000      	b.n	80059c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80059c2:	bf00      	nop
  }

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	2000000c 	.word	0x2000000c
 80059d4:	165e9f81 	.word	0x165e9f81

080059d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e041      	b.n	8005a6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d106      	bne.n	8005a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7fc fe5e 	bl	80026c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3304      	adds	r3, #4
 8005a14:	4619      	mov	r1, r3
 8005a16:	4610      	mov	r0, r2
 8005a18:	f000 fa96 	bl	8005f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d001      	beq.n	8005a90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e04e      	b.n	8005b2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68da      	ldr	r2, [r3, #12]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f042 0201 	orr.w	r2, r2, #1
 8005aa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a23      	ldr	r2, [pc, #140]	; (8005b3c <HAL_TIM_Base_Start_IT+0xc4>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d022      	beq.n	8005af8 <HAL_TIM_Base_Start_IT+0x80>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aba:	d01d      	beq.n	8005af8 <HAL_TIM_Base_Start_IT+0x80>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a1f      	ldr	r2, [pc, #124]	; (8005b40 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d018      	beq.n	8005af8 <HAL_TIM_Base_Start_IT+0x80>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a1e      	ldr	r2, [pc, #120]	; (8005b44 <HAL_TIM_Base_Start_IT+0xcc>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d013      	beq.n	8005af8 <HAL_TIM_Base_Start_IT+0x80>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a1c      	ldr	r2, [pc, #112]	; (8005b48 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d00e      	beq.n	8005af8 <HAL_TIM_Base_Start_IT+0x80>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a1b      	ldr	r2, [pc, #108]	; (8005b4c <HAL_TIM_Base_Start_IT+0xd4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d009      	beq.n	8005af8 <HAL_TIM_Base_Start_IT+0x80>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a19      	ldr	r2, [pc, #100]	; (8005b50 <HAL_TIM_Base_Start_IT+0xd8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d004      	beq.n	8005af8 <HAL_TIM_Base_Start_IT+0x80>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a18      	ldr	r2, [pc, #96]	; (8005b54 <HAL_TIM_Base_Start_IT+0xdc>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d111      	bne.n	8005b1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 0307 	and.w	r3, r3, #7
 8005b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b06      	cmp	r3, #6
 8005b08:	d010      	beq.n	8005b2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f042 0201 	orr.w	r2, r2, #1
 8005b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b1a:	e007      	b.n	8005b2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0201 	orr.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	40010000 	.word	0x40010000
 8005b40:	40000400 	.word	0x40000400
 8005b44:	40000800 	.word	0x40000800
 8005b48:	40000c00 	.word	0x40000c00
 8005b4c:	40010400 	.word	0x40010400
 8005b50:	40014000 	.word	0x40014000
 8005b54:	40001800 	.word	0x40001800

08005b58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d122      	bne.n	8005bb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	f003 0302 	and.w	r3, r3, #2
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d11b      	bne.n	8005bb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f06f 0202 	mvn.w	r2, #2
 8005b84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	f003 0303 	and.w	r3, r3, #3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f9b5 	bl	8005f0a <HAL_TIM_IC_CaptureCallback>
 8005ba0:	e005      	b.n	8005bae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f9a7 	bl	8005ef6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 f9b8 	bl	8005f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	f003 0304 	and.w	r3, r3, #4
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d122      	bne.n	8005c08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b04      	cmp	r3, #4
 8005bce:	d11b      	bne.n	8005c08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f06f 0204 	mvn.w	r2, #4
 8005bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2202      	movs	r2, #2
 8005bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f98b 	bl	8005f0a <HAL_TIM_IC_CaptureCallback>
 8005bf4:	e005      	b.n	8005c02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f97d 	bl	8005ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f98e 	bl	8005f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	f003 0308 	and.w	r3, r3, #8
 8005c12:	2b08      	cmp	r3, #8
 8005c14:	d122      	bne.n	8005c5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	f003 0308 	and.w	r3, r3, #8
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d11b      	bne.n	8005c5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f06f 0208 	mvn.w	r2, #8
 8005c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2204      	movs	r2, #4
 8005c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f961 	bl	8005f0a <HAL_TIM_IC_CaptureCallback>
 8005c48:	e005      	b.n	8005c56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f953 	bl	8005ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 f964 	bl	8005f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	f003 0310 	and.w	r3, r3, #16
 8005c66:	2b10      	cmp	r3, #16
 8005c68:	d122      	bne.n	8005cb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f003 0310 	and.w	r3, r3, #16
 8005c74:	2b10      	cmp	r3, #16
 8005c76:	d11b      	bne.n	8005cb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f06f 0210 	mvn.w	r2, #16
 8005c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2208      	movs	r2, #8
 8005c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f937 	bl	8005f0a <HAL_TIM_IC_CaptureCallback>
 8005c9c:	e005      	b.n	8005caa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f929 	bl	8005ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f93a 	bl	8005f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d10e      	bne.n	8005cdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d107      	bne.n	8005cdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f06f 0201 	mvn.w	r2, #1
 8005cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7fc f892 	bl	8001e00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce6:	2b80      	cmp	r3, #128	; 0x80
 8005ce8:	d10e      	bne.n	8005d08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf4:	2b80      	cmp	r3, #128	; 0x80
 8005cf6:	d107      	bne.n	8005d08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fae0 	bl	80062c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d12:	2b40      	cmp	r3, #64	; 0x40
 8005d14:	d10e      	bne.n	8005d34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d20:	2b40      	cmp	r3, #64	; 0x40
 8005d22:	d107      	bne.n	8005d34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f8ff 	bl	8005f32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	f003 0320 	and.w	r3, r3, #32
 8005d3e:	2b20      	cmp	r3, #32
 8005d40:	d10e      	bne.n	8005d60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f003 0320 	and.w	r3, r3, #32
 8005d4c:	2b20      	cmp	r3, #32
 8005d4e:	d107      	bne.n	8005d60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f06f 0220 	mvn.w	r2, #32
 8005d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 faaa 	bl	80062b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d60:	bf00      	nop
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d101      	bne.n	8005d84 <HAL_TIM_ConfigClockSource+0x1c>
 8005d80:	2302      	movs	r3, #2
 8005d82:	e0b4      	b.n	8005eee <HAL_TIM_ConfigClockSource+0x186>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005da2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005daa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dbc:	d03e      	beq.n	8005e3c <HAL_TIM_ConfigClockSource+0xd4>
 8005dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dc2:	f200 8087 	bhi.w	8005ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dca:	f000 8086 	beq.w	8005eda <HAL_TIM_ConfigClockSource+0x172>
 8005dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd2:	d87f      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd4:	2b70      	cmp	r3, #112	; 0x70
 8005dd6:	d01a      	beq.n	8005e0e <HAL_TIM_ConfigClockSource+0xa6>
 8005dd8:	2b70      	cmp	r3, #112	; 0x70
 8005dda:	d87b      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ddc:	2b60      	cmp	r3, #96	; 0x60
 8005dde:	d050      	beq.n	8005e82 <HAL_TIM_ConfigClockSource+0x11a>
 8005de0:	2b60      	cmp	r3, #96	; 0x60
 8005de2:	d877      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8005de4:	2b50      	cmp	r3, #80	; 0x50
 8005de6:	d03c      	beq.n	8005e62 <HAL_TIM_ConfigClockSource+0xfa>
 8005de8:	2b50      	cmp	r3, #80	; 0x50
 8005dea:	d873      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dec:	2b40      	cmp	r3, #64	; 0x40
 8005dee:	d058      	beq.n	8005ea2 <HAL_TIM_ConfigClockSource+0x13a>
 8005df0:	2b40      	cmp	r3, #64	; 0x40
 8005df2:	d86f      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8005df4:	2b30      	cmp	r3, #48	; 0x30
 8005df6:	d064      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8005df8:	2b30      	cmp	r3, #48	; 0x30
 8005dfa:	d86b      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dfc:	2b20      	cmp	r3, #32
 8005dfe:	d060      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e00:	2b20      	cmp	r3, #32
 8005e02:	d867      	bhi.n	8005ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d05c      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e08:	2b10      	cmp	r3, #16
 8005e0a:	d05a      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e0c:	e062      	b.n	8005ed4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6818      	ldr	r0, [r3, #0]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	6899      	ldr	r1, [r3, #8]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f000 f9ad 	bl	800617c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	609a      	str	r2, [r3, #8]
      break;
 8005e3a:	e04f      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6818      	ldr	r0, [r3, #0]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	6899      	ldr	r1, [r3, #8]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	f000 f996 	bl	800617c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689a      	ldr	r2, [r3, #8]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e5e:	609a      	str	r2, [r3, #8]
      break;
 8005e60:	e03c      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6818      	ldr	r0, [r3, #0]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	6859      	ldr	r1, [r3, #4]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	f000 f90a 	bl	8006088 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2150      	movs	r1, #80	; 0x50
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 f963 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 8005e80:	e02c      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6818      	ldr	r0, [r3, #0]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	6859      	ldr	r1, [r3, #4]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	f000 f929 	bl	80060e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2160      	movs	r1, #96	; 0x60
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 f953 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 8005ea0:	e01c      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6818      	ldr	r0, [r3, #0]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	6859      	ldr	r1, [r3, #4]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f000 f8ea 	bl	8006088 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2140      	movs	r1, #64	; 0x40
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 f943 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 8005ec0:	e00c      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4619      	mov	r1, r3
 8005ecc:	4610      	mov	r0, r2
 8005ece:	f000 f93a 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 8005ed2:	e003      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ed8:	e000      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005eda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f12:	bf00      	nop
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b083      	sub	sp, #12
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f26:	bf00      	nop
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b083      	sub	sp, #12
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
	...

08005f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a40      	ldr	r2, [pc, #256]	; (800605c <TIM_Base_SetConfig+0x114>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d013      	beq.n	8005f88 <TIM_Base_SetConfig+0x40>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f66:	d00f      	beq.n	8005f88 <TIM_Base_SetConfig+0x40>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a3d      	ldr	r2, [pc, #244]	; (8006060 <TIM_Base_SetConfig+0x118>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d00b      	beq.n	8005f88 <TIM_Base_SetConfig+0x40>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a3c      	ldr	r2, [pc, #240]	; (8006064 <TIM_Base_SetConfig+0x11c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d007      	beq.n	8005f88 <TIM_Base_SetConfig+0x40>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a3b      	ldr	r2, [pc, #236]	; (8006068 <TIM_Base_SetConfig+0x120>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d003      	beq.n	8005f88 <TIM_Base_SetConfig+0x40>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a3a      	ldr	r2, [pc, #232]	; (800606c <TIM_Base_SetConfig+0x124>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d108      	bne.n	8005f9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a2f      	ldr	r2, [pc, #188]	; (800605c <TIM_Base_SetConfig+0x114>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d02b      	beq.n	8005ffa <TIM_Base_SetConfig+0xb2>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fa8:	d027      	beq.n	8005ffa <TIM_Base_SetConfig+0xb2>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a2c      	ldr	r2, [pc, #176]	; (8006060 <TIM_Base_SetConfig+0x118>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d023      	beq.n	8005ffa <TIM_Base_SetConfig+0xb2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a2b      	ldr	r2, [pc, #172]	; (8006064 <TIM_Base_SetConfig+0x11c>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d01f      	beq.n	8005ffa <TIM_Base_SetConfig+0xb2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a2a      	ldr	r2, [pc, #168]	; (8006068 <TIM_Base_SetConfig+0x120>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d01b      	beq.n	8005ffa <TIM_Base_SetConfig+0xb2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a29      	ldr	r2, [pc, #164]	; (800606c <TIM_Base_SetConfig+0x124>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d017      	beq.n	8005ffa <TIM_Base_SetConfig+0xb2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a28      	ldr	r2, [pc, #160]	; (8006070 <TIM_Base_SetConfig+0x128>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d013      	beq.n	8005ffa <TIM_Base_SetConfig+0xb2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a27      	ldr	r2, [pc, #156]	; (8006074 <TIM_Base_SetConfig+0x12c>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00f      	beq.n	8005ffa <TIM_Base_SetConfig+0xb2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a26      	ldr	r2, [pc, #152]	; (8006078 <TIM_Base_SetConfig+0x130>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d00b      	beq.n	8005ffa <TIM_Base_SetConfig+0xb2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a25      	ldr	r2, [pc, #148]	; (800607c <TIM_Base_SetConfig+0x134>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d007      	beq.n	8005ffa <TIM_Base_SetConfig+0xb2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a24      	ldr	r2, [pc, #144]	; (8006080 <TIM_Base_SetConfig+0x138>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d003      	beq.n	8005ffa <TIM_Base_SetConfig+0xb2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a23      	ldr	r2, [pc, #140]	; (8006084 <TIM_Base_SetConfig+0x13c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d108      	bne.n	800600c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	4313      	orrs	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	689a      	ldr	r2, [r3, #8]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a0a      	ldr	r2, [pc, #40]	; (800605c <TIM_Base_SetConfig+0x114>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d003      	beq.n	8006040 <TIM_Base_SetConfig+0xf8>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a0c      	ldr	r2, [pc, #48]	; (800606c <TIM_Base_SetConfig+0x124>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d103      	bne.n	8006048 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	691a      	ldr	r2, [r3, #16]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	615a      	str	r2, [r3, #20]
}
 800604e:	bf00      	nop
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	40010000 	.word	0x40010000
 8006060:	40000400 	.word	0x40000400
 8006064:	40000800 	.word	0x40000800
 8006068:	40000c00 	.word	0x40000c00
 800606c:	40010400 	.word	0x40010400
 8006070:	40014000 	.word	0x40014000
 8006074:	40014400 	.word	0x40014400
 8006078:	40014800 	.word	0x40014800
 800607c:	40001800 	.word	0x40001800
 8006080:	40001c00 	.word	0x40001c00
 8006084:	40002000 	.word	0x40002000

08006088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	f023 0201 	bic.w	r2, r3, #1
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f023 030a 	bic.w	r3, r3, #10
 80060c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	621a      	str	r2, [r3, #32]
}
 80060da:	bf00      	nop
 80060dc:	371c      	adds	r7, #28
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b087      	sub	sp, #28
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	60f8      	str	r0, [r7, #12]
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	f023 0210 	bic.w	r2, r3, #16
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006110:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	031b      	lsls	r3, r3, #12
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	4313      	orrs	r3, r2
 800611a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006122:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	621a      	str	r2, [r3, #32]
}
 800613a:	bf00      	nop
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006146:	b480      	push	{r7}
 8006148:	b085      	sub	sp, #20
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4313      	orrs	r3, r2
 8006164:	f043 0307 	orr.w	r3, r3, #7
 8006168:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	609a      	str	r2, [r3, #8]
}
 8006170:	bf00      	nop
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006196:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	021a      	lsls	r2, r3, #8
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	431a      	orrs	r2, r3
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	609a      	str	r2, [r3, #8]
}
 80061b0:	bf00      	nop
 80061b2:	371c      	adds	r7, #28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d101      	bne.n	80061d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061d0:	2302      	movs	r3, #2
 80061d2:	e05a      	b.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4313      	orrs	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a21      	ldr	r2, [pc, #132]	; (8006298 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d022      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006220:	d01d      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a1d      	ldr	r2, [pc, #116]	; (800629c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d018      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a1b      	ldr	r2, [pc, #108]	; (80062a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d013      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a1a      	ldr	r2, [pc, #104]	; (80062a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d00e      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a18      	ldr	r2, [pc, #96]	; (80062a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d009      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a17      	ldr	r2, [pc, #92]	; (80062ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d004      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a15      	ldr	r2, [pc, #84]	; (80062b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d10c      	bne.n	8006278 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006264:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	4313      	orrs	r3, r2
 800626e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	40010000 	.word	0x40010000
 800629c:	40000400 	.word	0x40000400
 80062a0:	40000800 	.word	0x40000800
 80062a4:	40000c00 	.word	0x40000c00
 80062a8:	40010400 	.word	0x40010400
 80062ac:	40014000 	.word	0x40014000
 80062b0:	40001800 	.word	0x40001800

080062b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e03f      	b.n	800636e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d106      	bne.n	8006308 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7fc fa02 	bl	800270c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2224      	movs	r2, #36	; 0x24
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800631e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fd7b 	bl	8006e1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	691a      	ldr	r2, [r3, #16]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006334:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	695a      	ldr	r2, [r3, #20]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006344:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68da      	ldr	r2, [r3, #12]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006354:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2220      	movs	r2, #32
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2220      	movs	r2, #32
 8006368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b08a      	sub	sp, #40	; 0x28
 800637a:	af02      	add	r7, sp, #8
 800637c:	60f8      	str	r0, [r7, #12]
 800637e:	60b9      	str	r1, [r7, #8]
 8006380:	603b      	str	r3, [r7, #0]
 8006382:	4613      	mov	r3, r2
 8006384:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b20      	cmp	r3, #32
 8006394:	d17c      	bne.n	8006490 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <HAL_UART_Transmit+0x2c>
 800639c:	88fb      	ldrh	r3, [r7, #6]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e075      	b.n	8006492 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d101      	bne.n	80063b4 <HAL_UART_Transmit+0x3e>
 80063b0:	2302      	movs	r3, #2
 80063b2:	e06e      	b.n	8006492 <HAL_UART_Transmit+0x11c>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2221      	movs	r2, #33	; 0x21
 80063c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063ca:	f7fc fb19 	bl	8002a00 <HAL_GetTick>
 80063ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	88fa      	ldrh	r2, [r7, #6]
 80063d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	88fa      	ldrh	r2, [r7, #6]
 80063da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063e4:	d108      	bne.n	80063f8 <HAL_UART_Transmit+0x82>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d104      	bne.n	80063f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80063ee:	2300      	movs	r3, #0
 80063f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	61bb      	str	r3, [r7, #24]
 80063f6:	e003      	b.n	8006400 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063fc:	2300      	movs	r3, #0
 80063fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006408:	e02a      	b.n	8006460 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	2200      	movs	r2, #0
 8006412:	2180      	movs	r1, #128	; 0x80
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 faf9 	bl	8006a0c <UART_WaitOnFlagUntilTimeout>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e036      	b.n	8006492 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10b      	bne.n	8006442 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006438:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	3302      	adds	r3, #2
 800643e:	61bb      	str	r3, [r7, #24]
 8006440:	e007      	b.n	8006452 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	781a      	ldrb	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	3301      	adds	r3, #1
 8006450:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006456:	b29b      	uxth	r3, r3
 8006458:	3b01      	subs	r3, #1
 800645a:	b29a      	uxth	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006464:	b29b      	uxth	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1cf      	bne.n	800640a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2200      	movs	r2, #0
 8006472:	2140      	movs	r1, #64	; 0x40
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f000 fac9 	bl	8006a0c <UART_WaitOnFlagUntilTimeout>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e006      	b.n	8006492 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2220      	movs	r2, #32
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800648c:	2300      	movs	r3, #0
 800648e:	e000      	b.n	8006492 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006490:	2302      	movs	r3, #2
  }
}
 8006492:	4618      	mov	r0, r3
 8006494:	3720      	adds	r7, #32
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
	...

0800649c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b0ba      	sub	sp, #232	; 0xe8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80064c2:	2300      	movs	r3, #0
 80064c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80064ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064d2:	f003 030f 	and.w	r3, r3, #15
 80064d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80064da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10f      	bne.n	8006502 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e6:	f003 0320 	and.w	r3, r3, #32
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d009      	beq.n	8006502 <HAL_UART_IRQHandler+0x66>
 80064ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064f2:	f003 0320 	and.w	r3, r3, #32
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d003      	beq.n	8006502 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fbd3 	bl	8006ca6 <UART_Receive_IT>
      return;
 8006500:	e256      	b.n	80069b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006502:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 80de 	beq.w	80066c8 <HAL_UART_IRQHandler+0x22c>
 800650c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b00      	cmp	r3, #0
 8006516:	d106      	bne.n	8006526 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800651c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 80d1 	beq.w	80066c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00b      	beq.n	800654a <HAL_UART_IRQHandler+0xae>
 8006532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800653a:	2b00      	cmp	r3, #0
 800653c:	d005      	beq.n	800654a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	f043 0201 	orr.w	r2, r3, #1
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800654a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800654e:	f003 0304 	and.w	r3, r3, #4
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00b      	beq.n	800656e <HAL_UART_IRQHandler+0xd2>
 8006556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b00      	cmp	r3, #0
 8006560:	d005      	beq.n	800656e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	f043 0202 	orr.w	r2, r3, #2
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800656e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00b      	beq.n	8006592 <HAL_UART_IRQHandler+0xf6>
 800657a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	d005      	beq.n	8006592 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658a:	f043 0204 	orr.w	r2, r3, #4
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006596:	f003 0308 	and.w	r3, r3, #8
 800659a:	2b00      	cmp	r3, #0
 800659c:	d011      	beq.n	80065c2 <HAL_UART_IRQHandler+0x126>
 800659e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065a2:	f003 0320 	and.w	r3, r3, #32
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d105      	bne.n	80065b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80065aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d005      	beq.n	80065c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	f043 0208 	orr.w	r2, r3, #8
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 81ed 	beq.w	80069a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d0:	f003 0320 	and.w	r3, r3, #32
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d008      	beq.n	80065ea <HAL_UART_IRQHandler+0x14e>
 80065d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065dc:	f003 0320 	and.w	r3, r3, #32
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d002      	beq.n	80065ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fb5e 	bl	8006ca6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f4:	2b40      	cmp	r3, #64	; 0x40
 80065f6:	bf0c      	ite	eq
 80065f8:	2301      	moveq	r3, #1
 80065fa:	2300      	movne	r3, #0
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	f003 0308 	and.w	r3, r3, #8
 800660a:	2b00      	cmp	r3, #0
 800660c:	d103      	bne.n	8006616 <HAL_UART_IRQHandler+0x17a>
 800660e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006612:	2b00      	cmp	r3, #0
 8006614:	d04f      	beq.n	80066b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fa66 	bl	8006ae8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006626:	2b40      	cmp	r3, #64	; 0x40
 8006628:	d141      	bne.n	80066ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3314      	adds	r3, #20
 8006630:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006634:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006638:	e853 3f00 	ldrex	r3, [r3]
 800663c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006640:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006648:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	3314      	adds	r3, #20
 8006652:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006656:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800665a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006662:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006666:	e841 2300 	strex	r3, r2, [r1]
 800666a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800666e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1d9      	bne.n	800662a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667a:	2b00      	cmp	r3, #0
 800667c:	d013      	beq.n	80066a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006682:	4a7d      	ldr	r2, [pc, #500]	; (8006878 <HAL_UART_IRQHandler+0x3dc>)
 8006684:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668a:	4618      	mov	r0, r3
 800668c:	f7fd fc2d 	bl	8003eea <HAL_DMA_Abort_IT>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d016      	beq.n	80066c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80066a0:	4610      	mov	r0, r2
 80066a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a4:	e00e      	b.n	80066c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f99a 	bl	80069e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ac:	e00a      	b.n	80066c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f996 	bl	80069e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b4:	e006      	b.n	80066c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f992 	bl	80069e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80066c2:	e170      	b.n	80069a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c4:	bf00      	nop
    return;
 80066c6:	e16e      	b.n	80069a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	f040 814a 	bne.w	8006966 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80066d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d6:	f003 0310 	and.w	r3, r3, #16
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f000 8143 	beq.w	8006966 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80066e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066e4:	f003 0310 	and.w	r3, r3, #16
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 813c 	beq.w	8006966 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066ee:	2300      	movs	r3, #0
 80066f0:	60bb      	str	r3, [r7, #8]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	60bb      	str	r3, [r7, #8]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	60bb      	str	r3, [r7, #8]
 8006702:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670e:	2b40      	cmp	r3, #64	; 0x40
 8006710:	f040 80b4 	bne.w	800687c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006720:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 8140 	beq.w	80069aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800672e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006732:	429a      	cmp	r2, r3
 8006734:	f080 8139 	bcs.w	80069aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800673e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800674a:	f000 8088 	beq.w	800685e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	330c      	adds	r3, #12
 8006754:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006758:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800675c:	e853 3f00 	ldrex	r3, [r3]
 8006760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006764:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800676c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	330c      	adds	r3, #12
 8006776:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800677a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800677e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006782:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006786:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800678a:	e841 2300 	strex	r3, r2, [r1]
 800678e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006792:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1d9      	bne.n	800674e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3314      	adds	r3, #20
 80067a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067a4:	e853 3f00 	ldrex	r3, [r3]
 80067a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80067aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067ac:	f023 0301 	bic.w	r3, r3, #1
 80067b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	3314      	adds	r3, #20
 80067ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80067c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80067c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80067ca:	e841 2300 	strex	r3, r2, [r1]
 80067ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80067d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1e1      	bne.n	800679a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3314      	adds	r3, #20
 80067dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067e0:	e853 3f00 	ldrex	r3, [r3]
 80067e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80067e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3314      	adds	r3, #20
 80067f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80067fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80067fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006800:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006802:	e841 2300 	strex	r3, r2, [r1]
 8006806:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1e3      	bne.n	80067d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2220      	movs	r2, #32
 8006812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	330c      	adds	r3, #12
 8006822:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006826:	e853 3f00 	ldrex	r3, [r3]
 800682a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800682c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800682e:	f023 0310 	bic.w	r3, r3, #16
 8006832:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	330c      	adds	r3, #12
 800683c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006840:	65ba      	str	r2, [r7, #88]	; 0x58
 8006842:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006844:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006846:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006848:	e841 2300 	strex	r3, r2, [r1]
 800684c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800684e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1e3      	bne.n	800681c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006858:	4618      	mov	r0, r3
 800685a:	f7fd fad6 	bl	8003e0a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006866:	b29b      	uxth	r3, r3
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	b29b      	uxth	r3, r3
 800686c:	4619      	mov	r1, r3
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f8c0 	bl	80069f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006874:	e099      	b.n	80069aa <HAL_UART_IRQHandler+0x50e>
 8006876:	bf00      	nop
 8006878:	08006baf 	.word	0x08006baf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006884:	b29b      	uxth	r3, r3
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006890:	b29b      	uxth	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	f000 808b 	beq.w	80069ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006898:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 8086 	beq.w	80069ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	330c      	adds	r3, #12
 80068a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ac:	e853 3f00 	ldrex	r3, [r3]
 80068b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	330c      	adds	r3, #12
 80068c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80068c6:	647a      	str	r2, [r7, #68]	; 0x44
 80068c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068ce:	e841 2300 	strex	r3, r2, [r1]
 80068d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1e3      	bne.n	80068a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	3314      	adds	r3, #20
 80068e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	623b      	str	r3, [r7, #32]
   return(result);
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	f023 0301 	bic.w	r3, r3, #1
 80068f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	3314      	adds	r3, #20
 80068fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80068fe:	633a      	str	r2, [r7, #48]	; 0x30
 8006900:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006902:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006906:	e841 2300 	strex	r3, r2, [r1]
 800690a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800690c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1e3      	bne.n	80068da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2220      	movs	r2, #32
 8006916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	330c      	adds	r3, #12
 8006926:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	e853 3f00 	ldrex	r3, [r3]
 800692e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f023 0310 	bic.w	r3, r3, #16
 8006936:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	330c      	adds	r3, #12
 8006940:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006944:	61fa      	str	r2, [r7, #28]
 8006946:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006948:	69b9      	ldr	r1, [r7, #24]
 800694a:	69fa      	ldr	r2, [r7, #28]
 800694c:	e841 2300 	strex	r3, r2, [r1]
 8006950:	617b      	str	r3, [r7, #20]
   return(result);
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1e3      	bne.n	8006920 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006958:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800695c:	4619      	mov	r1, r3
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f848 	bl	80069f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006964:	e023      	b.n	80069ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800696a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800696e:	2b00      	cmp	r3, #0
 8006970:	d009      	beq.n	8006986 <HAL_UART_IRQHandler+0x4ea>
 8006972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f929 	bl	8006bd6 <UART_Transmit_IT>
    return;
 8006984:	e014      	b.n	80069b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800698a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00e      	beq.n	80069b0 <HAL_UART_IRQHandler+0x514>
 8006992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699a:	2b00      	cmp	r3, #0
 800699c:	d008      	beq.n	80069b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f969 	bl	8006c76 <UART_EndTransmit_IT>
    return;
 80069a4:	e004      	b.n	80069b0 <HAL_UART_IRQHandler+0x514>
    return;
 80069a6:	bf00      	nop
 80069a8:	e002      	b.n	80069b0 <HAL_UART_IRQHandler+0x514>
      return;
 80069aa:	bf00      	nop
 80069ac:	e000      	b.n	80069b0 <HAL_UART_IRQHandler+0x514>
      return;
 80069ae:	bf00      	nop
  }
}
 80069b0:	37e8      	adds	r7, #232	; 0xe8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop

080069b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	460b      	mov	r3, r1
 80069fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b090      	sub	sp, #64	; 0x40
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	603b      	str	r3, [r7, #0]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a1c:	e050      	b.n	8006ac0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a24:	d04c      	beq.n	8006ac0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d007      	beq.n	8006a3c <UART_WaitOnFlagUntilTimeout+0x30>
 8006a2c:	f7fb ffe8 	bl	8002a00 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d241      	bcs.n	8006ac0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	330c      	adds	r3, #12
 8006a42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a46:	e853 3f00 	ldrex	r3, [r3]
 8006a4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	330c      	adds	r3, #12
 8006a5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a5c:	637a      	str	r2, [r7, #52]	; 0x34
 8006a5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a64:	e841 2300 	strex	r3, r2, [r1]
 8006a68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1e5      	bne.n	8006a3c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3314      	adds	r3, #20
 8006a76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	e853 3f00 	ldrex	r3, [r3]
 8006a7e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	f023 0301 	bic.w	r3, r3, #1
 8006a86:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3314      	adds	r3, #20
 8006a8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a90:	623a      	str	r2, [r7, #32]
 8006a92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a94:	69f9      	ldr	r1, [r7, #28]
 8006a96:	6a3a      	ldr	r2, [r7, #32]
 8006a98:	e841 2300 	strex	r3, r2, [r1]
 8006a9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1e5      	bne.n	8006a70 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2220      	movs	r2, #32
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e00f      	b.n	8006ae0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	bf0c      	ite	eq
 8006ad0:	2301      	moveq	r3, #1
 8006ad2:	2300      	movne	r3, #0
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	79fb      	ldrb	r3, [r7, #7]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d09f      	beq.n	8006a1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3740      	adds	r7, #64	; 0x40
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b095      	sub	sp, #84	; 0x54
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	330c      	adds	r3, #12
 8006af6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006afa:	e853 3f00 	ldrex	r3, [r3]
 8006afe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	330c      	adds	r3, #12
 8006b0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b10:	643a      	str	r2, [r7, #64]	; 0x40
 8006b12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b18:	e841 2300 	strex	r3, r2, [r1]
 8006b1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1e5      	bne.n	8006af0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	3314      	adds	r3, #20
 8006b2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2c:	6a3b      	ldr	r3, [r7, #32]
 8006b2e:	e853 3f00 	ldrex	r3, [r3]
 8006b32:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	f023 0301 	bic.w	r3, r3, #1
 8006b3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	3314      	adds	r3, #20
 8006b42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b4c:	e841 2300 	strex	r3, r2, [r1]
 8006b50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1e5      	bne.n	8006b24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d119      	bne.n	8006b94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	330c      	adds	r3, #12
 8006b66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	e853 3f00 	ldrex	r3, [r3]
 8006b6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	f023 0310 	bic.w	r3, r3, #16
 8006b76:	647b      	str	r3, [r7, #68]	; 0x44
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	330c      	adds	r3, #12
 8006b7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b80:	61ba      	str	r2, [r7, #24]
 8006b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b84:	6979      	ldr	r1, [r7, #20]
 8006b86:	69ba      	ldr	r2, [r7, #24]
 8006b88:	e841 2300 	strex	r3, r2, [r1]
 8006b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1e5      	bne.n	8006b60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2220      	movs	r2, #32
 8006b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006ba2:	bf00      	nop
 8006ba4:	3754      	adds	r7, #84	; 0x54
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f7ff ff09 	bl	80069e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bce:	bf00      	nop
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b085      	sub	sp, #20
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b21      	cmp	r3, #33	; 0x21
 8006be8:	d13e      	bne.n	8006c68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf2:	d114      	bne.n	8006c1e <UART_Transmit_IT+0x48>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d110      	bne.n	8006c1e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a1b      	ldr	r3, [r3, #32]
 8006c00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	1c9a      	adds	r2, r3, #2
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	621a      	str	r2, [r3, #32]
 8006c1c:	e008      	b.n	8006c30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	1c59      	adds	r1, r3, #1
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	6211      	str	r1, [r2, #32]
 8006c28:	781a      	ldrb	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	3b01      	subs	r3, #1
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10f      	bne.n	8006c64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68da      	ldr	r2, [r3, #12]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68da      	ldr	r2, [r3, #12]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c64:	2300      	movs	r3, #0
 8006c66:	e000      	b.n	8006c6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c68:	2302      	movs	r3, #2
  }
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b082      	sub	sp, #8
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68da      	ldr	r2, [r3, #12]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7ff fe8e 	bl	80069b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b08c      	sub	sp, #48	; 0x30
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b22      	cmp	r3, #34	; 0x22
 8006cb8:	f040 80ab 	bne.w	8006e12 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc4:	d117      	bne.n	8006cf6 <UART_Receive_IT+0x50>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d113      	bne.n	8006cf6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cee:	1c9a      	adds	r2, r3, #2
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	629a      	str	r2, [r3, #40]	; 0x28
 8006cf4:	e026      	b.n	8006d44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d08:	d007      	beq.n	8006d1a <UART_Receive_IT+0x74>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10a      	bne.n	8006d28 <UART_Receive_IT+0x82>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d106      	bne.n	8006d28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d24:	701a      	strb	r2, [r3, #0]
 8006d26:	e008      	b.n	8006d3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d34:	b2da      	uxtb	r2, r3
 8006d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3e:	1c5a      	adds	r2, r3, #1
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	4619      	mov	r1, r3
 8006d52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d15a      	bne.n	8006e0e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68da      	ldr	r2, [r3, #12]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f022 0220 	bic.w	r2, r2, #32
 8006d66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	695a      	ldr	r2, [r3, #20]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f022 0201 	bic.w	r2, r2, #1
 8006d86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d135      	bne.n	8006e04 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	330c      	adds	r3, #12
 8006da4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	e853 3f00 	ldrex	r3, [r3]
 8006dac:	613b      	str	r3, [r7, #16]
   return(result);
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f023 0310 	bic.w	r3, r3, #16
 8006db4:	627b      	str	r3, [r7, #36]	; 0x24
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	330c      	adds	r3, #12
 8006dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dbe:	623a      	str	r2, [r7, #32]
 8006dc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc2:	69f9      	ldr	r1, [r7, #28]
 8006dc4:	6a3a      	ldr	r2, [r7, #32]
 8006dc6:	e841 2300 	strex	r3, r2, [r1]
 8006dca:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1e5      	bne.n	8006d9e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0310 	and.w	r3, r3, #16
 8006ddc:	2b10      	cmp	r3, #16
 8006dde:	d10a      	bne.n	8006df6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006de0:	2300      	movs	r3, #0
 8006de2:	60fb      	str	r3, [r7, #12]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7ff fdf9 	bl	80069f4 <HAL_UARTEx_RxEventCallback>
 8006e02:	e002      	b.n	8006e0a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7ff fde1 	bl	80069cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	e002      	b.n	8006e14 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	e000      	b.n	8006e14 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006e12:	2302      	movs	r3, #2
  }
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3730      	adds	r7, #48	; 0x30
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e20:	b0c0      	sub	sp, #256	; 0x100
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e38:	68d9      	ldr	r1, [r3, #12]
 8006e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	ea40 0301 	orr.w	r3, r0, r1
 8006e44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e4a:	689a      	ldr	r2, [r3, #8]
 8006e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	431a      	orrs	r2, r3
 8006e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006e74:	f021 010c 	bic.w	r1, r1, #12
 8006e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e82:	430b      	orrs	r3, r1
 8006e84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e96:	6999      	ldr	r1, [r3, #24]
 8006e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	ea40 0301 	orr.w	r3, r0, r1
 8006ea2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	4b8f      	ldr	r3, [pc, #572]	; (80070e8 <UART_SetConfig+0x2cc>)
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d005      	beq.n	8006ebc <UART_SetConfig+0xa0>
 8006eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	4b8d      	ldr	r3, [pc, #564]	; (80070ec <UART_SetConfig+0x2d0>)
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d104      	bne.n	8006ec6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ebc:	f7fd fea4 	bl	8004c08 <HAL_RCC_GetPCLK2Freq>
 8006ec0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006ec4:	e003      	b.n	8006ece <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ec6:	f7fd fe8b 	bl	8004be0 <HAL_RCC_GetPCLK1Freq>
 8006eca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed2:	69db      	ldr	r3, [r3, #28]
 8006ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ed8:	f040 810c 	bne.w	80070f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ee6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006eea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006eee:	4622      	mov	r2, r4
 8006ef0:	462b      	mov	r3, r5
 8006ef2:	1891      	adds	r1, r2, r2
 8006ef4:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ef6:	415b      	adcs	r3, r3
 8006ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006efa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006efe:	4621      	mov	r1, r4
 8006f00:	eb12 0801 	adds.w	r8, r2, r1
 8006f04:	4629      	mov	r1, r5
 8006f06:	eb43 0901 	adc.w	r9, r3, r1
 8006f0a:	f04f 0200 	mov.w	r2, #0
 8006f0e:	f04f 0300 	mov.w	r3, #0
 8006f12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f1e:	4690      	mov	r8, r2
 8006f20:	4699      	mov	r9, r3
 8006f22:	4623      	mov	r3, r4
 8006f24:	eb18 0303 	adds.w	r3, r8, r3
 8006f28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f2c:	462b      	mov	r3, r5
 8006f2e:	eb49 0303 	adc.w	r3, r9, r3
 8006f32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006f46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	18db      	adds	r3, r3, r3
 8006f4e:	653b      	str	r3, [r7, #80]	; 0x50
 8006f50:	4613      	mov	r3, r2
 8006f52:	eb42 0303 	adc.w	r3, r2, r3
 8006f56:	657b      	str	r3, [r7, #84]	; 0x54
 8006f58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006f5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006f60:	f7f9 fd7c 	bl	8000a5c <__aeabi_uldivmod>
 8006f64:	4602      	mov	r2, r0
 8006f66:	460b      	mov	r3, r1
 8006f68:	4b61      	ldr	r3, [pc, #388]	; (80070f0 <UART_SetConfig+0x2d4>)
 8006f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f6e:	095b      	lsrs	r3, r3, #5
 8006f70:	011c      	lsls	r4, r3, #4
 8006f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f76:	2200      	movs	r2, #0
 8006f78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006f80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006f84:	4642      	mov	r2, r8
 8006f86:	464b      	mov	r3, r9
 8006f88:	1891      	adds	r1, r2, r2
 8006f8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006f8c:	415b      	adcs	r3, r3
 8006f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006f94:	4641      	mov	r1, r8
 8006f96:	eb12 0a01 	adds.w	sl, r2, r1
 8006f9a:	4649      	mov	r1, r9
 8006f9c:	eb43 0b01 	adc.w	fp, r3, r1
 8006fa0:	f04f 0200 	mov.w	r2, #0
 8006fa4:	f04f 0300 	mov.w	r3, #0
 8006fa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006fac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006fb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fb4:	4692      	mov	sl, r2
 8006fb6:	469b      	mov	fp, r3
 8006fb8:	4643      	mov	r3, r8
 8006fba:	eb1a 0303 	adds.w	r3, sl, r3
 8006fbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fc2:	464b      	mov	r3, r9
 8006fc4:	eb4b 0303 	adc.w	r3, fp, r3
 8006fc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006fdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	18db      	adds	r3, r3, r3
 8006fe4:	643b      	str	r3, [r7, #64]	; 0x40
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	eb42 0303 	adc.w	r3, r2, r3
 8006fec:	647b      	str	r3, [r7, #68]	; 0x44
 8006fee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ff2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006ff6:	f7f9 fd31 	bl	8000a5c <__aeabi_uldivmod>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	4611      	mov	r1, r2
 8007000:	4b3b      	ldr	r3, [pc, #236]	; (80070f0 <UART_SetConfig+0x2d4>)
 8007002:	fba3 2301 	umull	r2, r3, r3, r1
 8007006:	095b      	lsrs	r3, r3, #5
 8007008:	2264      	movs	r2, #100	; 0x64
 800700a:	fb02 f303 	mul.w	r3, r2, r3
 800700e:	1acb      	subs	r3, r1, r3
 8007010:	00db      	lsls	r3, r3, #3
 8007012:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007016:	4b36      	ldr	r3, [pc, #216]	; (80070f0 <UART_SetConfig+0x2d4>)
 8007018:	fba3 2302 	umull	r2, r3, r3, r2
 800701c:	095b      	lsrs	r3, r3, #5
 800701e:	005b      	lsls	r3, r3, #1
 8007020:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007024:	441c      	add	r4, r3
 8007026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800702a:	2200      	movs	r2, #0
 800702c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007030:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007034:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007038:	4642      	mov	r2, r8
 800703a:	464b      	mov	r3, r9
 800703c:	1891      	adds	r1, r2, r2
 800703e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007040:	415b      	adcs	r3, r3
 8007042:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007044:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007048:	4641      	mov	r1, r8
 800704a:	1851      	adds	r1, r2, r1
 800704c:	6339      	str	r1, [r7, #48]	; 0x30
 800704e:	4649      	mov	r1, r9
 8007050:	414b      	adcs	r3, r1
 8007052:	637b      	str	r3, [r7, #52]	; 0x34
 8007054:	f04f 0200 	mov.w	r2, #0
 8007058:	f04f 0300 	mov.w	r3, #0
 800705c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007060:	4659      	mov	r1, fp
 8007062:	00cb      	lsls	r3, r1, #3
 8007064:	4651      	mov	r1, sl
 8007066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800706a:	4651      	mov	r1, sl
 800706c:	00ca      	lsls	r2, r1, #3
 800706e:	4610      	mov	r0, r2
 8007070:	4619      	mov	r1, r3
 8007072:	4603      	mov	r3, r0
 8007074:	4642      	mov	r2, r8
 8007076:	189b      	adds	r3, r3, r2
 8007078:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800707c:	464b      	mov	r3, r9
 800707e:	460a      	mov	r2, r1
 8007080:	eb42 0303 	adc.w	r3, r2, r3
 8007084:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007094:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007098:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800709c:	460b      	mov	r3, r1
 800709e:	18db      	adds	r3, r3, r3
 80070a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80070a2:	4613      	mov	r3, r2
 80070a4:	eb42 0303 	adc.w	r3, r2, r3
 80070a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80070ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80070b2:	f7f9 fcd3 	bl	8000a5c <__aeabi_uldivmod>
 80070b6:	4602      	mov	r2, r0
 80070b8:	460b      	mov	r3, r1
 80070ba:	4b0d      	ldr	r3, [pc, #52]	; (80070f0 <UART_SetConfig+0x2d4>)
 80070bc:	fba3 1302 	umull	r1, r3, r3, r2
 80070c0:	095b      	lsrs	r3, r3, #5
 80070c2:	2164      	movs	r1, #100	; 0x64
 80070c4:	fb01 f303 	mul.w	r3, r1, r3
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	00db      	lsls	r3, r3, #3
 80070cc:	3332      	adds	r3, #50	; 0x32
 80070ce:	4a08      	ldr	r2, [pc, #32]	; (80070f0 <UART_SetConfig+0x2d4>)
 80070d0:	fba2 2303 	umull	r2, r3, r2, r3
 80070d4:	095b      	lsrs	r3, r3, #5
 80070d6:	f003 0207 	and.w	r2, r3, #7
 80070da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4422      	add	r2, r4
 80070e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80070e4:	e105      	b.n	80072f2 <UART_SetConfig+0x4d6>
 80070e6:	bf00      	nop
 80070e8:	40011000 	.word	0x40011000
 80070ec:	40011400 	.word	0x40011400
 80070f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070f8:	2200      	movs	r2, #0
 80070fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80070fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007102:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007106:	4642      	mov	r2, r8
 8007108:	464b      	mov	r3, r9
 800710a:	1891      	adds	r1, r2, r2
 800710c:	6239      	str	r1, [r7, #32]
 800710e:	415b      	adcs	r3, r3
 8007110:	627b      	str	r3, [r7, #36]	; 0x24
 8007112:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007116:	4641      	mov	r1, r8
 8007118:	1854      	adds	r4, r2, r1
 800711a:	4649      	mov	r1, r9
 800711c:	eb43 0501 	adc.w	r5, r3, r1
 8007120:	f04f 0200 	mov.w	r2, #0
 8007124:	f04f 0300 	mov.w	r3, #0
 8007128:	00eb      	lsls	r3, r5, #3
 800712a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800712e:	00e2      	lsls	r2, r4, #3
 8007130:	4614      	mov	r4, r2
 8007132:	461d      	mov	r5, r3
 8007134:	4643      	mov	r3, r8
 8007136:	18e3      	adds	r3, r4, r3
 8007138:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800713c:	464b      	mov	r3, r9
 800713e:	eb45 0303 	adc.w	r3, r5, r3
 8007142:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007152:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007156:	f04f 0200 	mov.w	r2, #0
 800715a:	f04f 0300 	mov.w	r3, #0
 800715e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007162:	4629      	mov	r1, r5
 8007164:	008b      	lsls	r3, r1, #2
 8007166:	4621      	mov	r1, r4
 8007168:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800716c:	4621      	mov	r1, r4
 800716e:	008a      	lsls	r2, r1, #2
 8007170:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007174:	f7f9 fc72 	bl	8000a5c <__aeabi_uldivmod>
 8007178:	4602      	mov	r2, r0
 800717a:	460b      	mov	r3, r1
 800717c:	4b60      	ldr	r3, [pc, #384]	; (8007300 <UART_SetConfig+0x4e4>)
 800717e:	fba3 2302 	umull	r2, r3, r3, r2
 8007182:	095b      	lsrs	r3, r3, #5
 8007184:	011c      	lsls	r4, r3, #4
 8007186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800718a:	2200      	movs	r2, #0
 800718c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007190:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007194:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007198:	4642      	mov	r2, r8
 800719a:	464b      	mov	r3, r9
 800719c:	1891      	adds	r1, r2, r2
 800719e:	61b9      	str	r1, [r7, #24]
 80071a0:	415b      	adcs	r3, r3
 80071a2:	61fb      	str	r3, [r7, #28]
 80071a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071a8:	4641      	mov	r1, r8
 80071aa:	1851      	adds	r1, r2, r1
 80071ac:	6139      	str	r1, [r7, #16]
 80071ae:	4649      	mov	r1, r9
 80071b0:	414b      	adcs	r3, r1
 80071b2:	617b      	str	r3, [r7, #20]
 80071b4:	f04f 0200 	mov.w	r2, #0
 80071b8:	f04f 0300 	mov.w	r3, #0
 80071bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071c0:	4659      	mov	r1, fp
 80071c2:	00cb      	lsls	r3, r1, #3
 80071c4:	4651      	mov	r1, sl
 80071c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071ca:	4651      	mov	r1, sl
 80071cc:	00ca      	lsls	r2, r1, #3
 80071ce:	4610      	mov	r0, r2
 80071d0:	4619      	mov	r1, r3
 80071d2:	4603      	mov	r3, r0
 80071d4:	4642      	mov	r2, r8
 80071d6:	189b      	adds	r3, r3, r2
 80071d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80071dc:	464b      	mov	r3, r9
 80071de:	460a      	mov	r2, r1
 80071e0:	eb42 0303 	adc.w	r3, r2, r3
 80071e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80071e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80071f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80071f4:	f04f 0200 	mov.w	r2, #0
 80071f8:	f04f 0300 	mov.w	r3, #0
 80071fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007200:	4649      	mov	r1, r9
 8007202:	008b      	lsls	r3, r1, #2
 8007204:	4641      	mov	r1, r8
 8007206:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800720a:	4641      	mov	r1, r8
 800720c:	008a      	lsls	r2, r1, #2
 800720e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007212:	f7f9 fc23 	bl	8000a5c <__aeabi_uldivmod>
 8007216:	4602      	mov	r2, r0
 8007218:	460b      	mov	r3, r1
 800721a:	4b39      	ldr	r3, [pc, #228]	; (8007300 <UART_SetConfig+0x4e4>)
 800721c:	fba3 1302 	umull	r1, r3, r3, r2
 8007220:	095b      	lsrs	r3, r3, #5
 8007222:	2164      	movs	r1, #100	; 0x64
 8007224:	fb01 f303 	mul.w	r3, r1, r3
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	011b      	lsls	r3, r3, #4
 800722c:	3332      	adds	r3, #50	; 0x32
 800722e:	4a34      	ldr	r2, [pc, #208]	; (8007300 <UART_SetConfig+0x4e4>)
 8007230:	fba2 2303 	umull	r2, r3, r2, r3
 8007234:	095b      	lsrs	r3, r3, #5
 8007236:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800723a:	441c      	add	r4, r3
 800723c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007240:	2200      	movs	r2, #0
 8007242:	673b      	str	r3, [r7, #112]	; 0x70
 8007244:	677a      	str	r2, [r7, #116]	; 0x74
 8007246:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800724a:	4642      	mov	r2, r8
 800724c:	464b      	mov	r3, r9
 800724e:	1891      	adds	r1, r2, r2
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	415b      	adcs	r3, r3
 8007254:	60fb      	str	r3, [r7, #12]
 8007256:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800725a:	4641      	mov	r1, r8
 800725c:	1851      	adds	r1, r2, r1
 800725e:	6039      	str	r1, [r7, #0]
 8007260:	4649      	mov	r1, r9
 8007262:	414b      	adcs	r3, r1
 8007264:	607b      	str	r3, [r7, #4]
 8007266:	f04f 0200 	mov.w	r2, #0
 800726a:	f04f 0300 	mov.w	r3, #0
 800726e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007272:	4659      	mov	r1, fp
 8007274:	00cb      	lsls	r3, r1, #3
 8007276:	4651      	mov	r1, sl
 8007278:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800727c:	4651      	mov	r1, sl
 800727e:	00ca      	lsls	r2, r1, #3
 8007280:	4610      	mov	r0, r2
 8007282:	4619      	mov	r1, r3
 8007284:	4603      	mov	r3, r0
 8007286:	4642      	mov	r2, r8
 8007288:	189b      	adds	r3, r3, r2
 800728a:	66bb      	str	r3, [r7, #104]	; 0x68
 800728c:	464b      	mov	r3, r9
 800728e:	460a      	mov	r2, r1
 8007290:	eb42 0303 	adc.w	r3, r2, r3
 8007294:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	663b      	str	r3, [r7, #96]	; 0x60
 80072a0:	667a      	str	r2, [r7, #100]	; 0x64
 80072a2:	f04f 0200 	mov.w	r2, #0
 80072a6:	f04f 0300 	mov.w	r3, #0
 80072aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80072ae:	4649      	mov	r1, r9
 80072b0:	008b      	lsls	r3, r1, #2
 80072b2:	4641      	mov	r1, r8
 80072b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072b8:	4641      	mov	r1, r8
 80072ba:	008a      	lsls	r2, r1, #2
 80072bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80072c0:	f7f9 fbcc 	bl	8000a5c <__aeabi_uldivmod>
 80072c4:	4602      	mov	r2, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	4b0d      	ldr	r3, [pc, #52]	; (8007300 <UART_SetConfig+0x4e4>)
 80072ca:	fba3 1302 	umull	r1, r3, r3, r2
 80072ce:	095b      	lsrs	r3, r3, #5
 80072d0:	2164      	movs	r1, #100	; 0x64
 80072d2:	fb01 f303 	mul.w	r3, r1, r3
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	011b      	lsls	r3, r3, #4
 80072da:	3332      	adds	r3, #50	; 0x32
 80072dc:	4a08      	ldr	r2, [pc, #32]	; (8007300 <UART_SetConfig+0x4e4>)
 80072de:	fba2 2303 	umull	r2, r3, r2, r3
 80072e2:	095b      	lsrs	r3, r3, #5
 80072e4:	f003 020f 	and.w	r2, r3, #15
 80072e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4422      	add	r2, r4
 80072f0:	609a      	str	r2, [r3, #8]
}
 80072f2:	bf00      	nop
 80072f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80072f8:	46bd      	mov	sp, r7
 80072fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072fe:	bf00      	nop
 8007300:	51eb851f 	.word	0x51eb851f

08007304 <__errno>:
 8007304:	4b01      	ldr	r3, [pc, #4]	; (800730c <__errno+0x8>)
 8007306:	6818      	ldr	r0, [r3, #0]
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	20000018 	.word	0x20000018

08007310 <__libc_init_array>:
 8007310:	b570      	push	{r4, r5, r6, lr}
 8007312:	4d0d      	ldr	r5, [pc, #52]	; (8007348 <__libc_init_array+0x38>)
 8007314:	4c0d      	ldr	r4, [pc, #52]	; (800734c <__libc_init_array+0x3c>)
 8007316:	1b64      	subs	r4, r4, r5
 8007318:	10a4      	asrs	r4, r4, #2
 800731a:	2600      	movs	r6, #0
 800731c:	42a6      	cmp	r6, r4
 800731e:	d109      	bne.n	8007334 <__libc_init_array+0x24>
 8007320:	4d0b      	ldr	r5, [pc, #44]	; (8007350 <__libc_init_array+0x40>)
 8007322:	4c0c      	ldr	r4, [pc, #48]	; (8007354 <__libc_init_array+0x44>)
 8007324:	f000 fc8e 	bl	8007c44 <_init>
 8007328:	1b64      	subs	r4, r4, r5
 800732a:	10a4      	asrs	r4, r4, #2
 800732c:	2600      	movs	r6, #0
 800732e:	42a6      	cmp	r6, r4
 8007330:	d105      	bne.n	800733e <__libc_init_array+0x2e>
 8007332:	bd70      	pop	{r4, r5, r6, pc}
 8007334:	f855 3b04 	ldr.w	r3, [r5], #4
 8007338:	4798      	blx	r3
 800733a:	3601      	adds	r6, #1
 800733c:	e7ee      	b.n	800731c <__libc_init_array+0xc>
 800733e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007342:	4798      	blx	r3
 8007344:	3601      	adds	r6, #1
 8007346:	e7f2      	b.n	800732e <__libc_init_array+0x1e>
 8007348:	08008ba4 	.word	0x08008ba4
 800734c:	08008ba4 	.word	0x08008ba4
 8007350:	08008ba4 	.word	0x08008ba4
 8007354:	08008ba8 	.word	0x08008ba8

08007358 <memset>:
 8007358:	4402      	add	r2, r0
 800735a:	4603      	mov	r3, r0
 800735c:	4293      	cmp	r3, r2
 800735e:	d100      	bne.n	8007362 <memset+0xa>
 8007360:	4770      	bx	lr
 8007362:	f803 1b01 	strb.w	r1, [r3], #1
 8007366:	e7f9      	b.n	800735c <memset+0x4>

08007368 <siprintf>:
 8007368:	b40e      	push	{r1, r2, r3}
 800736a:	b500      	push	{lr}
 800736c:	b09c      	sub	sp, #112	; 0x70
 800736e:	ab1d      	add	r3, sp, #116	; 0x74
 8007370:	9002      	str	r0, [sp, #8]
 8007372:	9006      	str	r0, [sp, #24]
 8007374:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007378:	4809      	ldr	r0, [pc, #36]	; (80073a0 <siprintf+0x38>)
 800737a:	9107      	str	r1, [sp, #28]
 800737c:	9104      	str	r1, [sp, #16]
 800737e:	4909      	ldr	r1, [pc, #36]	; (80073a4 <siprintf+0x3c>)
 8007380:	f853 2b04 	ldr.w	r2, [r3], #4
 8007384:	9105      	str	r1, [sp, #20]
 8007386:	6800      	ldr	r0, [r0, #0]
 8007388:	9301      	str	r3, [sp, #4]
 800738a:	a902      	add	r1, sp, #8
 800738c:	f000 f868 	bl	8007460 <_svfiprintf_r>
 8007390:	9b02      	ldr	r3, [sp, #8]
 8007392:	2200      	movs	r2, #0
 8007394:	701a      	strb	r2, [r3, #0]
 8007396:	b01c      	add	sp, #112	; 0x70
 8007398:	f85d eb04 	ldr.w	lr, [sp], #4
 800739c:	b003      	add	sp, #12
 800739e:	4770      	bx	lr
 80073a0:	20000018 	.word	0x20000018
 80073a4:	ffff0208 	.word	0xffff0208

080073a8 <__ssputs_r>:
 80073a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073ac:	688e      	ldr	r6, [r1, #8]
 80073ae:	429e      	cmp	r6, r3
 80073b0:	4682      	mov	sl, r0
 80073b2:	460c      	mov	r4, r1
 80073b4:	4690      	mov	r8, r2
 80073b6:	461f      	mov	r7, r3
 80073b8:	d838      	bhi.n	800742c <__ssputs_r+0x84>
 80073ba:	898a      	ldrh	r2, [r1, #12]
 80073bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073c0:	d032      	beq.n	8007428 <__ssputs_r+0x80>
 80073c2:	6825      	ldr	r5, [r4, #0]
 80073c4:	6909      	ldr	r1, [r1, #16]
 80073c6:	eba5 0901 	sub.w	r9, r5, r1
 80073ca:	6965      	ldr	r5, [r4, #20]
 80073cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073d4:	3301      	adds	r3, #1
 80073d6:	444b      	add	r3, r9
 80073d8:	106d      	asrs	r5, r5, #1
 80073da:	429d      	cmp	r5, r3
 80073dc:	bf38      	it	cc
 80073de:	461d      	movcc	r5, r3
 80073e0:	0553      	lsls	r3, r2, #21
 80073e2:	d531      	bpl.n	8007448 <__ssputs_r+0xa0>
 80073e4:	4629      	mov	r1, r5
 80073e6:	f000 fb63 	bl	8007ab0 <_malloc_r>
 80073ea:	4606      	mov	r6, r0
 80073ec:	b950      	cbnz	r0, 8007404 <__ssputs_r+0x5c>
 80073ee:	230c      	movs	r3, #12
 80073f0:	f8ca 3000 	str.w	r3, [sl]
 80073f4:	89a3      	ldrh	r3, [r4, #12]
 80073f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073fa:	81a3      	strh	r3, [r4, #12]
 80073fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007404:	6921      	ldr	r1, [r4, #16]
 8007406:	464a      	mov	r2, r9
 8007408:	f000 fabe 	bl	8007988 <memcpy>
 800740c:	89a3      	ldrh	r3, [r4, #12]
 800740e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007416:	81a3      	strh	r3, [r4, #12]
 8007418:	6126      	str	r6, [r4, #16]
 800741a:	6165      	str	r5, [r4, #20]
 800741c:	444e      	add	r6, r9
 800741e:	eba5 0509 	sub.w	r5, r5, r9
 8007422:	6026      	str	r6, [r4, #0]
 8007424:	60a5      	str	r5, [r4, #8]
 8007426:	463e      	mov	r6, r7
 8007428:	42be      	cmp	r6, r7
 800742a:	d900      	bls.n	800742e <__ssputs_r+0x86>
 800742c:	463e      	mov	r6, r7
 800742e:	6820      	ldr	r0, [r4, #0]
 8007430:	4632      	mov	r2, r6
 8007432:	4641      	mov	r1, r8
 8007434:	f000 fab6 	bl	80079a4 <memmove>
 8007438:	68a3      	ldr	r3, [r4, #8]
 800743a:	1b9b      	subs	r3, r3, r6
 800743c:	60a3      	str	r3, [r4, #8]
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	4433      	add	r3, r6
 8007442:	6023      	str	r3, [r4, #0]
 8007444:	2000      	movs	r0, #0
 8007446:	e7db      	b.n	8007400 <__ssputs_r+0x58>
 8007448:	462a      	mov	r2, r5
 800744a:	f000 fba5 	bl	8007b98 <_realloc_r>
 800744e:	4606      	mov	r6, r0
 8007450:	2800      	cmp	r0, #0
 8007452:	d1e1      	bne.n	8007418 <__ssputs_r+0x70>
 8007454:	6921      	ldr	r1, [r4, #16]
 8007456:	4650      	mov	r0, sl
 8007458:	f000 fabe 	bl	80079d8 <_free_r>
 800745c:	e7c7      	b.n	80073ee <__ssputs_r+0x46>
	...

08007460 <_svfiprintf_r>:
 8007460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007464:	4698      	mov	r8, r3
 8007466:	898b      	ldrh	r3, [r1, #12]
 8007468:	061b      	lsls	r3, r3, #24
 800746a:	b09d      	sub	sp, #116	; 0x74
 800746c:	4607      	mov	r7, r0
 800746e:	460d      	mov	r5, r1
 8007470:	4614      	mov	r4, r2
 8007472:	d50e      	bpl.n	8007492 <_svfiprintf_r+0x32>
 8007474:	690b      	ldr	r3, [r1, #16]
 8007476:	b963      	cbnz	r3, 8007492 <_svfiprintf_r+0x32>
 8007478:	2140      	movs	r1, #64	; 0x40
 800747a:	f000 fb19 	bl	8007ab0 <_malloc_r>
 800747e:	6028      	str	r0, [r5, #0]
 8007480:	6128      	str	r0, [r5, #16]
 8007482:	b920      	cbnz	r0, 800748e <_svfiprintf_r+0x2e>
 8007484:	230c      	movs	r3, #12
 8007486:	603b      	str	r3, [r7, #0]
 8007488:	f04f 30ff 	mov.w	r0, #4294967295
 800748c:	e0d1      	b.n	8007632 <_svfiprintf_r+0x1d2>
 800748e:	2340      	movs	r3, #64	; 0x40
 8007490:	616b      	str	r3, [r5, #20]
 8007492:	2300      	movs	r3, #0
 8007494:	9309      	str	r3, [sp, #36]	; 0x24
 8007496:	2320      	movs	r3, #32
 8007498:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800749c:	f8cd 800c 	str.w	r8, [sp, #12]
 80074a0:	2330      	movs	r3, #48	; 0x30
 80074a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800764c <_svfiprintf_r+0x1ec>
 80074a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074aa:	f04f 0901 	mov.w	r9, #1
 80074ae:	4623      	mov	r3, r4
 80074b0:	469a      	mov	sl, r3
 80074b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074b6:	b10a      	cbz	r2, 80074bc <_svfiprintf_r+0x5c>
 80074b8:	2a25      	cmp	r2, #37	; 0x25
 80074ba:	d1f9      	bne.n	80074b0 <_svfiprintf_r+0x50>
 80074bc:	ebba 0b04 	subs.w	fp, sl, r4
 80074c0:	d00b      	beq.n	80074da <_svfiprintf_r+0x7a>
 80074c2:	465b      	mov	r3, fp
 80074c4:	4622      	mov	r2, r4
 80074c6:	4629      	mov	r1, r5
 80074c8:	4638      	mov	r0, r7
 80074ca:	f7ff ff6d 	bl	80073a8 <__ssputs_r>
 80074ce:	3001      	adds	r0, #1
 80074d0:	f000 80aa 	beq.w	8007628 <_svfiprintf_r+0x1c8>
 80074d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074d6:	445a      	add	r2, fp
 80074d8:	9209      	str	r2, [sp, #36]	; 0x24
 80074da:	f89a 3000 	ldrb.w	r3, [sl]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 80a2 	beq.w	8007628 <_svfiprintf_r+0x1c8>
 80074e4:	2300      	movs	r3, #0
 80074e6:	f04f 32ff 	mov.w	r2, #4294967295
 80074ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074ee:	f10a 0a01 	add.w	sl, sl, #1
 80074f2:	9304      	str	r3, [sp, #16]
 80074f4:	9307      	str	r3, [sp, #28]
 80074f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074fa:	931a      	str	r3, [sp, #104]	; 0x68
 80074fc:	4654      	mov	r4, sl
 80074fe:	2205      	movs	r2, #5
 8007500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007504:	4851      	ldr	r0, [pc, #324]	; (800764c <_svfiprintf_r+0x1ec>)
 8007506:	f7f8 fe63 	bl	80001d0 <memchr>
 800750a:	9a04      	ldr	r2, [sp, #16]
 800750c:	b9d8      	cbnz	r0, 8007546 <_svfiprintf_r+0xe6>
 800750e:	06d0      	lsls	r0, r2, #27
 8007510:	bf44      	itt	mi
 8007512:	2320      	movmi	r3, #32
 8007514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007518:	0711      	lsls	r1, r2, #28
 800751a:	bf44      	itt	mi
 800751c:	232b      	movmi	r3, #43	; 0x2b
 800751e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007522:	f89a 3000 	ldrb.w	r3, [sl]
 8007526:	2b2a      	cmp	r3, #42	; 0x2a
 8007528:	d015      	beq.n	8007556 <_svfiprintf_r+0xf6>
 800752a:	9a07      	ldr	r2, [sp, #28]
 800752c:	4654      	mov	r4, sl
 800752e:	2000      	movs	r0, #0
 8007530:	f04f 0c0a 	mov.w	ip, #10
 8007534:	4621      	mov	r1, r4
 8007536:	f811 3b01 	ldrb.w	r3, [r1], #1
 800753a:	3b30      	subs	r3, #48	; 0x30
 800753c:	2b09      	cmp	r3, #9
 800753e:	d94e      	bls.n	80075de <_svfiprintf_r+0x17e>
 8007540:	b1b0      	cbz	r0, 8007570 <_svfiprintf_r+0x110>
 8007542:	9207      	str	r2, [sp, #28]
 8007544:	e014      	b.n	8007570 <_svfiprintf_r+0x110>
 8007546:	eba0 0308 	sub.w	r3, r0, r8
 800754a:	fa09 f303 	lsl.w	r3, r9, r3
 800754e:	4313      	orrs	r3, r2
 8007550:	9304      	str	r3, [sp, #16]
 8007552:	46a2      	mov	sl, r4
 8007554:	e7d2      	b.n	80074fc <_svfiprintf_r+0x9c>
 8007556:	9b03      	ldr	r3, [sp, #12]
 8007558:	1d19      	adds	r1, r3, #4
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	9103      	str	r1, [sp, #12]
 800755e:	2b00      	cmp	r3, #0
 8007560:	bfbb      	ittet	lt
 8007562:	425b      	neglt	r3, r3
 8007564:	f042 0202 	orrlt.w	r2, r2, #2
 8007568:	9307      	strge	r3, [sp, #28]
 800756a:	9307      	strlt	r3, [sp, #28]
 800756c:	bfb8      	it	lt
 800756e:	9204      	strlt	r2, [sp, #16]
 8007570:	7823      	ldrb	r3, [r4, #0]
 8007572:	2b2e      	cmp	r3, #46	; 0x2e
 8007574:	d10c      	bne.n	8007590 <_svfiprintf_r+0x130>
 8007576:	7863      	ldrb	r3, [r4, #1]
 8007578:	2b2a      	cmp	r3, #42	; 0x2a
 800757a:	d135      	bne.n	80075e8 <_svfiprintf_r+0x188>
 800757c:	9b03      	ldr	r3, [sp, #12]
 800757e:	1d1a      	adds	r2, r3, #4
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	9203      	str	r2, [sp, #12]
 8007584:	2b00      	cmp	r3, #0
 8007586:	bfb8      	it	lt
 8007588:	f04f 33ff 	movlt.w	r3, #4294967295
 800758c:	3402      	adds	r4, #2
 800758e:	9305      	str	r3, [sp, #20]
 8007590:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800765c <_svfiprintf_r+0x1fc>
 8007594:	7821      	ldrb	r1, [r4, #0]
 8007596:	2203      	movs	r2, #3
 8007598:	4650      	mov	r0, sl
 800759a:	f7f8 fe19 	bl	80001d0 <memchr>
 800759e:	b140      	cbz	r0, 80075b2 <_svfiprintf_r+0x152>
 80075a0:	2340      	movs	r3, #64	; 0x40
 80075a2:	eba0 000a 	sub.w	r0, r0, sl
 80075a6:	fa03 f000 	lsl.w	r0, r3, r0
 80075aa:	9b04      	ldr	r3, [sp, #16]
 80075ac:	4303      	orrs	r3, r0
 80075ae:	3401      	adds	r4, #1
 80075b0:	9304      	str	r3, [sp, #16]
 80075b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075b6:	4826      	ldr	r0, [pc, #152]	; (8007650 <_svfiprintf_r+0x1f0>)
 80075b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075bc:	2206      	movs	r2, #6
 80075be:	f7f8 fe07 	bl	80001d0 <memchr>
 80075c2:	2800      	cmp	r0, #0
 80075c4:	d038      	beq.n	8007638 <_svfiprintf_r+0x1d8>
 80075c6:	4b23      	ldr	r3, [pc, #140]	; (8007654 <_svfiprintf_r+0x1f4>)
 80075c8:	bb1b      	cbnz	r3, 8007612 <_svfiprintf_r+0x1b2>
 80075ca:	9b03      	ldr	r3, [sp, #12]
 80075cc:	3307      	adds	r3, #7
 80075ce:	f023 0307 	bic.w	r3, r3, #7
 80075d2:	3308      	adds	r3, #8
 80075d4:	9303      	str	r3, [sp, #12]
 80075d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d8:	4433      	add	r3, r6
 80075da:	9309      	str	r3, [sp, #36]	; 0x24
 80075dc:	e767      	b.n	80074ae <_svfiprintf_r+0x4e>
 80075de:	fb0c 3202 	mla	r2, ip, r2, r3
 80075e2:	460c      	mov	r4, r1
 80075e4:	2001      	movs	r0, #1
 80075e6:	e7a5      	b.n	8007534 <_svfiprintf_r+0xd4>
 80075e8:	2300      	movs	r3, #0
 80075ea:	3401      	adds	r4, #1
 80075ec:	9305      	str	r3, [sp, #20]
 80075ee:	4619      	mov	r1, r3
 80075f0:	f04f 0c0a 	mov.w	ip, #10
 80075f4:	4620      	mov	r0, r4
 80075f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075fa:	3a30      	subs	r2, #48	; 0x30
 80075fc:	2a09      	cmp	r2, #9
 80075fe:	d903      	bls.n	8007608 <_svfiprintf_r+0x1a8>
 8007600:	2b00      	cmp	r3, #0
 8007602:	d0c5      	beq.n	8007590 <_svfiprintf_r+0x130>
 8007604:	9105      	str	r1, [sp, #20]
 8007606:	e7c3      	b.n	8007590 <_svfiprintf_r+0x130>
 8007608:	fb0c 2101 	mla	r1, ip, r1, r2
 800760c:	4604      	mov	r4, r0
 800760e:	2301      	movs	r3, #1
 8007610:	e7f0      	b.n	80075f4 <_svfiprintf_r+0x194>
 8007612:	ab03      	add	r3, sp, #12
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	462a      	mov	r2, r5
 8007618:	4b0f      	ldr	r3, [pc, #60]	; (8007658 <_svfiprintf_r+0x1f8>)
 800761a:	a904      	add	r1, sp, #16
 800761c:	4638      	mov	r0, r7
 800761e:	f3af 8000 	nop.w
 8007622:	1c42      	adds	r2, r0, #1
 8007624:	4606      	mov	r6, r0
 8007626:	d1d6      	bne.n	80075d6 <_svfiprintf_r+0x176>
 8007628:	89ab      	ldrh	r3, [r5, #12]
 800762a:	065b      	lsls	r3, r3, #25
 800762c:	f53f af2c 	bmi.w	8007488 <_svfiprintf_r+0x28>
 8007630:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007632:	b01d      	add	sp, #116	; 0x74
 8007634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007638:	ab03      	add	r3, sp, #12
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	462a      	mov	r2, r5
 800763e:	4b06      	ldr	r3, [pc, #24]	; (8007658 <_svfiprintf_r+0x1f8>)
 8007640:	a904      	add	r1, sp, #16
 8007642:	4638      	mov	r0, r7
 8007644:	f000 f87a 	bl	800773c <_printf_i>
 8007648:	e7eb      	b.n	8007622 <_svfiprintf_r+0x1c2>
 800764a:	bf00      	nop
 800764c:	08008b68 	.word	0x08008b68
 8007650:	08008b72 	.word	0x08008b72
 8007654:	00000000 	.word	0x00000000
 8007658:	080073a9 	.word	0x080073a9
 800765c:	08008b6e 	.word	0x08008b6e

08007660 <_printf_common>:
 8007660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007664:	4616      	mov	r6, r2
 8007666:	4699      	mov	r9, r3
 8007668:	688a      	ldr	r2, [r1, #8]
 800766a:	690b      	ldr	r3, [r1, #16]
 800766c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007670:	4293      	cmp	r3, r2
 8007672:	bfb8      	it	lt
 8007674:	4613      	movlt	r3, r2
 8007676:	6033      	str	r3, [r6, #0]
 8007678:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800767c:	4607      	mov	r7, r0
 800767e:	460c      	mov	r4, r1
 8007680:	b10a      	cbz	r2, 8007686 <_printf_common+0x26>
 8007682:	3301      	adds	r3, #1
 8007684:	6033      	str	r3, [r6, #0]
 8007686:	6823      	ldr	r3, [r4, #0]
 8007688:	0699      	lsls	r1, r3, #26
 800768a:	bf42      	ittt	mi
 800768c:	6833      	ldrmi	r3, [r6, #0]
 800768e:	3302      	addmi	r3, #2
 8007690:	6033      	strmi	r3, [r6, #0]
 8007692:	6825      	ldr	r5, [r4, #0]
 8007694:	f015 0506 	ands.w	r5, r5, #6
 8007698:	d106      	bne.n	80076a8 <_printf_common+0x48>
 800769a:	f104 0a19 	add.w	sl, r4, #25
 800769e:	68e3      	ldr	r3, [r4, #12]
 80076a0:	6832      	ldr	r2, [r6, #0]
 80076a2:	1a9b      	subs	r3, r3, r2
 80076a4:	42ab      	cmp	r3, r5
 80076a6:	dc26      	bgt.n	80076f6 <_printf_common+0x96>
 80076a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076ac:	1e13      	subs	r3, r2, #0
 80076ae:	6822      	ldr	r2, [r4, #0]
 80076b0:	bf18      	it	ne
 80076b2:	2301      	movne	r3, #1
 80076b4:	0692      	lsls	r2, r2, #26
 80076b6:	d42b      	bmi.n	8007710 <_printf_common+0xb0>
 80076b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076bc:	4649      	mov	r1, r9
 80076be:	4638      	mov	r0, r7
 80076c0:	47c0      	blx	r8
 80076c2:	3001      	adds	r0, #1
 80076c4:	d01e      	beq.n	8007704 <_printf_common+0xa4>
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	68e5      	ldr	r5, [r4, #12]
 80076ca:	6832      	ldr	r2, [r6, #0]
 80076cc:	f003 0306 	and.w	r3, r3, #6
 80076d0:	2b04      	cmp	r3, #4
 80076d2:	bf08      	it	eq
 80076d4:	1aad      	subeq	r5, r5, r2
 80076d6:	68a3      	ldr	r3, [r4, #8]
 80076d8:	6922      	ldr	r2, [r4, #16]
 80076da:	bf0c      	ite	eq
 80076dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076e0:	2500      	movne	r5, #0
 80076e2:	4293      	cmp	r3, r2
 80076e4:	bfc4      	itt	gt
 80076e6:	1a9b      	subgt	r3, r3, r2
 80076e8:	18ed      	addgt	r5, r5, r3
 80076ea:	2600      	movs	r6, #0
 80076ec:	341a      	adds	r4, #26
 80076ee:	42b5      	cmp	r5, r6
 80076f0:	d11a      	bne.n	8007728 <_printf_common+0xc8>
 80076f2:	2000      	movs	r0, #0
 80076f4:	e008      	b.n	8007708 <_printf_common+0xa8>
 80076f6:	2301      	movs	r3, #1
 80076f8:	4652      	mov	r2, sl
 80076fa:	4649      	mov	r1, r9
 80076fc:	4638      	mov	r0, r7
 80076fe:	47c0      	blx	r8
 8007700:	3001      	adds	r0, #1
 8007702:	d103      	bne.n	800770c <_printf_common+0xac>
 8007704:	f04f 30ff 	mov.w	r0, #4294967295
 8007708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800770c:	3501      	adds	r5, #1
 800770e:	e7c6      	b.n	800769e <_printf_common+0x3e>
 8007710:	18e1      	adds	r1, r4, r3
 8007712:	1c5a      	adds	r2, r3, #1
 8007714:	2030      	movs	r0, #48	; 0x30
 8007716:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800771a:	4422      	add	r2, r4
 800771c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007720:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007724:	3302      	adds	r3, #2
 8007726:	e7c7      	b.n	80076b8 <_printf_common+0x58>
 8007728:	2301      	movs	r3, #1
 800772a:	4622      	mov	r2, r4
 800772c:	4649      	mov	r1, r9
 800772e:	4638      	mov	r0, r7
 8007730:	47c0      	blx	r8
 8007732:	3001      	adds	r0, #1
 8007734:	d0e6      	beq.n	8007704 <_printf_common+0xa4>
 8007736:	3601      	adds	r6, #1
 8007738:	e7d9      	b.n	80076ee <_printf_common+0x8e>
	...

0800773c <_printf_i>:
 800773c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007740:	7e0f      	ldrb	r7, [r1, #24]
 8007742:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007744:	2f78      	cmp	r7, #120	; 0x78
 8007746:	4691      	mov	r9, r2
 8007748:	4680      	mov	r8, r0
 800774a:	460c      	mov	r4, r1
 800774c:	469a      	mov	sl, r3
 800774e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007752:	d807      	bhi.n	8007764 <_printf_i+0x28>
 8007754:	2f62      	cmp	r7, #98	; 0x62
 8007756:	d80a      	bhi.n	800776e <_printf_i+0x32>
 8007758:	2f00      	cmp	r7, #0
 800775a:	f000 80d8 	beq.w	800790e <_printf_i+0x1d2>
 800775e:	2f58      	cmp	r7, #88	; 0x58
 8007760:	f000 80a3 	beq.w	80078aa <_printf_i+0x16e>
 8007764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007768:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800776c:	e03a      	b.n	80077e4 <_printf_i+0xa8>
 800776e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007772:	2b15      	cmp	r3, #21
 8007774:	d8f6      	bhi.n	8007764 <_printf_i+0x28>
 8007776:	a101      	add	r1, pc, #4	; (adr r1, 800777c <_printf_i+0x40>)
 8007778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800777c:	080077d5 	.word	0x080077d5
 8007780:	080077e9 	.word	0x080077e9
 8007784:	08007765 	.word	0x08007765
 8007788:	08007765 	.word	0x08007765
 800778c:	08007765 	.word	0x08007765
 8007790:	08007765 	.word	0x08007765
 8007794:	080077e9 	.word	0x080077e9
 8007798:	08007765 	.word	0x08007765
 800779c:	08007765 	.word	0x08007765
 80077a0:	08007765 	.word	0x08007765
 80077a4:	08007765 	.word	0x08007765
 80077a8:	080078f5 	.word	0x080078f5
 80077ac:	08007819 	.word	0x08007819
 80077b0:	080078d7 	.word	0x080078d7
 80077b4:	08007765 	.word	0x08007765
 80077b8:	08007765 	.word	0x08007765
 80077bc:	08007917 	.word	0x08007917
 80077c0:	08007765 	.word	0x08007765
 80077c4:	08007819 	.word	0x08007819
 80077c8:	08007765 	.word	0x08007765
 80077cc:	08007765 	.word	0x08007765
 80077d0:	080078df 	.word	0x080078df
 80077d4:	682b      	ldr	r3, [r5, #0]
 80077d6:	1d1a      	adds	r2, r3, #4
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	602a      	str	r2, [r5, #0]
 80077dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077e4:	2301      	movs	r3, #1
 80077e6:	e0a3      	b.n	8007930 <_printf_i+0x1f4>
 80077e8:	6820      	ldr	r0, [r4, #0]
 80077ea:	6829      	ldr	r1, [r5, #0]
 80077ec:	0606      	lsls	r6, r0, #24
 80077ee:	f101 0304 	add.w	r3, r1, #4
 80077f2:	d50a      	bpl.n	800780a <_printf_i+0xce>
 80077f4:	680e      	ldr	r6, [r1, #0]
 80077f6:	602b      	str	r3, [r5, #0]
 80077f8:	2e00      	cmp	r6, #0
 80077fa:	da03      	bge.n	8007804 <_printf_i+0xc8>
 80077fc:	232d      	movs	r3, #45	; 0x2d
 80077fe:	4276      	negs	r6, r6
 8007800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007804:	485e      	ldr	r0, [pc, #376]	; (8007980 <_printf_i+0x244>)
 8007806:	230a      	movs	r3, #10
 8007808:	e019      	b.n	800783e <_printf_i+0x102>
 800780a:	680e      	ldr	r6, [r1, #0]
 800780c:	602b      	str	r3, [r5, #0]
 800780e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007812:	bf18      	it	ne
 8007814:	b236      	sxthne	r6, r6
 8007816:	e7ef      	b.n	80077f8 <_printf_i+0xbc>
 8007818:	682b      	ldr	r3, [r5, #0]
 800781a:	6820      	ldr	r0, [r4, #0]
 800781c:	1d19      	adds	r1, r3, #4
 800781e:	6029      	str	r1, [r5, #0]
 8007820:	0601      	lsls	r1, r0, #24
 8007822:	d501      	bpl.n	8007828 <_printf_i+0xec>
 8007824:	681e      	ldr	r6, [r3, #0]
 8007826:	e002      	b.n	800782e <_printf_i+0xf2>
 8007828:	0646      	lsls	r6, r0, #25
 800782a:	d5fb      	bpl.n	8007824 <_printf_i+0xe8>
 800782c:	881e      	ldrh	r6, [r3, #0]
 800782e:	4854      	ldr	r0, [pc, #336]	; (8007980 <_printf_i+0x244>)
 8007830:	2f6f      	cmp	r7, #111	; 0x6f
 8007832:	bf0c      	ite	eq
 8007834:	2308      	moveq	r3, #8
 8007836:	230a      	movne	r3, #10
 8007838:	2100      	movs	r1, #0
 800783a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800783e:	6865      	ldr	r5, [r4, #4]
 8007840:	60a5      	str	r5, [r4, #8]
 8007842:	2d00      	cmp	r5, #0
 8007844:	bfa2      	ittt	ge
 8007846:	6821      	ldrge	r1, [r4, #0]
 8007848:	f021 0104 	bicge.w	r1, r1, #4
 800784c:	6021      	strge	r1, [r4, #0]
 800784e:	b90e      	cbnz	r6, 8007854 <_printf_i+0x118>
 8007850:	2d00      	cmp	r5, #0
 8007852:	d04d      	beq.n	80078f0 <_printf_i+0x1b4>
 8007854:	4615      	mov	r5, r2
 8007856:	fbb6 f1f3 	udiv	r1, r6, r3
 800785a:	fb03 6711 	mls	r7, r3, r1, r6
 800785e:	5dc7      	ldrb	r7, [r0, r7]
 8007860:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007864:	4637      	mov	r7, r6
 8007866:	42bb      	cmp	r3, r7
 8007868:	460e      	mov	r6, r1
 800786a:	d9f4      	bls.n	8007856 <_printf_i+0x11a>
 800786c:	2b08      	cmp	r3, #8
 800786e:	d10b      	bne.n	8007888 <_printf_i+0x14c>
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	07de      	lsls	r6, r3, #31
 8007874:	d508      	bpl.n	8007888 <_printf_i+0x14c>
 8007876:	6923      	ldr	r3, [r4, #16]
 8007878:	6861      	ldr	r1, [r4, #4]
 800787a:	4299      	cmp	r1, r3
 800787c:	bfde      	ittt	le
 800787e:	2330      	movle	r3, #48	; 0x30
 8007880:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007884:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007888:	1b52      	subs	r2, r2, r5
 800788a:	6122      	str	r2, [r4, #16]
 800788c:	f8cd a000 	str.w	sl, [sp]
 8007890:	464b      	mov	r3, r9
 8007892:	aa03      	add	r2, sp, #12
 8007894:	4621      	mov	r1, r4
 8007896:	4640      	mov	r0, r8
 8007898:	f7ff fee2 	bl	8007660 <_printf_common>
 800789c:	3001      	adds	r0, #1
 800789e:	d14c      	bne.n	800793a <_printf_i+0x1fe>
 80078a0:	f04f 30ff 	mov.w	r0, #4294967295
 80078a4:	b004      	add	sp, #16
 80078a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078aa:	4835      	ldr	r0, [pc, #212]	; (8007980 <_printf_i+0x244>)
 80078ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80078b0:	6829      	ldr	r1, [r5, #0]
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80078b8:	6029      	str	r1, [r5, #0]
 80078ba:	061d      	lsls	r5, r3, #24
 80078bc:	d514      	bpl.n	80078e8 <_printf_i+0x1ac>
 80078be:	07df      	lsls	r7, r3, #31
 80078c0:	bf44      	itt	mi
 80078c2:	f043 0320 	orrmi.w	r3, r3, #32
 80078c6:	6023      	strmi	r3, [r4, #0]
 80078c8:	b91e      	cbnz	r6, 80078d2 <_printf_i+0x196>
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	f023 0320 	bic.w	r3, r3, #32
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	2310      	movs	r3, #16
 80078d4:	e7b0      	b.n	8007838 <_printf_i+0xfc>
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	f043 0320 	orr.w	r3, r3, #32
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	2378      	movs	r3, #120	; 0x78
 80078e0:	4828      	ldr	r0, [pc, #160]	; (8007984 <_printf_i+0x248>)
 80078e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078e6:	e7e3      	b.n	80078b0 <_printf_i+0x174>
 80078e8:	0659      	lsls	r1, r3, #25
 80078ea:	bf48      	it	mi
 80078ec:	b2b6      	uxthmi	r6, r6
 80078ee:	e7e6      	b.n	80078be <_printf_i+0x182>
 80078f0:	4615      	mov	r5, r2
 80078f2:	e7bb      	b.n	800786c <_printf_i+0x130>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	6826      	ldr	r6, [r4, #0]
 80078f8:	6961      	ldr	r1, [r4, #20]
 80078fa:	1d18      	adds	r0, r3, #4
 80078fc:	6028      	str	r0, [r5, #0]
 80078fe:	0635      	lsls	r5, r6, #24
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	d501      	bpl.n	8007908 <_printf_i+0x1cc>
 8007904:	6019      	str	r1, [r3, #0]
 8007906:	e002      	b.n	800790e <_printf_i+0x1d2>
 8007908:	0670      	lsls	r0, r6, #25
 800790a:	d5fb      	bpl.n	8007904 <_printf_i+0x1c8>
 800790c:	8019      	strh	r1, [r3, #0]
 800790e:	2300      	movs	r3, #0
 8007910:	6123      	str	r3, [r4, #16]
 8007912:	4615      	mov	r5, r2
 8007914:	e7ba      	b.n	800788c <_printf_i+0x150>
 8007916:	682b      	ldr	r3, [r5, #0]
 8007918:	1d1a      	adds	r2, r3, #4
 800791a:	602a      	str	r2, [r5, #0]
 800791c:	681d      	ldr	r5, [r3, #0]
 800791e:	6862      	ldr	r2, [r4, #4]
 8007920:	2100      	movs	r1, #0
 8007922:	4628      	mov	r0, r5
 8007924:	f7f8 fc54 	bl	80001d0 <memchr>
 8007928:	b108      	cbz	r0, 800792e <_printf_i+0x1f2>
 800792a:	1b40      	subs	r0, r0, r5
 800792c:	6060      	str	r0, [r4, #4]
 800792e:	6863      	ldr	r3, [r4, #4]
 8007930:	6123      	str	r3, [r4, #16]
 8007932:	2300      	movs	r3, #0
 8007934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007938:	e7a8      	b.n	800788c <_printf_i+0x150>
 800793a:	6923      	ldr	r3, [r4, #16]
 800793c:	462a      	mov	r2, r5
 800793e:	4649      	mov	r1, r9
 8007940:	4640      	mov	r0, r8
 8007942:	47d0      	blx	sl
 8007944:	3001      	adds	r0, #1
 8007946:	d0ab      	beq.n	80078a0 <_printf_i+0x164>
 8007948:	6823      	ldr	r3, [r4, #0]
 800794a:	079b      	lsls	r3, r3, #30
 800794c:	d413      	bmi.n	8007976 <_printf_i+0x23a>
 800794e:	68e0      	ldr	r0, [r4, #12]
 8007950:	9b03      	ldr	r3, [sp, #12]
 8007952:	4298      	cmp	r0, r3
 8007954:	bfb8      	it	lt
 8007956:	4618      	movlt	r0, r3
 8007958:	e7a4      	b.n	80078a4 <_printf_i+0x168>
 800795a:	2301      	movs	r3, #1
 800795c:	4632      	mov	r2, r6
 800795e:	4649      	mov	r1, r9
 8007960:	4640      	mov	r0, r8
 8007962:	47d0      	blx	sl
 8007964:	3001      	adds	r0, #1
 8007966:	d09b      	beq.n	80078a0 <_printf_i+0x164>
 8007968:	3501      	adds	r5, #1
 800796a:	68e3      	ldr	r3, [r4, #12]
 800796c:	9903      	ldr	r1, [sp, #12]
 800796e:	1a5b      	subs	r3, r3, r1
 8007970:	42ab      	cmp	r3, r5
 8007972:	dcf2      	bgt.n	800795a <_printf_i+0x21e>
 8007974:	e7eb      	b.n	800794e <_printf_i+0x212>
 8007976:	2500      	movs	r5, #0
 8007978:	f104 0619 	add.w	r6, r4, #25
 800797c:	e7f5      	b.n	800796a <_printf_i+0x22e>
 800797e:	bf00      	nop
 8007980:	08008b79 	.word	0x08008b79
 8007984:	08008b8a 	.word	0x08008b8a

08007988 <memcpy>:
 8007988:	440a      	add	r2, r1
 800798a:	4291      	cmp	r1, r2
 800798c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007990:	d100      	bne.n	8007994 <memcpy+0xc>
 8007992:	4770      	bx	lr
 8007994:	b510      	push	{r4, lr}
 8007996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800799a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800799e:	4291      	cmp	r1, r2
 80079a0:	d1f9      	bne.n	8007996 <memcpy+0xe>
 80079a2:	bd10      	pop	{r4, pc}

080079a4 <memmove>:
 80079a4:	4288      	cmp	r0, r1
 80079a6:	b510      	push	{r4, lr}
 80079a8:	eb01 0402 	add.w	r4, r1, r2
 80079ac:	d902      	bls.n	80079b4 <memmove+0x10>
 80079ae:	4284      	cmp	r4, r0
 80079b0:	4623      	mov	r3, r4
 80079b2:	d807      	bhi.n	80079c4 <memmove+0x20>
 80079b4:	1e43      	subs	r3, r0, #1
 80079b6:	42a1      	cmp	r1, r4
 80079b8:	d008      	beq.n	80079cc <memmove+0x28>
 80079ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079c2:	e7f8      	b.n	80079b6 <memmove+0x12>
 80079c4:	4402      	add	r2, r0
 80079c6:	4601      	mov	r1, r0
 80079c8:	428a      	cmp	r2, r1
 80079ca:	d100      	bne.n	80079ce <memmove+0x2a>
 80079cc:	bd10      	pop	{r4, pc}
 80079ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079d6:	e7f7      	b.n	80079c8 <memmove+0x24>

080079d8 <_free_r>:
 80079d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079da:	2900      	cmp	r1, #0
 80079dc:	d044      	beq.n	8007a68 <_free_r+0x90>
 80079de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079e2:	9001      	str	r0, [sp, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f1a1 0404 	sub.w	r4, r1, #4
 80079ea:	bfb8      	it	lt
 80079ec:	18e4      	addlt	r4, r4, r3
 80079ee:	f000 f913 	bl	8007c18 <__malloc_lock>
 80079f2:	4a1e      	ldr	r2, [pc, #120]	; (8007a6c <_free_r+0x94>)
 80079f4:	9801      	ldr	r0, [sp, #4]
 80079f6:	6813      	ldr	r3, [r2, #0]
 80079f8:	b933      	cbnz	r3, 8007a08 <_free_r+0x30>
 80079fa:	6063      	str	r3, [r4, #4]
 80079fc:	6014      	str	r4, [r2, #0]
 80079fe:	b003      	add	sp, #12
 8007a00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a04:	f000 b90e 	b.w	8007c24 <__malloc_unlock>
 8007a08:	42a3      	cmp	r3, r4
 8007a0a:	d908      	bls.n	8007a1e <_free_r+0x46>
 8007a0c:	6825      	ldr	r5, [r4, #0]
 8007a0e:	1961      	adds	r1, r4, r5
 8007a10:	428b      	cmp	r3, r1
 8007a12:	bf01      	itttt	eq
 8007a14:	6819      	ldreq	r1, [r3, #0]
 8007a16:	685b      	ldreq	r3, [r3, #4]
 8007a18:	1949      	addeq	r1, r1, r5
 8007a1a:	6021      	streq	r1, [r4, #0]
 8007a1c:	e7ed      	b.n	80079fa <_free_r+0x22>
 8007a1e:	461a      	mov	r2, r3
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	b10b      	cbz	r3, 8007a28 <_free_r+0x50>
 8007a24:	42a3      	cmp	r3, r4
 8007a26:	d9fa      	bls.n	8007a1e <_free_r+0x46>
 8007a28:	6811      	ldr	r1, [r2, #0]
 8007a2a:	1855      	adds	r5, r2, r1
 8007a2c:	42a5      	cmp	r5, r4
 8007a2e:	d10b      	bne.n	8007a48 <_free_r+0x70>
 8007a30:	6824      	ldr	r4, [r4, #0]
 8007a32:	4421      	add	r1, r4
 8007a34:	1854      	adds	r4, r2, r1
 8007a36:	42a3      	cmp	r3, r4
 8007a38:	6011      	str	r1, [r2, #0]
 8007a3a:	d1e0      	bne.n	80079fe <_free_r+0x26>
 8007a3c:	681c      	ldr	r4, [r3, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	6053      	str	r3, [r2, #4]
 8007a42:	4421      	add	r1, r4
 8007a44:	6011      	str	r1, [r2, #0]
 8007a46:	e7da      	b.n	80079fe <_free_r+0x26>
 8007a48:	d902      	bls.n	8007a50 <_free_r+0x78>
 8007a4a:	230c      	movs	r3, #12
 8007a4c:	6003      	str	r3, [r0, #0]
 8007a4e:	e7d6      	b.n	80079fe <_free_r+0x26>
 8007a50:	6825      	ldr	r5, [r4, #0]
 8007a52:	1961      	adds	r1, r4, r5
 8007a54:	428b      	cmp	r3, r1
 8007a56:	bf04      	itt	eq
 8007a58:	6819      	ldreq	r1, [r3, #0]
 8007a5a:	685b      	ldreq	r3, [r3, #4]
 8007a5c:	6063      	str	r3, [r4, #4]
 8007a5e:	bf04      	itt	eq
 8007a60:	1949      	addeq	r1, r1, r5
 8007a62:	6021      	streq	r1, [r4, #0]
 8007a64:	6054      	str	r4, [r2, #4]
 8007a66:	e7ca      	b.n	80079fe <_free_r+0x26>
 8007a68:	b003      	add	sp, #12
 8007a6a:	bd30      	pop	{r4, r5, pc}
 8007a6c:	200002d8 	.word	0x200002d8

08007a70 <sbrk_aligned>:
 8007a70:	b570      	push	{r4, r5, r6, lr}
 8007a72:	4e0e      	ldr	r6, [pc, #56]	; (8007aac <sbrk_aligned+0x3c>)
 8007a74:	460c      	mov	r4, r1
 8007a76:	6831      	ldr	r1, [r6, #0]
 8007a78:	4605      	mov	r5, r0
 8007a7a:	b911      	cbnz	r1, 8007a82 <sbrk_aligned+0x12>
 8007a7c:	f000 f8bc 	bl	8007bf8 <_sbrk_r>
 8007a80:	6030      	str	r0, [r6, #0]
 8007a82:	4621      	mov	r1, r4
 8007a84:	4628      	mov	r0, r5
 8007a86:	f000 f8b7 	bl	8007bf8 <_sbrk_r>
 8007a8a:	1c43      	adds	r3, r0, #1
 8007a8c:	d00a      	beq.n	8007aa4 <sbrk_aligned+0x34>
 8007a8e:	1cc4      	adds	r4, r0, #3
 8007a90:	f024 0403 	bic.w	r4, r4, #3
 8007a94:	42a0      	cmp	r0, r4
 8007a96:	d007      	beq.n	8007aa8 <sbrk_aligned+0x38>
 8007a98:	1a21      	subs	r1, r4, r0
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	f000 f8ac 	bl	8007bf8 <_sbrk_r>
 8007aa0:	3001      	adds	r0, #1
 8007aa2:	d101      	bne.n	8007aa8 <sbrk_aligned+0x38>
 8007aa4:	f04f 34ff 	mov.w	r4, #4294967295
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	bd70      	pop	{r4, r5, r6, pc}
 8007aac:	200002dc 	.word	0x200002dc

08007ab0 <_malloc_r>:
 8007ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab4:	1ccd      	adds	r5, r1, #3
 8007ab6:	f025 0503 	bic.w	r5, r5, #3
 8007aba:	3508      	adds	r5, #8
 8007abc:	2d0c      	cmp	r5, #12
 8007abe:	bf38      	it	cc
 8007ac0:	250c      	movcc	r5, #12
 8007ac2:	2d00      	cmp	r5, #0
 8007ac4:	4607      	mov	r7, r0
 8007ac6:	db01      	blt.n	8007acc <_malloc_r+0x1c>
 8007ac8:	42a9      	cmp	r1, r5
 8007aca:	d905      	bls.n	8007ad8 <_malloc_r+0x28>
 8007acc:	230c      	movs	r3, #12
 8007ace:	603b      	str	r3, [r7, #0]
 8007ad0:	2600      	movs	r6, #0
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ad8:	4e2e      	ldr	r6, [pc, #184]	; (8007b94 <_malloc_r+0xe4>)
 8007ada:	f000 f89d 	bl	8007c18 <__malloc_lock>
 8007ade:	6833      	ldr	r3, [r6, #0]
 8007ae0:	461c      	mov	r4, r3
 8007ae2:	bb34      	cbnz	r4, 8007b32 <_malloc_r+0x82>
 8007ae4:	4629      	mov	r1, r5
 8007ae6:	4638      	mov	r0, r7
 8007ae8:	f7ff ffc2 	bl	8007a70 <sbrk_aligned>
 8007aec:	1c43      	adds	r3, r0, #1
 8007aee:	4604      	mov	r4, r0
 8007af0:	d14d      	bne.n	8007b8e <_malloc_r+0xde>
 8007af2:	6834      	ldr	r4, [r6, #0]
 8007af4:	4626      	mov	r6, r4
 8007af6:	2e00      	cmp	r6, #0
 8007af8:	d140      	bne.n	8007b7c <_malloc_r+0xcc>
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	4631      	mov	r1, r6
 8007afe:	4638      	mov	r0, r7
 8007b00:	eb04 0803 	add.w	r8, r4, r3
 8007b04:	f000 f878 	bl	8007bf8 <_sbrk_r>
 8007b08:	4580      	cmp	r8, r0
 8007b0a:	d13a      	bne.n	8007b82 <_malloc_r+0xd2>
 8007b0c:	6821      	ldr	r1, [r4, #0]
 8007b0e:	3503      	adds	r5, #3
 8007b10:	1a6d      	subs	r5, r5, r1
 8007b12:	f025 0503 	bic.w	r5, r5, #3
 8007b16:	3508      	adds	r5, #8
 8007b18:	2d0c      	cmp	r5, #12
 8007b1a:	bf38      	it	cc
 8007b1c:	250c      	movcc	r5, #12
 8007b1e:	4629      	mov	r1, r5
 8007b20:	4638      	mov	r0, r7
 8007b22:	f7ff ffa5 	bl	8007a70 <sbrk_aligned>
 8007b26:	3001      	adds	r0, #1
 8007b28:	d02b      	beq.n	8007b82 <_malloc_r+0xd2>
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	442b      	add	r3, r5
 8007b2e:	6023      	str	r3, [r4, #0]
 8007b30:	e00e      	b.n	8007b50 <_malloc_r+0xa0>
 8007b32:	6822      	ldr	r2, [r4, #0]
 8007b34:	1b52      	subs	r2, r2, r5
 8007b36:	d41e      	bmi.n	8007b76 <_malloc_r+0xc6>
 8007b38:	2a0b      	cmp	r2, #11
 8007b3a:	d916      	bls.n	8007b6a <_malloc_r+0xba>
 8007b3c:	1961      	adds	r1, r4, r5
 8007b3e:	42a3      	cmp	r3, r4
 8007b40:	6025      	str	r5, [r4, #0]
 8007b42:	bf18      	it	ne
 8007b44:	6059      	strne	r1, [r3, #4]
 8007b46:	6863      	ldr	r3, [r4, #4]
 8007b48:	bf08      	it	eq
 8007b4a:	6031      	streq	r1, [r6, #0]
 8007b4c:	5162      	str	r2, [r4, r5]
 8007b4e:	604b      	str	r3, [r1, #4]
 8007b50:	4638      	mov	r0, r7
 8007b52:	f104 060b 	add.w	r6, r4, #11
 8007b56:	f000 f865 	bl	8007c24 <__malloc_unlock>
 8007b5a:	f026 0607 	bic.w	r6, r6, #7
 8007b5e:	1d23      	adds	r3, r4, #4
 8007b60:	1af2      	subs	r2, r6, r3
 8007b62:	d0b6      	beq.n	8007ad2 <_malloc_r+0x22>
 8007b64:	1b9b      	subs	r3, r3, r6
 8007b66:	50a3      	str	r3, [r4, r2]
 8007b68:	e7b3      	b.n	8007ad2 <_malloc_r+0x22>
 8007b6a:	6862      	ldr	r2, [r4, #4]
 8007b6c:	42a3      	cmp	r3, r4
 8007b6e:	bf0c      	ite	eq
 8007b70:	6032      	streq	r2, [r6, #0]
 8007b72:	605a      	strne	r2, [r3, #4]
 8007b74:	e7ec      	b.n	8007b50 <_malloc_r+0xa0>
 8007b76:	4623      	mov	r3, r4
 8007b78:	6864      	ldr	r4, [r4, #4]
 8007b7a:	e7b2      	b.n	8007ae2 <_malloc_r+0x32>
 8007b7c:	4634      	mov	r4, r6
 8007b7e:	6876      	ldr	r6, [r6, #4]
 8007b80:	e7b9      	b.n	8007af6 <_malloc_r+0x46>
 8007b82:	230c      	movs	r3, #12
 8007b84:	603b      	str	r3, [r7, #0]
 8007b86:	4638      	mov	r0, r7
 8007b88:	f000 f84c 	bl	8007c24 <__malloc_unlock>
 8007b8c:	e7a1      	b.n	8007ad2 <_malloc_r+0x22>
 8007b8e:	6025      	str	r5, [r4, #0]
 8007b90:	e7de      	b.n	8007b50 <_malloc_r+0xa0>
 8007b92:	bf00      	nop
 8007b94:	200002d8 	.word	0x200002d8

08007b98 <_realloc_r>:
 8007b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b9c:	4680      	mov	r8, r0
 8007b9e:	4614      	mov	r4, r2
 8007ba0:	460e      	mov	r6, r1
 8007ba2:	b921      	cbnz	r1, 8007bae <_realloc_r+0x16>
 8007ba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba8:	4611      	mov	r1, r2
 8007baa:	f7ff bf81 	b.w	8007ab0 <_malloc_r>
 8007bae:	b92a      	cbnz	r2, 8007bbc <_realloc_r+0x24>
 8007bb0:	f7ff ff12 	bl	80079d8 <_free_r>
 8007bb4:	4625      	mov	r5, r4
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bbc:	f000 f838 	bl	8007c30 <_malloc_usable_size_r>
 8007bc0:	4284      	cmp	r4, r0
 8007bc2:	4607      	mov	r7, r0
 8007bc4:	d802      	bhi.n	8007bcc <_realloc_r+0x34>
 8007bc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007bca:	d812      	bhi.n	8007bf2 <_realloc_r+0x5a>
 8007bcc:	4621      	mov	r1, r4
 8007bce:	4640      	mov	r0, r8
 8007bd0:	f7ff ff6e 	bl	8007ab0 <_malloc_r>
 8007bd4:	4605      	mov	r5, r0
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	d0ed      	beq.n	8007bb6 <_realloc_r+0x1e>
 8007bda:	42bc      	cmp	r4, r7
 8007bdc:	4622      	mov	r2, r4
 8007bde:	4631      	mov	r1, r6
 8007be0:	bf28      	it	cs
 8007be2:	463a      	movcs	r2, r7
 8007be4:	f7ff fed0 	bl	8007988 <memcpy>
 8007be8:	4631      	mov	r1, r6
 8007bea:	4640      	mov	r0, r8
 8007bec:	f7ff fef4 	bl	80079d8 <_free_r>
 8007bf0:	e7e1      	b.n	8007bb6 <_realloc_r+0x1e>
 8007bf2:	4635      	mov	r5, r6
 8007bf4:	e7df      	b.n	8007bb6 <_realloc_r+0x1e>
	...

08007bf8 <_sbrk_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	4d06      	ldr	r5, [pc, #24]	; (8007c14 <_sbrk_r+0x1c>)
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	4604      	mov	r4, r0
 8007c00:	4608      	mov	r0, r1
 8007c02:	602b      	str	r3, [r5, #0]
 8007c04:	f7fa fe24 	bl	8002850 <_sbrk>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	d102      	bne.n	8007c12 <_sbrk_r+0x1a>
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	b103      	cbz	r3, 8007c12 <_sbrk_r+0x1a>
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	bd38      	pop	{r3, r4, r5, pc}
 8007c14:	200002e0 	.word	0x200002e0

08007c18 <__malloc_lock>:
 8007c18:	4801      	ldr	r0, [pc, #4]	; (8007c20 <__malloc_lock+0x8>)
 8007c1a:	f000 b811 	b.w	8007c40 <__retarget_lock_acquire_recursive>
 8007c1e:	bf00      	nop
 8007c20:	200002e4 	.word	0x200002e4

08007c24 <__malloc_unlock>:
 8007c24:	4801      	ldr	r0, [pc, #4]	; (8007c2c <__malloc_unlock+0x8>)
 8007c26:	f000 b80c 	b.w	8007c42 <__retarget_lock_release_recursive>
 8007c2a:	bf00      	nop
 8007c2c:	200002e4 	.word	0x200002e4

08007c30 <_malloc_usable_size_r>:
 8007c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c34:	1f18      	subs	r0, r3, #4
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	bfbc      	itt	lt
 8007c3a:	580b      	ldrlt	r3, [r1, r0]
 8007c3c:	18c0      	addlt	r0, r0, r3
 8007c3e:	4770      	bx	lr

08007c40 <__retarget_lock_acquire_recursive>:
 8007c40:	4770      	bx	lr

08007c42 <__retarget_lock_release_recursive>:
 8007c42:	4770      	bx	lr

08007c44 <_init>:
 8007c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c46:	bf00      	nop
 8007c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c4a:	bc08      	pop	{r3}
 8007c4c:	469e      	mov	lr, r3
 8007c4e:	4770      	bx	lr

08007c50 <_fini>:
 8007c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c52:	bf00      	nop
 8007c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c56:	bc08      	pop	{r3}
 8007c58:	469e      	mov	lr, r3
 8007c5a:	4770      	bx	lr
